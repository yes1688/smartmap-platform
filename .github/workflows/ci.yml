name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_DB: spatial_platform_test
          POSTGRES_USER: spatial_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: spatial_platform_test
          DB_USER: spatial_user
          DB_PASSWORD: test_password
          AI_PROVIDER: ollama
          OLLAMA_URL: http://localhost:11434
        run: go test ./internal/... -v -cover -coverprofile=coverage.out

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 20" | bc -l) )); then
            echo "❌ Coverage below 20%"
            exit 1
          fi
          echo "✅ Coverage: ${COVERAGE}%"

  # Backend Build
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build backend
        run: go build -v ./cmd/server

      - name: Check binary
        run: |
          if [ ! -f ./server ]; then
            echo "❌ Binary not found"
            exit 1
          fi
          echo "✅ Backend build successful"

  # Frontend Build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Check build output
        working-directory: ./web
        run: |
          if [ ! -d ./dist ]; then
            echo "❌ Build output not found"
            exit 1
          fi
          echo "✅ Frontend build successful"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: web/dist

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code not formatted. Run: go fmt ./..."
            gofmt -s -l .
            exit 1
          fi
          echo "✅ Code formatting OK"

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

  # All checks passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-test, backend-build, frontend-build, code-quality]

    steps:
      - name: Success
        run: echo "✅ All CI checks passed successfully!"