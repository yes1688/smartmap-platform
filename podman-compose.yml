# 生產環境配置 - 使用 nginx 反向代理和多階段構建
# 使用方式: make prod 或 podman-compose up
#
# 開發環境請使用: make dev 或 podman-compose -f podman-compose.dev.yml up

version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: docker.io/postgis/postgis:16-3.4
    container_name: spatial-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-spatial_db}
      POSTGRES_USER: ${DB_USER:-spatial_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spatial_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-spatial_user} -d ${DB_NAME:-spatial_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spatial-network
    restart: unless-stopped

  # Go 應用 - 生產模式 (包含後端 + 前端)
  app:
    build:
      context: .
      dockerfile: containers/Containerfile
      args:
        - BUILD_ENV=production
    container_name: spatial-app
    environment:
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-spatial_db}
      - DB_USER=${DB_USER:-spatial_user}
      - DB_PASSWORD=${DB_PASSWORD:-spatial_password}
      - OLLAMA_URL=${OLLAMA_URL:-http://host.containers.internal:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b-it-qat}
      - PORT=${APP_PORT:-8080}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
    extra_hosts:
      - "host.containers.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - spatial-network
    restart: unless-stopped

  # Nginx 反向代理 - 生產模式
  nginx:
    build:
      context: .
      dockerfile: containers/Dockerfile.nginx
    container_name: spatial-nginx
    ports:
      - "${PORT:-7003}:80"
    volumes:
      - ./containers/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - spatial-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  spatial-network:
    driver: bridge
