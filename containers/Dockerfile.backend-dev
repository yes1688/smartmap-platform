# Go 後端開發環境 Dockerfile
FROM golang:1.23-alpine AS dev

# 安裝開發工具
RUN apk add --no-cache git ca-certificates tzdata curl postgresql-client

# 安裝 Air (Go 熱重載工具)
RUN go install github.com/cosmtrek/air@latest

# 設置工作目錄
WORKDIR /app

# 複製 go.mod 和相關依賴文件
COPY go.mod go.sum ./

# 下載依賴
RUN go mod download

# 複製源代碼 (開發時會透過 volume 掛載覆蓋)
COPY cmd/ ./cmd/
COPY internal/ ./internal/
COPY configs/ ./configs/

# 設置環境變數
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64
ENV GIN_MODE=debug

# 創建配置文件給 Air 使用
RUN echo '[build]' > .air.toml && \
    echo '  cmd = "go build -o ./tmp/spatial-app ./cmd/server"' >> .air.toml && \
    echo '  bin = "tmp/spatial-app"' >> .air.toml && \
    echo '  full_bin = "APP_ENV=dev APP_USER=air ./tmp/spatial-app"' >> .air.toml && \
    echo '  include_ext = ["go", "tpl", "tmpl", "html"]' >> .air.toml && \
    echo '  exclude_dir = ["tmp", "vendor", "testdata", "web"]' >> .air.toml && \
    echo '  include_dir = ["cmd", "internal", "configs"]' >> .air.toml && \
    echo '  follow_symlink = false' >> .air.toml && \
    echo '  delay = 1000' >> .air.toml && \
    echo '  stop_on_error = true' >> .air.toml && \
    echo '  send_interrupt = false' >> .air.toml && \
    echo '  kill_delay = "0s"' >> .air.toml && \
    echo '' >> .air.toml && \
    echo '[log]' >> .air.toml && \
    echo '  time = true' >> .air.toml && \
    echo '' >> .air.toml && \
    echo '[color]' >> .air.toml && \
    echo '  main = "magenta"' >> .air.toml && \
    echo '  watcher = "cyan"' >> .air.toml && \
    echo '  build = "yellow"' >> .air.toml && \
    echo '  runner = "green"' >> .air.toml

# 創建 tmp 目錄
RUN mkdir -p tmp

# 暴露端口
EXPOSE 8080

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 使用 Air 啟動開發服務器
CMD ["air", "-c", ".air.toml"]