# 開發環境專用配置 - 支援前後端熱重載
version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: docker.io/postgis/postgis:15-3.3
    container_name: spatial-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-spatial_db}
      POSTGRES_USER: ${DB_USER:-spatial_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spatial_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"  # 開發環境暴露數據庫端口方便調試
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-spatial_user} -d ${DB_NAME:-spatial_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spatial-dev-network

  # Go 後端服務 - 開發模式 (支援熱重載)
  backend:
    build:
      context: .
      dockerfile: containers/Dockerfile.backend-dev
    container_name: spatial-backend-dev
    env_file:
      - .env
    environment:
      - GIN_MODE=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-spatial_db}
      - DB_USER=${DB_USER:-spatial_user}
      - DB_PASSWORD=${DB_PASSWORD:-spatial_password}
      - AI_PROVIDER=${AI_PROVIDER:-ollama}
      - OLLAMA_URL=${OLLAMA_URL:-http://host.containers.internal:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gemma3:12b-it-qat}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL:-google/gemma-2-27b-it:free}
      - OPENROUTER_URL=${OPENROUTER_URL:-https://openrouter.ai/api/v1/chat/completions}
      - AI_RATE_LIMIT_RPM=${AI_RATE_LIMIT_RPM:-60}
      - PORT=8080
      - CESIUM_ACCESS_TOKEN=${CESIUM_ACCESS_TOKEN}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
    ports:
      - "${APP_PORT:-8080}:8080"  # 直接暴露後端端口
    volumes:
      - ./internal:/app/internal:ro  # 源代碼熱重載
      - ./cmd:/app/cmd:ro
      - ./configs:/app/configs:ro
      - ./go.mod:/app/go.mod  # Go 模組檔案
      - ./go.sum:/app/go.sum  # Go 依賴檢查檔案
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - spatial-dev-network

  # SolidJS 前端服務 - 開發模式 (支援熱重載)
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: spatial-frontend-dev
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - VITE_API_BASE_URL=http://localhost:${APP_PORT:-8080}/api/v1
      - VITE_WS_URL=ws://localhost:${APP_PORT:-8080}/ws
      - VITE_SPEECH_EAR_URL=http://localhost:3001
    ports:
      - "${FRONTEND_DEV_PORT:-3000}:3000"  # 直接暴露前端端口
    volumes:
      - ./web/src:/app/src:ro  # 源代碼熱重載
      - ./web/public:/app/public:ro
      - ./web/index.html:/app/index.html:ro
      - ./web/vite.config.ts:/app/vite.config.ts:ro
      - ./web/tsconfig.json:/app/tsconfig.json:ro
      - ./web/tailwind.config.js:/app/tailwind.config.js:ro
      - ./web/postcss.config.js:/app/postcss.config.js:ro
      - /app/node_modules  # 排除 node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spatial-dev-network

volumes:
  postgres_data_dev:
    driver: local

networks:
  spatial-dev-network:
    driver: bridge