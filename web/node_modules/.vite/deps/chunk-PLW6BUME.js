import {
  Matrix4,
  Vector3
} from "./chunk-FFUXF7YL.js";
import {
  Log,
  Stats,
  isBrowser
} from "./chunk-5S5NFWAX.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@luma.gl/engine/dist/animation/timeline.js
var channelHandles = 1;
var animationHandles = 1;
var Timeline = class {
  constructor() {
    __publicField(this, "time", 0);
    __publicField(this, "channels", /* @__PURE__ */ new Map());
    __publicField(this, "animations", /* @__PURE__ */ new Map());
    __publicField(this, "playing", false);
    __publicField(this, "lastEngineTime", -1);
  }
  addChannel(props) {
    const { delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1 } = props;
    const channelId = channelHandles++;
    const channel = {
      time: 0,
      delay,
      duration,
      rate,
      repeat
    };
    this._setChannelTime(channel, this.time);
    this.channels.set(channelId, channel);
    return channelId;
  }
  removeChannel(channelId) {
    this.channels.delete(channelId);
    for (const [animationHandle, animation] of this.animations) {
      if (animation.channel === channelId) {
        this.detachAnimation(animationHandle);
      }
    }
  }
  isFinished(channelId) {
    const channel = this.channels.get(channelId);
    if (channel === void 0) {
      return false;
    }
    return this.time >= channel.delay + channel.duration * channel.repeat;
  }
  getTime(channelId) {
    if (channelId === void 0) {
      return this.time;
    }
    const channel = this.channels.get(channelId);
    if (channel === void 0) {
      return -1;
    }
    return channel.time;
  }
  setTime(time) {
    this.time = Math.max(0, time);
    const channels = this.channels.values();
    for (const channel of channels) {
      this._setChannelTime(channel, this.time);
    }
    const animations = this.animations.values();
    for (const animationData of animations) {
      const { animation, channel } = animationData;
      animation.setTime(this.getTime(channel));
    }
  }
  play() {
    this.playing = true;
  }
  pause() {
    this.playing = false;
    this.lastEngineTime = -1;
  }
  reset() {
    this.setTime(0);
  }
  attachAnimation(animation, channelHandle) {
    const animationHandle = animationHandles++;
    this.animations.set(animationHandle, {
      animation,
      channel: channelHandle
    });
    animation.setTime(this.getTime(channelHandle));
    return animationHandle;
  }
  detachAnimation(channelId) {
    this.animations.delete(channelId);
  }
  update(engineTime) {
    if (this.playing) {
      if (this.lastEngineTime === -1) {
        this.lastEngineTime = engineTime;
      }
      this.setTime(this.time + (engineTime - this.lastEngineTime));
      this.lastEngineTime = engineTime;
    }
  }
  _setChannelTime(channel, time) {
    const offsetTime = time - channel.delay;
    const totalDuration = channel.duration * channel.repeat;
    if (offsetTime >= totalDuration) {
      channel.time = channel.duration * channel.rate;
    } else {
      channel.time = Math.max(0, offsetTime) % channel.duration;
      channel.time *= channel.rate;
    }
  }
};

// node_modules/@luma.gl/engine/dist/animation/key-frames.js
var KeyFrames = class {
  constructor(keyFrames) {
    __publicField(this, "startIndex", -1);
    __publicField(this, "endIndex", -1);
    __publicField(this, "factor", 0);
    __publicField(this, "times", []);
    __publicField(this, "values", []);
    __publicField(this, "_lastTime", -1);
    this.setKeyFrames(keyFrames);
    this.setTime(0);
  }
  setKeyFrames(keyFrames) {
    const numKeys = keyFrames.length;
    this.times.length = numKeys;
    this.values.length = numKeys;
    for (let i2 = 0; i2 < numKeys; ++i2) {
      this.times[i2] = keyFrames[i2][0];
      this.values[i2] = keyFrames[i2][1];
    }
    this._calculateKeys(this._lastTime);
  }
  setTime(time) {
    time = Math.max(0, time);
    if (time !== this._lastTime) {
      this._calculateKeys(time);
      this._lastTime = time;
    }
  }
  getStartTime() {
    return this.times[this.startIndex];
  }
  getEndTime() {
    return this.times[this.endIndex];
  }
  getStartData() {
    return this.values[this.startIndex];
  }
  getEndData() {
    return this.values[this.endIndex];
  }
  _calculateKeys(time) {
    let index = 0;
    const numKeys = this.times.length;
    for (index = 0; index < numKeys - 2; ++index) {
      if (this.times[index + 1] > time) {
        break;
      }
    }
    this.startIndex = index;
    this.endIndex = index + 1;
    const startTime = this.times[this.startIndex];
    const endTime = this.times[this.endIndex];
    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);
  }
};

// node_modules/@luma.gl/engine/dist/animation-loop/animation-loop-template.js
var AnimationLoopTemplate = class {
  constructor(animationProps) {
  }
  async onInitialize(animationProps) {
    return null;
  }
};

// node_modules/@luma.gl/core/dist/utils/stats-manager.js
var StatsManager = class {
  constructor() {
    __publicField(this, "stats", /* @__PURE__ */ new Map());
  }
  getStats(name2) {
    return this.get(name2);
  }
  get(name2) {
    if (!this.stats.has(name2)) {
      this.stats.set(name2, new Stats({ id: name2 }));
    }
    return this.stats.get(name2);
  }
};
var lumaStats = new StatsManager();

// node_modules/@luma.gl/core/dist/utils/log.js
var log = new Log({ id: "luma.gl" });

// node_modules/@luma.gl/core/dist/utils/uid.js
var uidCounters = {};
function uid(id = "id") {
  uidCounters[id] = uidCounters[id] || 1;
  const count = uidCounters[id]++;
  return `${id}-${count}`;
}

// node_modules/@luma.gl/core/dist/adapter/resources/resource.js
var Resource = class {
  /**
   * Create a new Resource. Called from Subclass
   */
  constructor(device, props, defaultProps) {
    /** props.id, for debugging. */
    __publicField(this, "id");
    __publicField(this, "props");
    __publicField(this, "userData", {});
    __publicField(this, "_device");
    /** Whether this resource has been destroyed */
    __publicField(this, "destroyed", false);
    /** For resources that allocate GPU memory */
    __publicField(this, "allocatedBytes", 0);
    /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created "sub" resources. */
    __publicField(this, "_attachedResources", /* @__PURE__ */ new Set());
    if (!device) {
      throw new Error("no device");
    }
    this._device = device;
    this.props = selectivelyMerge(props, defaultProps);
    const id = this.props.id !== "undefined" ? this.props.id : uid(this[Symbol.toStringTag]);
    this.props.id = id;
    this.id = id;
    this.userData = this.props.userData || {};
    this.addStats();
  }
  toString() {
    return `${this[Symbol.toStringTag] || this.constructor.name}:"${this.id}"`;
  }
  /**
   * destroy can be called on any resource to release it before it is garbage collected.
   */
  destroy() {
    this.destroyResource();
  }
  /** @deprecated Use destroy() */
  delete() {
    this.destroy();
    return this;
  }
  /**
   * Combines a map of user props and default props, only including props from defaultProps
   * @returns returns a map of overridden default props
   */
  getProps() {
    return this.props;
  }
  // ATTACHED RESOURCES
  /**
   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed
   * Called automatically when sub resources are auto created but can be called by application
   */
  attachResource(resource) {
    this._attachedResources.add(resource);
  }
  /**
   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.
   */
  detachResource(resource) {
    this._attachedResources.delete(resource);
  }
  /**
   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.
   */
  destroyAttachedResource(resource) {
    if (this._attachedResources.delete(resource)) {
      resource.destroy();
    }
  }
  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */
  destroyAttachedResources() {
    for (const resource of Object.values(this._attachedResources)) {
      resource.destroy();
    }
    this._attachedResources = /* @__PURE__ */ new Set();
  }
  // PROTECTED METHODS
  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */
  destroyResource() {
    this.destroyAttachedResources();
    this.removeStats();
    this.destroyed = true;
  }
  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */
  removeStats() {
    const stats = this._device.statsManager.getStats("Resource Counts");
    const name2 = this[Symbol.toStringTag];
    stats.get(`${name2}s Active`).decrementCount();
  }
  /** Called by subclass to track memory allocations */
  trackAllocatedMemory(bytes, name2 = this[Symbol.toStringTag]) {
    const stats = this._device.statsManager.getStats("Resource Counts");
    stats.get("GPU Memory").addCount(bytes);
    stats.get(`${name2} Memory`).addCount(bytes);
    this.allocatedBytes = bytes;
  }
  /** Called by subclass to track memory deallocations */
  trackDeallocatedMemory(name2 = this[Symbol.toStringTag]) {
    const stats = this._device.statsManager.getStats("Resource Counts");
    stats.get("GPU Memory").subtractCount(this.allocatedBytes);
    stats.get(`${name2} Memory`).subtractCount(this.allocatedBytes);
    this.allocatedBytes = 0;
  }
  /** Called by resource constructor to track object creation */
  addStats() {
    const stats = this._device.statsManager.getStats("Resource Counts");
    const name2 = this[Symbol.toStringTag];
    stats.get("Resources Created").incrementCount();
    stats.get(`${name2}s Created`).incrementCount();
    stats.get(`${name2}s Active`).incrementCount();
  }
};
/** Default properties for resource */
__publicField(Resource, "defaultProps", {
  id: "undefined",
  handle: void 0,
  userData: void 0
});
function selectivelyMerge(props, defaultProps) {
  const mergedProps = { ...defaultProps };
  for (const key in props) {
    if (props[key] !== void 0) {
      mergedProps[key] = props[key];
    }
  }
  return mergedProps;
}

// node_modules/@luma.gl/core/dist/adapter/resources/buffer.js
var _Buffer = class _Buffer extends Resource {
  constructor(device, props) {
    const deducedProps = { ...props };
    if ((props.usage || 0) & _Buffer.INDEX && !props.indexType) {
      if (props.data instanceof Uint32Array) {
        deducedProps.indexType = "uint32";
      } else if (props.data instanceof Uint16Array) {
        deducedProps.indexType = "uint16";
      }
    }
    delete deducedProps.data;
    super(device, deducedProps, _Buffer.defaultProps);
    /** The usage with which this buffer was created */
    __publicField(this, "usage");
    /** For index buffers, whether indices are 16 or 32 bit */
    __publicField(this, "indexType");
    /** "Time" of last update, can be used to check if redraw is needed */
    __publicField(this, "updateTimestamp");
    /** A partial CPU-side copy of the data in this buffer, for debugging purposes */
    __publicField(this, "debugData", new ArrayBuffer(0));
    this.usage = deducedProps.usage || 0;
    this.indexType = deducedProps.indexType;
    this.updateTimestamp = device.incrementTimestamp();
  }
  get [Symbol.toStringTag]() {
    return "Buffer";
  }
  /**
   * Create a copy of this Buffer with new byteLength, with same props but of the specified size.
   * @note Does not copy contents of the cloned Buffer.
   */
  clone(props) {
    return this.device.createBuffer({ ...this.props, ...props });
  }
  /** Read data synchronously. @note WebGL2 only */
  readSyncWebGL(byteOffset, byteLength) {
    throw new Error("not implemented");
  }
  /** This doesn't handle partial non-zero offset updates correctly */
  _setDebugData(data, byteOffset, byteLength) {
    const arrayBuffer2 = ArrayBuffer.isView(data) ? data.buffer : data;
    const debugDataLength = Math.min(data ? data.byteLength : byteLength, _Buffer.DEBUG_DATA_MAX_LENGTH);
    if (arrayBuffer2 === null) {
      this.debugData = new ArrayBuffer(debugDataLength);
    } else if (byteOffset === 0 && byteLength === arrayBuffer2.byteLength) {
      this.debugData = arrayBuffer2.slice(0, debugDataLength);
    } else {
      this.debugData = arrayBuffer2.slice(byteOffset, byteOffset + debugDataLength);
    }
  }
};
__publicField(_Buffer, "defaultProps", {
  ...Resource.defaultProps,
  usage: 0,
  // Buffer.COPY_DST | Buffer.COPY_SRC
  byteLength: 0,
  byteOffset: 0,
  data: null,
  indexType: "uint16",
  mappedAtCreation: false
});
// Usage Flags
__publicField(_Buffer, "MAP_READ", 1);
__publicField(_Buffer, "MAP_WRITE", 2);
__publicField(_Buffer, "COPY_SRC", 4);
__publicField(_Buffer, "COPY_DST", 8);
/** Index buffer */
__publicField(_Buffer, "INDEX", 16);
/** Vertex buffer */
__publicField(_Buffer, "VERTEX", 32);
/** Uniform buffer */
__publicField(_Buffer, "UNIFORM", 64);
/** Storage buffer */
__publicField(_Buffer, "STORAGE", 128);
__publicField(_Buffer, "INDIRECT", 256);
__publicField(_Buffer, "QUERY_RESOLVE", 512);
// PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
/** Max amount of debug data saved. Two vec4's */
__publicField(_Buffer, "DEBUG_DATA_MAX_LENGTH", 32);
var Buffer = _Buffer;

// node_modules/@luma.gl/core/dist/gpu-type-utils/decode-data-type.js
function decodeVertexType(type) {
  const dataType = TYPE_MAP[type];
  const bytes = getDataTypeBytes(dataType);
  const normalized = type.includes("norm");
  const integer = !normalized && !type.startsWith("float");
  const signed = type.startsWith("s");
  return {
    dataType: TYPE_MAP[type],
    byteLength: bytes,
    integer,
    signed,
    normalized
  };
}
function getDataTypeBytes(type) {
  const bytes = TYPE_SIZES[type];
  return bytes;
}
var TYPE_MAP = {
  uint8: "uint8",
  sint8: "sint8",
  unorm8: "uint8",
  snorm8: "sint8",
  uint16: "uint16",
  sint16: "sint16",
  unorm16: "uint16",
  snorm16: "sint16",
  float16: "float16",
  float32: "float32",
  uint32: "uint32",
  sint32: "sint32"
};
var TYPE_SIZES = {
  uint8: 1,
  sint8: 1,
  uint16: 2,
  sint16: 2,
  float16: 2,
  float32: 4,
  uint32: 4,
  sint32: 4
};

// node_modules/@luma.gl/core/dist/gpu-type-utils/texture-format-table.js
var texture_compression_bc = "texture-compression-bc";
var texture_compression_astc = "texture-compression-astc";
var texture_compression_etc2 = "texture-compression-etc2";
var texture_compression_etc1_webgl = "texture-compression-etc1-webgl";
var texture_compression_pvrtc_webgl = "texture-compression-pvrtc-webgl";
var texture_compression_atc_webgl = "texture-compression-atc-webgl";
var float32_renderable = "float32-renderable-webgl";
var float16_renderable = "float16-renderable-webgl";
var rgb9e5ufloat_renderable = "rgb9e5ufloat-renderable-webgl";
var snorm8_renderable = "snorm8-renderable-webgl";
var norm16_renderable = "norm16-renderable-webgl";
var snorm16_renderable = "snorm16-renderable-webgl";
var float32_filterable = "float32-filterable";
var float16_filterable = "float16-filterable-webgl";
function getTextureFormatDefinition(format) {
  const info = TEXTURE_FORMAT_TABLE[format];
  if (!info) {
    throw new Error(`Unsupported texture format ${format}`);
  }
  return info;
}
var TEXTURE_FORMAT_TABLE = {
  // 8-bit formats
  "r8unorm": {},
  "r8snorm": { render: snorm8_renderable },
  "r8uint": {},
  "r8sint": {},
  // 16-bit formats
  "rg8unorm": {},
  "rg8snorm": { render: snorm8_renderable },
  "rg8uint": {},
  "rg8sint": {},
  "r16uint": {},
  "r16sint": {},
  "r16float": { render: float16_renderable, filter: "float16-filterable-webgl" },
  "r16unorm-webgl": { f: norm16_renderable },
  "r16snorm-webgl": { f: snorm16_renderable },
  // Packed 16-bit formats
  "rgba4unorm-webgl": { channels: "rgba", bitsPerChannel: [4, 4, 4, 4], packed: true },
  "rgb565unorm-webgl": { channels: "rgb", bitsPerChannel: [5, 6, 5, 0], packed: true },
  "rgb5a1unorm-webgl": { channels: "rgba", bitsPerChannel: [5, 5, 5, 1], packed: true },
  // 24-bit formats
  "rgb8unorm-webgl": {},
  "rgb8snorm-webgl": {},
  // 32-bit formats  
  "rgba8unorm": {},
  "rgba8unorm-srgb": {},
  "rgba8snorm": { render: snorm8_renderable },
  "rgba8uint": {},
  "rgba8sint": {},
  // 32-bit, reverse colors, webgpu only
  "bgra8unorm": {},
  "bgra8unorm-srgb": {},
  "rg16uint": {},
  "rg16sint": {},
  "rg16float": { render: float16_renderable, filter: float16_filterable },
  "rg16unorm-webgl": { render: norm16_renderable },
  "rg16snorm-webgl": { render: snorm16_renderable },
  "r32uint": {},
  "r32sint": {},
  "r32float": { render: float32_renderable, filter: float32_filterable },
  // Packed 32 bit formats
  "rgb9e5ufloat": { channels: "rgb", packed: true, render: rgb9e5ufloat_renderable },
  // , filter: true},
  "rg11b10ufloat": { channels: "rgb", bitsPerChannel: [11, 11, 10, 0], packed: true, p: 1, render: float32_renderable },
  "rgb10a2unorm": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1 },
  "rgb10a2uint-webgl": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1, wgpu: false },
  // 48-bit formats
  "rgb16unorm-webgl": { f: norm16_renderable },
  // rgb not renderable
  "rgb16snorm-webgl": { f: norm16_renderable },
  // rgb not renderable
  // 64-bit formats
  "rg32uint": {},
  "rg32sint": {},
  "rg32float": { render: false, filter: float32_filterable },
  "rgba16uint": {},
  "rgba16sint": {},
  "rgba16float": { render: float16_renderable, filter: float16_filterable },
  "rgba16unorm-webgl": { render: norm16_renderable },
  "rgba16snorm-webgl": { render: snorm16_renderable },
  // 96-bit formats (deprecated!)
  "rgb32float-webgl": { render: float32_renderable, filter: float32_filterable },
  // 128-bit formats
  "rgba32uint": {},
  "rgba32sint": {},
  "rgba32float": { render: float32_renderable, filter: float32_filterable },
  // Depth/stencil
  // Depth and stencil formats
  stencil8: { attachment: "stencil", bitsPerChannel: [8, 0, 0, 0], dataType: "uint8" },
  "depth16unorm": { attachment: "depth", bitsPerChannel: [16, 0, 0, 0], dataType: "uint16" },
  "depth24plus": { attachment: "depth", bitsPerChannel: [24, 0, 0, 0], dataType: "uint32" },
  "depth32float": { attachment: "depth", bitsPerChannel: [32, 0, 0, 0], dataType: "float32" },
  // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
  "depth24plus-stencil8": { attachment: "depth-stencil", bitsPerChannel: [24, 8, 0, 0], packed: true },
  // "depth32float-stencil8" feature
  "depth32float-stencil8": { attachment: "depth-stencil", bitsPerChannel: [32, 8, 0, 0], packed: true },
  // BC compressed formats: check device.features.has("texture-compression-bc");
  "bc1-rgb-unorm-webgl": { f: texture_compression_bc },
  "bc1-rgb-unorm-srgb-webgl": { f: texture_compression_bc },
  "bc1-rgba-unorm": { f: texture_compression_bc },
  "bc1-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc2-rgba-unorm": { f: texture_compression_bc },
  "bc2-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc3-rgba-unorm": { f: texture_compression_bc },
  "bc3-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc4-r-unorm": { f: texture_compression_bc },
  "bc4-r-snorm": { f: texture_compression_bc },
  "bc5-rg-unorm": { f: texture_compression_bc },
  "bc5-rg-snorm": { f: texture_compression_bc },
  "bc6h-rgb-ufloat": { f: texture_compression_bc },
  "bc6h-rgb-float": { f: texture_compression_bc },
  "bc7-rgba-unorm": { f: texture_compression_bc },
  "bc7-rgba-unorm-srgb": { f: texture_compression_bc },
  // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
  "etc2-rgb8unorm": { f: texture_compression_etc2 },
  "etc2-rgb8unorm-srgb": { f: texture_compression_etc2 },
  "etc2-rgb8a1unorm": { f: texture_compression_etc2 },
  "etc2-rgb8a1unorm-srgb": { f: texture_compression_etc2 },
  "etc2-rgba8unorm": { f: texture_compression_etc2 },
  "etc2-rgba8unorm-srgb": { f: texture_compression_etc2 },
  "eac-r11unorm": { f: texture_compression_etc2 },
  "eac-r11snorm": { f: texture_compression_etc2 },
  "eac-rg11unorm": { f: texture_compression_etc2 },
  "eac-rg11snorm": { f: texture_compression_etc2 },
  // X_ASTC compressed formats: device.features.has("texture-compression-astc")
  "astc-4x4-unorm": { f: texture_compression_astc },
  "astc-4x4-unorm-srgb": { f: texture_compression_astc },
  "astc-5x4-unorm": { f: texture_compression_astc },
  "astc-5x4-unorm-srgb": { f: texture_compression_astc },
  "astc-5x5-unorm": { f: texture_compression_astc },
  "astc-5x5-unorm-srgb": { f: texture_compression_astc },
  "astc-6x5-unorm": { f: texture_compression_astc },
  "astc-6x5-unorm-srgb": { f: texture_compression_astc },
  "astc-6x6-unorm": { f: texture_compression_astc },
  "astc-6x6-unorm-srgb": { f: texture_compression_astc },
  "astc-8x5-unorm": { f: texture_compression_astc },
  "astc-8x5-unorm-srgb": { f: texture_compression_astc },
  "astc-8x6-unorm": { f: texture_compression_astc },
  "astc-8x6-unorm-srgb": { f: texture_compression_astc },
  "astc-8x8-unorm": { f: texture_compression_astc },
  "astc-8x8-unorm-srgb": { f: texture_compression_astc },
  "astc-10x5-unorm": { f: texture_compression_astc },
  "astc-10x5-unorm-srgb": { f: texture_compression_astc },
  "astc-10x6-unorm": { f: texture_compression_astc },
  "astc-10x6-unorm-srgb": { f: texture_compression_astc },
  "astc-10x8-unorm": { f: texture_compression_astc },
  "astc-10x8-unorm-srgb": { f: texture_compression_astc },
  "astc-10x10-unorm": { f: texture_compression_astc },
  "astc-10x10-unorm-srgb": { f: texture_compression_astc },
  "astc-12x10-unorm": { f: texture_compression_astc },
  "astc-12x10-unorm-srgb": { f: texture_compression_astc },
  "astc-12x12-unorm": { f: texture_compression_astc },
  "astc-12x12-unorm-srgb": { f: texture_compression_astc },
  // WEBGL_compressed_texture_pvrtc
  "pvrtc-rgb4unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rgba4unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rbg2unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rgba2unorm-webgl": { f: texture_compression_pvrtc_webgl },
  // WEBGL_compressed_texture_etc1
  "etc1-rbg-unorm-webgl": { f: texture_compression_etc1_webgl },
  // WEBGL_compressed_texture_atc
  "atc-rgb-unorm-webgl": { f: texture_compression_atc_webgl },
  "atc-rgba-unorm-webgl": { f: texture_compression_atc_webgl },
  "atc-rgbai-unorm-webgl": { f: texture_compression_atc_webgl }
};

// node_modules/@luma.gl/core/dist/gpu-type-utils/decode-texture-format.js
var COMPRESSED_TEXTURE_FORMAT_PREFIXES = [
  "bc1",
  "bc2",
  "bc3",
  "bc4",
  "bc5",
  "bc6",
  "bc7",
  "etc1",
  "etc2",
  "eac",
  "atc",
  "astc",
  "pvrtc"
];
var RGB_FORMAT_REGEX = /^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;
function isTextureFormatCompressed(format) {
  return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some((prefix) => format.startsWith(prefix));
}
function decodeTextureFormat(format) {
  let formatInfo = decodeTextureFormatUsingTable(format);
  if (isTextureFormatCompressed(format)) {
    formatInfo.channels = "rgb";
    formatInfo.components = 3;
    formatInfo.bytesPerPixel = 1;
    formatInfo.srgb = false;
    formatInfo.compressed = true;
    const blockSize = getCompressedTextureBlockSize(format);
    if (blockSize) {
      formatInfo.blockWidth = blockSize.blockWidth;
      formatInfo.blockHeight = blockSize.blockHeight;
    }
  }
  const matches = RGB_FORMAT_REGEX.exec(format);
  if (matches) {
    const [, channels, length, type, srgb, suffix] = matches;
    const dataType = `${type}${length}`;
    const decodedType = decodeVertexType(dataType);
    const bits = decodedType.byteLength * 8;
    const components = channels.length;
    const bitsPerChannel = [
      bits,
      components >= 2 ? bits : 0,
      components >= 3 ? bits : 0,
      components >= 4 ? bits : 0
    ];
    formatInfo = {
      format,
      attachment: formatInfo.attachment,
      dataType: decodedType.dataType,
      components,
      channels,
      integer: decodedType.integer,
      signed: decodedType.signed,
      normalized: decodedType.normalized,
      bitsPerChannel,
      bytesPerPixel: decodedType.byteLength * channels.length,
      packed: formatInfo.packed,
      srgb: formatInfo.srgb
    };
    if (suffix === "-webgl") {
      formatInfo.webgl = true;
    }
    if (srgb === "-srgb") {
      formatInfo.srgb = true;
    }
  }
  if (format.endsWith("-webgl")) {
    formatInfo.webgl = true;
  }
  if (format.endsWith("-srgb")) {
    formatInfo.srgb = true;
  }
  return formatInfo;
}
function decodeTextureFormatUsingTable(format) {
  var _a;
  const info = getTextureFormatDefinition(format);
  const bytesPerPixel = info.bytesPerPixel || 1;
  const bitsPerChannel = info.bitsPerChannel || [8, 8, 8, 8];
  delete info.bitsPerChannel;
  delete info.bytesPerPixel;
  delete info.f;
  delete info.render;
  delete info.filter;
  delete info.blend;
  delete info.store;
  const formatInfo = {
    ...info,
    format,
    attachment: info.attachment || "color",
    channels: info.channels || "r",
    components: info.components || ((_a = info.channels) == null ? void 0 : _a.length) || 1,
    bytesPerPixel,
    bitsPerChannel,
    dataType: info.dataType || "uint8",
    srgb: info.srgb ?? false,
    packed: info.packed ?? false,
    webgl: info.webgl ?? false,
    integer: info.integer ?? false,
    signed: info.signed ?? false,
    normalized: info.normalized ?? false,
    compressed: info.compressed ?? false
  };
  return formatInfo;
}
function getCompressedTextureBlockSize(format) {
  const REGEX = /.*-(\d+)x(\d+)-.*/;
  const matches = REGEX.exec(format);
  if (matches) {
    const [, blockWidth, blockHeight] = matches;
    return { blockWidth: Number(blockWidth), blockHeight: Number(blockHeight) };
  }
  return null;
}

// node_modules/@luma.gl/core/dist/gpu-type-utils/texture-format-capabilities.js
function getTextureFormatCapabilities(format) {
  const info = getTextureFormatDefinition(format);
  const formatCapabilities = {
    format,
    create: info.f ?? true,
    render: info.render ?? true,
    filter: info.filter ?? true,
    blend: info.blend ?? true,
    store: info.store ?? true
  };
  const formatInfo = decodeTextureFormat(format);
  const isDepthStencil = format.startsWith("depth") || format.startsWith("stencil");
  const isSigned = formatInfo == null ? void 0 : formatInfo.signed;
  const isInteger = formatInfo == null ? void 0 : formatInfo.integer;
  const isWebGLSpecific = formatInfo == null ? void 0 : formatInfo.webgl;
  formatCapabilities.render && (formatCapabilities.render = !isSigned);
  formatCapabilities.filter && (formatCapabilities.filter = !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific);
  return formatCapabilities;
}

// node_modules/@luma.gl/core/dist/adapter/device.js
var DeviceLimits = class {
};
var DeviceFeatures = class {
  constructor(features = [], disabledFeatures) {
    __publicField(this, "features");
    __publicField(this, "disabledFeatures");
    this.features = new Set(features);
    this.disabledFeatures = disabledFeatures || {};
  }
  *[Symbol.iterator]() {
    yield* this.features;
  }
  has(feature) {
    var _a;
    return !((_a = this.disabledFeatures) == null ? void 0 : _a[feature]) && this.features.has(feature);
  }
};
var _Device = class _Device {
  constructor(props) {
    /** id of this device, primarily for debugging */
    __publicField(this, "id");
    /** A copy of the device props  */
    __publicField(this, "props");
    /** Available for the application to store data on the device */
    __publicField(this, "userData", {});
    /** stats */
    __publicField(this, "statsManager", lumaStats);
    /** An abstract timestamp used for change tracking */
    __publicField(this, "timestamp", 0);
    /** True if this device has been reused during device creation (app has multiple references) */
    __publicField(this, "_reused", false);
    /** Used by other luma.gl modules to store data on the device */
    __publicField(this, "_lumaData", {});
    this.props = { ..._Device.defaultProps, ...props };
    this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());
  }
  get [Symbol.toStringTag]() {
    return "Device";
  }
  /** Determines what operations are supported on a texture format, checking against supported device features */
  getTextureFormatCapabilities(format) {
    const genericCapabilities = getTextureFormatCapabilities(format);
    const checkFeature = (featureOrBoolean) => (typeof featureOrBoolean === "string" ? this.features.has(featureOrBoolean) : featureOrBoolean) ?? true;
    const supported = checkFeature(genericCapabilities.create);
    const deviceCapabilities = {
      format,
      create: supported,
      render: supported && checkFeature(genericCapabilities.render),
      filter: supported && checkFeature(genericCapabilities.filter),
      blend: supported && checkFeature(genericCapabilities.blend),
      store: supported && checkFeature(genericCapabilities.store)
    };
    return this._getDeviceSpecificTextureFormatCapabilities(deviceCapabilities);
  }
  /** Check if device supports a specific texture format (creation and `nearest` sampling) */
  isTextureFormatSupported(format, capabilities) {
    return this.getTextureFormatCapabilities(format).create;
  }
  /** Check if linear filtering (sampler interpolation) is supported for a specific texture format */
  isTextureFormatFilterable(format) {
    return this.getTextureFormatCapabilities(format).filter;
  }
  /** Check if device supports rendering to a framebuffer color attachment of a specific texture format */
  isTextureFormatRenderable(format) {
    return this.getTextureFormatCapabilities(format).render;
  }
  /** Check if a specific texture format is GPU compressed */
  isTextureFormatCompressed(format) {
    return isTextureFormatCompressed(format);
  }
  /**
   * Trigger device loss.
   * @returns `true` if context loss could actually be triggered.
   * @note primarily intended for testing how application reacts to device loss
   */
  loseDevice() {
    return false;
  }
  /** Report error (normally called for unhandled device errors) */
  reportError(error) {
    this.props.onError(error);
  }
  /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */
  getDefaultCanvasContext() {
    if (!this.canvasContext) {
      throw new Error("Device has no default CanvasContext. See props.createCanvasContext");
    }
    return this.canvasContext;
  }
  createCommandEncoder(props = {}) {
    throw new Error("not implemented");
  }
  /** A monotonic counter for tracking buffer and texture updates */
  incrementTimestamp() {
    return this.timestamp++;
  }
  // Error Handling
  /** Report unhandled device errors */
  onError(error) {
    this.props.onError(error);
  }
  // DEPRECATED METHODS
  /** @deprecated Use getDefaultCanvasContext() */
  getCanvasContext() {
    return this.getDefaultCanvasContext();
  }
  // WebGL specific HACKS - enables app to remove webgl import
  // Use until we have a better way to handle these
  /** @deprecated - will be removed - should use command encoder */
  readPixelsToArrayWebGL(source3, options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use command encoder */
  readPixelsToBufferWebGL(source3, options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  setParametersWebGL(parameters) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  getParametersWebGL(parameters) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  withParametersWebGL(parameters, func) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use clear arguments in RenderPass */
  clearWebGL(options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use for debugging only */
  resetWebGL() {
    throw new Error("not implemented");
  }
  // IMPLEMENTATION
  /** Helper to get the canvas context props */
  static _getCanvasContextProps(props) {
    return props.createCanvasContext === true ? {} : props.createCanvasContext;
  }
  /** Subclasses use this to support .createBuffer() overloads */
  _normalizeBufferProps(props) {
    if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
      props = { data: props };
    }
    const newProps = { ...props };
    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {
      if (props.data instanceof Uint32Array) {
        newProps.indexType = "uint32";
      } else if (props.data instanceof Uint16Array) {
        newProps.indexType = "uint16";
      } else {
        log.warn("indices buffer content must be of integer type")();
      }
    }
    return newProps;
  }
};
__publicField(_Device, "defaultProps", {
  id: null,
  powerPreference: "high-performance",
  failIfMajorPerformanceCaveat: false,
  createCanvasContext: void 0,
  // Callbacks
  onError: (error) => log.error(error.message)(),
  // Experimental
  _reuseDevices: false,
  _requestMaxLimits: true,
  _factoryDestroyPolicy: "unused",
  // TODO - Change these after confirming things work as expected
  _initializeFeatures: true,
  _disabledFeatures: {
    "compilation-status-async-webgl": true
  },
  _resourceDefaults: {},
  // WebGL specific
  webgl: {},
  debug: log.get("debug") || void 0,
  debugShaders: log.get("debug-shaders") || void 0,
  debugFramebuffers: Boolean(log.get("debug-framebuffers")),
  debugWebGL: Boolean(log.get("debug-webgl")),
  debugSpectorJS: void 0,
  // Note: log setting is queried by the spector.js code
  debugSpectorJSUrl: void 0,
  // INTERNAL
  _handle: void 0
});
var Device = _Device;

// node_modules/@luma.gl/core/dist/adapter/luma.js
var isPage = isBrowser() && typeof document !== "undefined";
var isPageLoaded = () => isPage && document.readyState === "complete";
var STARTUP_MESSAGE = "set luma.log.level=1 (or higher) to trace rendering";
var ERROR_MESSAGE = "No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.";
var _Luma = class _Luma {
  constructor() {
    /** Global stats for all devices */
    __publicField(this, "stats", lumaStats);
    /**
     * Global log
     *
     * Assign luma.log.level in console to control logging: \
     * 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
     * luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;
     */
    __publicField(this, "log", log);
    /** Version of luma.gl */
    __publicField(
      this,
      "VERSION",
      // Version detection using build plugin
      // @ts-expect-error no-undef
      true ? "9.1.9" : "running from source"
    );
    __publicField(this, "spector");
    __publicField(this, "preregisteredAdapters", /* @__PURE__ */ new Map());
    if (globalThis.luma) {
      if (globalThis.luma.VERSION !== this.VERSION) {
        log.error(`Found luma.gl ${globalThis.luma.VERSION} while initialzing ${this.VERSION}`)();
        log.error(`'yarn why @luma.gl/core' can help identify the source of the conflict`)();
        throw new Error(`luma.gl - multiple versions detected: see console log`);
      }
      log.error("This version of luma.gl has already been initialized")();
    }
    log.log(1, `${this.VERSION} - ${STARTUP_MESSAGE}`)();
    globalThis.luma = this;
  }
  registerAdapters(adapters) {
    for (const deviceClass of adapters) {
      this.preregisteredAdapters.set(deviceClass.type, deviceClass);
    }
  }
  /** Get type strings for supported Devices */
  getSupportedAdapters(adapters = []) {
    const adapterMap = this.getAdapterMap(adapters);
    return Array.from(adapterMap).map(([, adapter]) => adapter).filter((adapter) => {
      var _a;
      return (_a = adapter.isSupported) == null ? void 0 : _a.call(adapter);
    }).map((adapter) => adapter.type);
  }
  /** Get type strings for best available Device */
  getBestAvailableAdapter(adapters = []) {
    var _a, _b, _c, _d;
    const adapterMap = this.getAdapterMap(adapters);
    if ((_b = (_a = adapterMap.get("webgpu")) == null ? void 0 : _a.isSupported) == null ? void 0 : _b.call(_a)) {
      return "webgpu";
    }
    if ((_d = (_c = adapterMap.get("webgl")) == null ? void 0 : _c.isSupported) == null ? void 0 : _d.call(_c)) {
      return "webgl";
    }
    return null;
  }
  setDefaultDeviceProps(props) {
    Object.assign(_Luma.defaultProps, props);
  }
  /** Creates a device. Asynchronously. */
  async createDevice(props = {}) {
    var _a;
    props = { ..._Luma.defaultProps, ...props };
    if (props.waitForPageLoad) {
      await _Luma.pageLoaded;
    }
    const adapterMap = this.getAdapterMap(props.adapters);
    let type = props.type || "";
    if (type === "best-available") {
      type = this.getBestAvailableAdapter(props.adapters) || type;
    }
    const adapters = this.getAdapterMap(props.adapters) || adapterMap;
    const adapter = adapters.get(type);
    const device = await ((_a = adapter == null ? void 0 : adapter.create) == null ? void 0 : _a.call(adapter, props));
    if (device) {
      return device;
    }
    throw new Error(ERROR_MESSAGE);
  }
  /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */
  async attachDevice(props) {
    var _a;
    const adapters = this.getAdapterMap(props.adapters);
    let type = "";
    if (props.handle instanceof WebGL2RenderingContext) {
      type = "webgl";
    }
    if (props.createCanvasContext) {
      await _Luma.pageLoaded;
    }
    if (props.handle === null) {
      type = "unknown";
    }
    const adapter = adapters.get(type);
    const device = await ((_a = adapter == null ? void 0 : adapter.attach) == null ? void 0 : _a.call(adapter, null));
    if (device) {
      return device;
    }
    throw new Error(ERROR_MESSAGE);
  }
  /**
   * Override `HTMLCanvasContext.getCanvas()` to always create WebGL2 contexts with additional WebGL1 compatibility.
   * Useful when attaching luma to a context from an external library does not support creating WebGL2 contexts.
   */
  enforceWebGL2(enforce = true, adapters = []) {
    var _a;
    const adapterMap = this.getAdapterMap(adapters);
    const webgl2Adapter = adapterMap.get("webgl");
    if (!webgl2Adapter) {
      log.warn("enforceWebGL2: webgl adapter not found")();
    }
    (_a = webgl2Adapter == null ? void 0 : webgl2Adapter.enforceWebGL2) == null ? void 0 : _a.call(webgl2Adapter, enforce);
  }
  /** Convert a list of adapters to a map */
  getAdapterMap(adapters = []) {
    const map = new Map(this.preregisteredAdapters);
    for (const adapter of adapters) {
      map.set(adapter.type, adapter);
    }
    return map;
  }
  // DEPRECATED
  /** @deprecated Use registerAdapters */
  registerDevices(deviceClasses) {
    log.warn("luma.registerDevices() is deprecated, use luma.registerAdapters() instead");
    for (const deviceClass of deviceClasses) {
      const adapter = deviceClass.adapter;
      if (adapter) {
        this.preregisteredAdapters.set(adapter.type, adapter);
      }
    }
  }
};
__publicField(_Luma, "defaultProps", {
  ...Device.defaultProps,
  type: "best-available",
  adapters: void 0,
  waitForPageLoad: true
});
/**
 * Page load promise
 * Get a 'lazy' promise that resolves when the DOM is loaded.
 * @note Since there may be limitations on number of `load` event listeners,
 * it is recommended avoid calling this function until actually needed.
 * I.e. don't call it until you know that you will be looking up a string in the DOM.
 */
__publicField(_Luma, "pageLoaded", getPageLoadPromise().then(() => {
  log.probe(2, "DOM is loaded")();
}));
var Luma = _Luma;
var luma = new Luma();
function getPageLoadPromise() {
  if (isPageLoaded() || typeof window === "undefined") {
    return Promise.resolve();
  }
  return new Promise((resolve) => {
    window.addEventListener("load", () => resolve());
  });
}

// node_modules/@luma.gl/core/dist/adapter/adapter.js
var Adapter = class {
};

// node_modules/@luma.gl/core/dist/adapter/canvas-context.js
var _CanvasContext = class _CanvasContext {
  constructor(props) {
    __publicField(this, "id");
    __publicField(this, "props");
    __publicField(this, "canvas");
    __publicField(this, "htmlCanvas");
    __publicField(this, "offscreenCanvas");
    __publicField(this, "type");
    __publicField(this, "width", 1);
    __publicField(this, "height", 1);
    __publicField(this, "resizeObserver");
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    __publicField(this, "_canvasSizeInfo", { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 });
    this.props = { ..._CanvasContext.defaultProps, ...props };
    props = this.props;
    if (!isBrowser()) {
      this.id = "node-canvas-context";
      this.type = "node";
      this.width = this.props.width;
      this.height = this.props.height;
      this.canvas = null;
      return;
    }
    if (!props.canvas) {
      const canvas2 = createCanvas(props);
      const container = getContainer((props == null ? void 0 : props.container) || null);
      container.insertBefore(canvas2, container.firstChild);
      this.canvas = canvas2;
      if (!(props == null ? void 0 : props.visible)) {
        this.canvas.style.visibility = "hidden";
      }
    } else if (typeof props.canvas === "string") {
      this.canvas = getCanvasFromDOM(props.canvas);
    } else {
      this.canvas = props.canvas;
    }
    if (this.canvas instanceof HTMLCanvasElement) {
      this.id = this.canvas.id;
      this.type = "html-canvas";
      this.htmlCanvas = this.canvas;
    } else {
      this.id = "offscreen-canvas";
      this.type = "offscreen-canvas";
      this.offscreenCanvas = this.canvas;
    }
    if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {
      this.resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          if (entry.target === this.canvas) {
            this.update();
          }
        }
      });
      this.resizeObserver.observe(this.canvas);
    }
  }
  toString() {
    return `${this[Symbol.toStringTag]}(${this.id})`;
  }
  /**
   * Returns the current DPR, if props.useDevicePixels is true
   * Device refers to physical
   */
  getDevicePixelRatio(useDevicePixels) {
    if (typeof OffscreenCanvas !== "undefined" && this.canvas instanceof OffscreenCanvas) {
      return 1;
    }
    useDevicePixels = useDevicePixels === void 0 ? this.props.useDevicePixels : useDevicePixels;
    if (!useDevicePixels || useDevicePixels <= 0) {
      return 1;
    }
    if (useDevicePixels === true) {
      const dpr = typeof window !== "undefined" && window.devicePixelRatio;
      return dpr || 1;
    }
    return useDevicePixels;
  }
  /**
   * Returns the size of drawing buffer in device pixels.
   * @note This can be different from the 'CSS' size of a canvas, and also from the
   * canvas' internal drawing buffer size (.width, .height).
   * This is the size required to cover the canvas, adjusted for DPR
   */
  getPixelSize() {
    switch (this.type) {
      case "node":
        return [this.width, this.height];
      case "offscreen-canvas":
        return [this.canvas.width, this.canvas.height];
      case "html-canvas":
        const dpr = this.getDevicePixelRatio();
        const canvas2 = this.canvas;
        return canvas2.parentElement ? [canvas2.clientWidth * dpr, canvas2.clientHeight * dpr] : [this.canvas.width, this.canvas.height];
      default:
        throw new Error(this.type);
    }
  }
  getAspect() {
    const [width, height] = this.getPixelSize();
    return width / height;
  }
  /**
   * Returns multiplier need to convert CSS size to Device size
   */
  cssToDeviceRatio() {
    var _a;
    try {
      const [drawingBufferWidth] = this.getDrawingBufferSize();
      const clientWidth = this._canvasSizeInfo.clientWidth || ((_a = this.htmlCanvas) == null ? void 0 : _a.clientWidth);
      return clientWidth ? drawingBufferWidth / clientWidth : 1;
    } catch {
      return 1;
    }
  }
  /**
   * Maps CSS pixel position to device pixel position
   */
  cssToDevicePixels(cssPixel, yInvert = true) {
    const ratio = this.cssToDeviceRatio();
    const [width, height] = this.getDrawingBufferSize();
    return scalePixels(cssPixel, ratio, width, height, yInvert);
  }
  /**
   * Use devicePixelRatio to set canvas width and height
   * @note this is a raw port of luma.gl v8 code. Might be worth a review
   */
  setDevicePixelRatio(devicePixelRatio, options = {}) {
    if (!this.htmlCanvas) {
      return;
    }
    let clientWidth = "width" in options ? options.width : this.htmlCanvas.clientWidth;
    let clientHeight = "height" in options ? options.height : this.htmlCanvas.clientHeight;
    if (!clientWidth || !clientHeight) {
      log.log(1, "Canvas clientWidth/clientHeight is 0")();
      devicePixelRatio = 1;
      clientWidth = this.htmlCanvas.width || 1;
      clientHeight = this.htmlCanvas.height || 1;
    }
    const cachedSize = this._canvasSizeInfo;
    if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {
      let clampedPixelRatio = devicePixelRatio;
      const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
      const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
      this.htmlCanvas.width = canvasWidth;
      this.htmlCanvas.height = canvasHeight;
      const gl = this.device.gl;
      if (gl) {
        const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();
        if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {
          clampedPixelRatio = Math.min(drawingBufferWidth / clientWidth, drawingBufferHeight / clientHeight);
          this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);
          this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);
          log.warn("Device pixel ratio clamped")();
        }
        this._canvasSizeInfo.clientWidth = clientWidth;
        this._canvasSizeInfo.clientHeight = clientHeight;
        this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;
      }
    }
  }
  // PRIVATE
  /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */
  getDrawingBufferSize() {
    const gl = this.device.gl;
    if (!gl) {
      return this.getPixelSize();
    }
    return [gl.drawingBufferWidth, gl.drawingBufferHeight];
  }
  /**
   * Allows subclass constructor to override the canvas id for auto created canvases.
   * This can really help when debugging DOM in apps that create multiple devices
   */
  _setAutoCreatedCanvasId(id) {
    var _a;
    if (((_a = this.htmlCanvas) == null ? void 0 : _a.id) === "lumagl-auto-created-canvas") {
      this.htmlCanvas.id = id;
    }
  }
};
__publicField(_CanvasContext, "defaultProps", {
  canvas: null,
  width: 800,
  // width are height are only used by headless gl
  height: 600,
  useDevicePixels: true,
  autoResize: true,
  container: null,
  visible: true,
  alphaMode: "opaque",
  colorSpace: "srgb"
});
var CanvasContext = _CanvasContext;
function getContainer(container) {
  if (typeof container === "string") {
    const element = document.getElementById(container);
    if (!element) {
      throw new Error(`${container} is not an HTML element`);
    }
    return element;
  } else if (container) {
    return container;
  }
  return document.body;
}
function getCanvasFromDOM(canvasId) {
  const canvas2 = document.getElementById(canvasId);
  if (!(canvas2 instanceof HTMLCanvasElement)) {
    throw new Error("Object is not a canvas element");
  }
  return canvas2;
}
function createCanvas(props) {
  const { width, height } = props;
  const targetCanvas = document.createElement("canvas");
  targetCanvas.id = uid("lumagl-auto-created-canvas");
  targetCanvas.width = width || 1;
  targetCanvas.height = height || 1;
  targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : "100%";
  targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : "100%";
  return targetCanvas;
}
function scalePixels(pixel, ratio, width, height, yInvert) {
  const point = pixel;
  const x2 = scaleX(point[0], ratio, width);
  let y2 = scaleY(point[1], ratio, height, yInvert);
  let t2 = scaleX(point[0] + 1, ratio, width);
  const xHigh = t2 === width - 1 ? t2 : t2 - 1;
  t2 = scaleY(point[1] + 1, ratio, height, yInvert);
  let yHigh;
  if (yInvert) {
    t2 = t2 === 0 ? t2 : t2 + 1;
    yHigh = y2;
    y2 = t2;
  } else {
    yHigh = t2 === height - 1 ? t2 : t2 - 1;
  }
  return {
    x: x2,
    y: y2,
    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.
    width: Math.max(xHigh - x2 + 1, 1),
    height: Math.max(yHigh - y2 + 1, 1)
  };
}
function scaleX(x2, ratio, width) {
  const r2 = Math.min(Math.round(x2 * ratio), width - 1);
  return r2;
}
function scaleY(y2, ratio, height, yInvert) {
  return yInvert ? Math.max(0, height - 1 - Math.round(y2 * ratio)) : Math.min(Math.round(y2 * ratio), height - 1);
}

// node_modules/@luma.gl/core/dist/adapter/resources/texture.js
var _Texture = class _Texture extends Resource {
  /** Do not use directly. Create with device.createTexture() */
  constructor(device, props) {
    props = _Texture.normalizeProps(device, props);
    super(device, props, _Texture.defaultProps);
    /** dimension of this texture */
    __publicField(this, "dimension");
    /** format of this texture */
    __publicField(this, "format");
    /** width in pixels of this texture */
    __publicField(this, "width");
    /** height in pixels of this texture */
    __publicField(this, "height");
    /** depth of this texture */
    __publicField(this, "depth");
    /** mip levels in this texture */
    __publicField(this, "mipLevels");
    /** "Time" of last update. Monotonically increasing timestamp. TODO move to AsyncTexture? */
    __publicField(this, "updateTimestamp");
    this.dimension = this.props.dimension;
    this.format = this.props.format;
    this.width = this.props.width;
    this.height = this.props.height;
    this.depth = this.props.depth;
    if (this.props.width === void 0 || this.props.height === void 0) {
      const size = _Texture.getTextureDataSize(this.props.data);
      this.width = (size == null ? void 0 : size.width) || 1;
      this.height = (size == null ? void 0 : size.height) || 1;
    }
    if (this.props.mipmaps && this.props.mipLevels === void 0) {
      this.props.mipLevels = "pyramid";
    }
    this.mipLevels = this.props.mipLevels === "pyramid" ? _Texture.getMipLevelCount(this.width, this.height) : this.props.mipLevels || 1;
    this.updateTimestamp = device.incrementTimestamp();
  }
  get [Symbol.toStringTag]() {
    return "Texture";
  }
  toString() {
    return `Texture(${this.id},${this.format},${this.width}x${this.height})`;
  }
  /**
   * Create a new texture with the same parameters and optionally, a different size
   * @note Textures are immutable and cannot be resized after creation, but we can create a similar texture with the same parameters but a new size.
   * @note Does not copy contents of the texture
   */
  clone(size) {
    return this.device.createTexture({ ...this.props, ...size });
  }
  /** Check if data is an external image */
  static isExternalImage(data) {
    return typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement || typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement || typeof VideoFrame !== "undefined" && data instanceof VideoFrame || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas;
  }
  /** Determine size (width and height) of provided image data */
  static getExternalImageSize(data) {
    if (typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas) {
      return { width: data.width, height: data.height };
    }
    if (typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement) {
      return { width: data.naturalWidth, height: data.naturalHeight };
    }
    if (typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement) {
      return { width: data.videoWidth, height: data.videoHeight };
    }
    if (typeof VideoFrame !== "undefined" && data instanceof VideoFrame) {
      return { width: data.displayWidth, height: data.displayHeight };
    }
    throw new Error("Unknown image type");
  }
  /** Check if texture data is a typed array */
  static isTextureLevelData(data) {
    const typedArray = data == null ? void 0 : data.data;
    return ArrayBuffer.isView(typedArray);
  }
  /** Get the size of the texture described by the provided TextureData */
  static getTextureDataSize(data) {
    if (!data) {
      return null;
    }
    if (ArrayBuffer.isView(data)) {
      return null;
    }
    if (Array.isArray(data)) {
      return _Texture.getTextureDataSize(data[0]);
    }
    if (_Texture.isExternalImage(data)) {
      return _Texture.getExternalImageSize(data);
    }
    if (data && typeof data === "object" && data.constructor === Object) {
      const textureDataArray = Object.values(data);
      const untypedData = textureDataArray[0];
      return { width: untypedData.width, height: untypedData.height };
    }
    throw new Error("texture size deduction failed");
  }
  /**
   * Normalize TextureData to an array of TextureLevelData / ExternalImages
   * @param data
   * @param options
   * @returns array of TextureLevelData / ExternalImages
   */
  static normalizeTextureData(data, options) {
    let lodArray;
    if (ArrayBuffer.isView(data)) {
      lodArray = [
        {
          // ts-expect-error does data really need to be Uint8ClampedArray?
          data,
          width: options.width,
          height: options.height
          // depth: options.depth
        }
      ];
    } else if (!Array.isArray(data)) {
      lodArray = [data];
    } else {
      lodArray = data;
    }
    return lodArray;
  }
  /** Calculate the number of mip levels for a texture of width and height */
  static getMipLevelCount(width, height) {
    return Math.floor(Math.log2(Math.max(width, height))) + 1;
  }
  /** Convert luma.gl cubemap face constants to depth index */
  static getCubeFaceDepth(face) {
    switch (face) {
      case "+X":
        return 0;
      case "-X":
        return 1;
      case "+Y":
        return 2;
      case "-Y":
        return 3;
      case "+Z":
        return 4;
      case "-Z":
        return 5;
      default:
        throw new Error(face);
    }
  }
  /** Ensure we have integer coordinates */
  static normalizeProps(device, props) {
    var _a, _b;
    const newProps = { ...props };
    const overriddenDefaultProps = ((_b = (_a = device == null ? void 0 : device.props) == null ? void 0 : _a._resourceDefaults) == null ? void 0 : _b.texture) || {};
    Object.assign(newProps, overriddenDefaultProps);
    const { width, height } = newProps;
    if (typeof width === "number") {
      newProps.width = Math.max(1, Math.ceil(width));
    }
    if (typeof height === "number") {
      newProps.height = Math.max(1, Math.ceil(height));
    }
    return newProps;
  }
};
__publicField(_Texture, "COPY_SRC", 1);
__publicField(_Texture, "COPY_DST", 2);
__publicField(_Texture, "TEXTURE", 4);
__publicField(_Texture, "STORAGE", 8);
__publicField(_Texture, "RENDER_ATTACHMENT", 16);
__publicField(_Texture, "CubeFaces", ["+X", "-X", "+Y", "-Y", "+Z", "-Z"]);
__publicField(_Texture, "defaultProps", {
  ...Resource.defaultProps,
  data: null,
  dimension: "2d",
  format: "rgba8unorm",
  width: void 0,
  height: void 0,
  depth: 1,
  mipmaps: false,
  compressed: false,
  usage: 0,
  mipLevels: void 0,
  samples: void 0,
  sampler: {},
  view: void 0,
  flipY: void 0
});
/** Default options */
__publicField(_Texture, "defaultCopyExternalImageOptions", {
  image: void 0,
  sourceX: 0,
  sourceY: 0,
  width: void 0,
  height: void 0,
  depth: 1,
  mipLevel: 0,
  x: 0,
  y: 0,
  z: 0,
  aspect: "all",
  colorSpace: "srgb",
  premultipliedAlpha: false,
  flipY: false
});
var Texture = _Texture;

// node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js
var _TextureView = class _TextureView extends Resource {
  get [Symbol.toStringTag]() {
    return "TextureView";
  }
  /** Should not be constructed directly. Use `texture.createView(props)` */
  constructor(device, props) {
    super(device, props, _TextureView.defaultProps);
  }
};
__publicField(_TextureView, "defaultProps", {
  ...Resource.defaultProps,
  format: void 0,
  dimension: void 0,
  aspect: "all",
  baseMipLevel: 0,
  mipLevelCount: void 0,
  baseArrayLayer: 0,
  arrayLayerCount: void 0
});
var TextureView = _TextureView;

// node_modules/@luma.gl/core/dist/adapter/resources/external-texture.js
var _ExternalTexture = class _ExternalTexture extends Resource {
  get [Symbol.toStringTag]() {
    return "ExternalTexture";
  }
  constructor(device, props) {
    super(device, props, _ExternalTexture.defaultProps);
  }
};
__publicField(_ExternalTexture, "defaultProps", {
  ...Resource.defaultProps,
  source: void 0,
  colorSpace: "srgb"
});
var ExternalTexture = _ExternalTexture;

// node_modules/@luma.gl/core/dist/adapter-utils/format-compiler-log.js
function formatCompilerLog(shaderLog, source3, options) {
  let formattedLog = "";
  const lines = source3.split(/\r?\n/);
  const log2 = shaderLog.slice().sort((a2, b2) => a2.lineNum - b2.lineNum);
  switch ((options == null ? void 0 : options.showSourceCode) || "no") {
    case "all":
      let currentMessage = 0;
      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {
        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);
        while (log2.length > currentMessage && log2[currentMessage].lineNum === lineNum) {
          const message = log2[currentMessage++];
          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
            ...options,
            inlineSource: false
          });
        }
      }
      return formattedLog;
    case "issues":
    case "no":
      for (const message of shaderLog) {
        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
          inlineSource: (options == null ? void 0 : options.showSourceCode) !== "no"
        });
      }
      return formattedLog;
  }
}
function formatCompilerMessage(message, lines, lineNum, options) {
  if (options == null ? void 0 : options.inlineSource) {
    const numberedLines = getNumberedLines(lines, lineNum);
    const positionIndicator = message.linePos > 0 ? `${" ".repeat(message.linePos + 5)}^^^
` : "";
    return `
${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}

`;
  }
  const color = message.type === "error" ? "red" : "#8B4000";
  return (options == null ? void 0 : options.html) ? `<div class='luma-compiler-log-error' style="color:${color};"><b> ${message.type.toUpperCase()}: ${message.message}</b></div>` : `${message.type.toUpperCase()}: ${message.message}`;
}
function getNumberedLines(lines, lineNum, options) {
  let numberedLines = "";
  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {
    const sourceLine = lines[lineIndex - 1];
    if (sourceLine !== void 0) {
      numberedLines += getNumberedLine(sourceLine, lineNum, options);
    }
  }
  return numberedLines;
}
function getNumberedLine(line, lineNum, options) {
  const escapedLine = (options == null ? void 0 : options.html) ? escapeHTML(line) : line;
  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${(options == null ? void 0 : options.html) ? "<br/>" : "\n"}`;
}
function padLeft(string, paddedLength) {
  let result = "";
  for (let i2 = string.length; i2 < paddedLength; ++i2) {
    result += " ";
  }
  return result + string;
}
function escapeHTML(unsafe) {
  return unsafe.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;").replaceAll("'", "&#039;");
}

// node_modules/@luma.gl/core/dist/adapter/resources/shader.js
var _Shader = class _Shader extends Resource {
  /** Create a new Shader instance */
  constructor(device, props) {
    props = { ...props, debugShaders: props.debugShaders || device.props.debugShaders || "errors" };
    super(device, { id: getShaderIdFromProps(props), ...props }, _Shader.defaultProps);
    /** The stage of this shader */
    __publicField(this, "stage");
    /** The source code of this shader */
    __publicField(this, "source");
    /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */
    __publicField(this, "compilationStatus", "pending");
    this.stage = this.props.stage;
    this.source = this.props.source;
  }
  get [Symbol.toStringTag]() {
    return "Shader";
  }
  /** Get compiler log synchronously (WebGL only) */
  getCompilationInfoSync() {
    return null;
  }
  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */
  getTranslatedSource() {
    return null;
  }
  // PORTABLE HELPERS
  /** In browser logging of errors */
  async debugShader() {
    const trigger = this.props.debugShaders;
    switch (trigger) {
      case "never":
        return;
      case "errors":
        if (this.compilationStatus === "success") {
          return;
        }
        break;
      case "warnings":
      case "always":
        break;
    }
    const messages = await this.getCompilationInfo();
    if (trigger === "warnings" && (messages == null ? void 0 : messages.length) === 0) {
      return;
    }
    this._displayShaderLog(messages);
  }
  // PRIVATE
  /**
   * In-browser UI logging of errors
   * TODO - this HTML formatting code should not be in Device, should be pluggable
   */
  _displayShaderLog(messages) {
    var _a;
    if (typeof document === "undefined" || !(document == null ? void 0 : document.createElement)) {
      return;
    }
    const shaderName = getShaderName(this.source);
    const shaderTitle = `${this.stage} ${shaderName}`;
    let htmlLog = formatCompilerLog(messages, this.source, { showSourceCode: "all", html: true });
    const translatedSource = this.getTranslatedSource();
    if (translatedSource) {
      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>${translatedSource}</pre></code>`;
    }
    const button = document.createElement("Button");
    button.innerHTML = `
<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
    button.style.top = "10px";
    button.style.left = "10px";
    button.style.position = "absolute";
    button.style.zIndex = "9999";
    button.style.width = "100%";
    button.style.textAlign = "left";
    document.body.appendChild(button);
    const errors = document.getElementsByClassName("luma-compiler-log-error");
    (_a = errors[0]) == null ? void 0 : _a.scrollIntoView();
    button.onclick = () => {
      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
      navigator.clipboard.writeText(dataURI);
    };
  }
};
__publicField(_Shader, "defaultProps", {
  ...Resource.defaultProps,
  language: "auto",
  stage: void 0,
  source: "",
  sourceMap: null,
  entryPoint: "main",
  debugShaders: void 0
});
var Shader = _Shader;
function getShaderIdFromProps(props) {
  return getShaderName(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);
}
function getShaderName(shader, defaultName = "unnamed") {
  const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
  const match = SHADER_NAME_REGEXP.exec(shader);
  return match ? match[1] : defaultName;
}

// node_modules/@luma.gl/core/dist/adapter/resources/sampler.js
var _Sampler = class _Sampler extends Resource {
  get [Symbol.toStringTag]() {
    return "Sampler";
  }
  constructor(device, props) {
    props = _Sampler.normalizeProps(device, props);
    super(device, props, _Sampler.defaultProps);
  }
  static normalizeProps(device, props) {
    var _a, _b;
    const overriddenDefaultProps = ((_b = (_a = device == null ? void 0 : device.props) == null ? void 0 : _a._resourceDefaults) == null ? void 0 : _b.sampler) || {};
    const newProps = { ...props, ...overriddenDefaultProps };
    return newProps;
  }
};
__publicField(_Sampler, "defaultProps", {
  ...Resource.defaultProps,
  type: "color-sampler",
  addressModeU: "clamp-to-edge",
  addressModeV: "clamp-to-edge",
  addressModeW: "clamp-to-edge",
  magFilter: "nearest",
  minFilter: "nearest",
  mipmapFilter: "none",
  lodMinClamp: 0,
  lodMaxClamp: 32,
  // Per WebGPU spec
  compare: "less-equal",
  maxAnisotropy: 1
});
var Sampler = _Sampler;

// node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js
var _Framebuffer = class _Framebuffer extends Resource {
  constructor(device, props = {}) {
    super(device, props, _Framebuffer.defaultProps);
    /** Width of all attachments in this framebuffer */
    __publicField(this, "width");
    /** Height of all attachments in this framebuffer */
    __publicField(this, "height");
    this.width = this.props.width;
    this.height = this.props.height;
  }
  get [Symbol.toStringTag]() {
    return "Framebuffer";
  }
  /**
   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.
   * @note Does not copy contents of the attached textures.
   */
  clone(size) {
    const colorAttachments = this.colorAttachments.map((colorAttachment) => colorAttachment.texture.clone(size));
    const depthStencilAttachment = this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);
    return this.device.createFramebuffer({ ...this.props, colorAttachments, depthStencilAttachment });
  }
  resize(size) {
    let updateSize = !size;
    if (size) {
      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
      updateSize = updateSize || height !== this.height || width !== this.width;
      this.width = width;
      this.height = height;
    }
    if (updateSize) {
      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
      this.resizeAttachments(this.width, this.height);
    }
  }
  /** Auto creates any textures */
  autoCreateAttachmentTextures() {
    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {
      throw new Error("Framebuffer has noattachments");
    }
    this.colorAttachments = this.props.colorAttachments.map((attachment2, index) => {
      if (typeof attachment2 === "string") {
        const texture = this.createColorTexture(attachment2, index);
        this.attachResource(texture);
        return texture.view;
      }
      if (attachment2 instanceof Texture) {
        return attachment2.view;
      }
      return attachment2;
    });
    const attachment = this.props.depthStencilAttachment;
    if (attachment) {
      if (typeof attachment === "string") {
        const texture = this.createDepthStencilTexture(attachment);
        this.attachResource(texture);
        this.depthStencilAttachment = texture.view;
      } else if (attachment instanceof Texture) {
        this.depthStencilAttachment = attachment.view;
      } else {
        this.depthStencilAttachment = attachment;
      }
    }
  }
  /** Create a color texture */
  createColorTexture(format, index) {
    return this.device.createTexture({
      id: `${this.id}-color-attachment-${index}`,
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height,
      // TODO deprecated? - luma.gl v8 compatibility
      sampler: {
        magFilter: "linear",
        minFilter: "linear"
      }
    });
  }
  /** Create depth stencil texture */
  createDepthStencilTexture(format) {
    return this.device.createTexture({
      id: `${this.id}-depth-stencil-attachment`,
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height,
      mipmaps: false
    });
  }
  /**
   * Default implementation of resize
   * Creates new textures with correct size for all attachments.
   * and destroys existing textures if owned
   */
  resizeAttachments(width, height) {
    for (let i2 = 0; i2 < this.colorAttachments.length; ++i2) {
      if (this.colorAttachments[i2]) {
        const resizedTexture = this.colorAttachments[i2].texture.clone({
          width,
          height
        });
        this.destroyAttachedResource(this.colorAttachments[i2]);
        this.colorAttachments[i2] = resizedTexture.view;
        this.attachResource(resizedTexture.view);
      }
    }
    if (this.depthStencilAttachment) {
      const resizedTexture = this.depthStencilAttachment.texture.clone({
        width,
        height
      });
      this.destroyAttachedResource(this.depthStencilAttachment);
      this.depthStencilAttachment = resizedTexture.view;
      this.attachResource(resizedTexture);
    }
    this.updateAttachments();
  }
};
__publicField(_Framebuffer, "defaultProps", {
  ...Resource.defaultProps,
  width: 1,
  height: 1,
  colorAttachments: [],
  // ['rgba8unorm'],
  depthStencilAttachment: null
  // 'depth24plus-stencil8'
});
var Framebuffer = _Framebuffer;

// node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js
var _RenderPipeline = class _RenderPipeline extends Resource {
  constructor(device, props) {
    super(device, props, _RenderPipeline.defaultProps);
    /** The merged layout */
    __publicField(this, "shaderLayout");
    /** Buffer map describing buffer interleaving etc */
    __publicField(this, "bufferLayout");
    /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
    __publicField(this, "linkStatus", "pending");
    /** The hash of the pipeline */
    __publicField(this, "hash", "");
    this.shaderLayout = this.props.shaderLayout;
    this.bufferLayout = this.props.bufferLayout || [];
  }
  get [Symbol.toStringTag]() {
    return "RenderPipeline";
  }
  // DEPRECATED METHODS
  /**
   * Uniforms
   * @deprecated Use uniforms buffers
   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.
   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.
   */
  setUniformsWebGL(uniforms) {
    throw new Error("Use uniform blocks");
  }
};
__publicField(_RenderPipeline, "defaultProps", {
  ...Resource.defaultProps,
  vs: null,
  vertexEntryPoint: "vertexMain",
  vsConstants: {},
  fs: null,
  fragmentEntryPoint: "fragmentMain",
  fsConstants: {},
  shaderLayout: null,
  bufferLayout: [],
  topology: "triangle-list",
  parameters: {},
  // isInstanced: false,
  // instanceCount: 0,
  // vertexCount: 0,
  bindings: {},
  uniforms: {}
});
var RenderPipeline = _RenderPipeline;

// node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js
var _RenderPass = class _RenderPass extends Resource {
  get [Symbol.toStringTag]() {
    return "RenderPass";
  }
  constructor(device, props) {
    props = _RenderPass.normalizeProps(device, props);
    super(device, props, _RenderPass.defaultProps);
  }
  static normalizeProps(device, props) {
    var _a;
    const overriddenDefaultProps = (_a = device.props._resourceDefaults) == null ? void 0 : _a.renderPass;
    const newProps = { ...overriddenDefaultProps, ...props };
    return newProps;
  }
};
/** TODO - should be [0, 0, 0, 0], update once deck.gl tests run clean */
__publicField(_RenderPass, "defaultClearColor", [0, 0, 0, 1]);
/** Depth 1.0 represents the far plance */
__publicField(_RenderPass, "defaultClearDepth", 1);
/** Clears all stencil bits */
__publicField(_RenderPass, "defaultClearStencil", 0);
/** Default properties for RenderPass */
__publicField(_RenderPass, "defaultProps", {
  ...Resource.defaultProps,
  framebuffer: null,
  parameters: void 0,
  clearColor: _RenderPass.defaultClearColor,
  clearColors: void 0,
  clearDepth: _RenderPass.defaultClearDepth,
  clearStencil: _RenderPass.defaultClearStencil,
  depthReadOnly: false,
  stencilReadOnly: false,
  discard: false,
  occlusionQuerySet: void 0,
  timestampQuerySet: void 0,
  beginTimestampIndex: void 0,
  endTimestampIndex: void 0
});
var RenderPass = _RenderPass;

// node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js
var _ComputePipeline = class _ComputePipeline extends Resource {
  constructor(device, props) {
    super(device, props, _ComputePipeline.defaultProps);
    __publicField(this, "hash", "");
    /** The merged shader layout */
    __publicField(this, "shaderLayout");
    this.shaderLayout = props.shaderLayout;
  }
  get [Symbol.toStringTag]() {
    return "ComputePipeline";
  }
};
__publicField(_ComputePipeline, "defaultProps", {
  ...Resource.defaultProps,
  shader: void 0,
  entryPoint: void 0,
  constants: {},
  shaderLayout: void 0
});
var ComputePipeline = _ComputePipeline;

// node_modules/@luma.gl/core/dist/adapter/resources/compute-pass.js
var _ComputePass = class _ComputePass extends Resource {
  get [Symbol.toStringTag]() {
    return "ComputePass";
  }
  constructor(device, props) {
    super(device, props, _ComputePass.defaultProps);
  }
};
__publicField(_ComputePass, "defaultProps", {
  ...Resource.defaultProps,
  timestampQuerySet: void 0,
  beginTimestampIndex: void 0,
  endTimestampIndex: void 0
});
var ComputePass = _ComputePass;

// node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js
var _CommandEncoder = class _CommandEncoder extends Resource {
  get [Symbol.toStringTag]() {
    return "CommandEncoder";
  }
  constructor(device, props) {
    super(device, props, _CommandEncoder.defaultProps);
  }
};
__publicField(_CommandEncoder, "defaultProps", {
  ...Resource.defaultProps,
  measureExecutionTime: void 0
});
var CommandEncoder = _CommandEncoder;

// node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js
var _CommandBuffer = class _CommandBuffer extends Resource {
  get [Symbol.toStringTag]() {
    return "CommandBuffer";
  }
  constructor(device, props) {
    super(device, props, _CommandBuffer.defaultProps);
  }
};
__publicField(_CommandBuffer, "defaultProps", {
  ...Resource.defaultProps
});
var CommandBuffer = _CommandBuffer;

// node_modules/@luma.gl/core/dist/gpu-type-utils/decode-attribute-type.js
function decodeShaderAttributeType(attributeType) {
  const [dataType, components] = TYPE_INFO[attributeType];
  const integer = dataType === "i32" || dataType === "u32";
  const signed = dataType !== "u32";
  const byteLength = TYPE_SIZES2[dataType] * components;
  const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);
  return {
    dataType,
    components,
    defaultVertexFormat,
    byteLength,
    integer,
    signed
  };
}
function getCompatibleVertexFormat(dataType, components) {
  let vertexType;
  switch (dataType) {
    case "f32":
      vertexType = "float32";
      break;
    case "i32":
      vertexType = "sint32";
      break;
    case "u32":
      vertexType = "uint32";
      break;
    case "f16":
      return components <= 2 ? "float16x2" : "float16x4";
  }
  if (components === 1) {
    return vertexType;
  }
  return `${vertexType}x${components}`;
}
var TYPE_INFO = {
  f32: ["f32", 1],
  "vec2<f32>": ["f32", 2],
  "vec3<f32>": ["f32", 3],
  "vec4<f32>": ["f32", 4],
  f16: ["f16", 1],
  "vec2<f16>": ["f16", 2],
  "vec3<f16>": ["f16", 3],
  "vec4<f16>": ["f16", 4],
  i32: ["i32", 1],
  "vec2<i32>": ["i32", 2],
  "vec3<i32>": ["i32", 3],
  "vec4<i32>": ["i32", 4],
  u32: ["u32", 1],
  "vec2<u32>": ["u32", 2],
  "vec3<u32>": ["u32", 3],
  "vec4<u32>": ["u32", 4]
};
var TYPE_SIZES2 = {
  f32: 4,
  f16: 2,
  i32: 4,
  u32: 4
  // 'bool-webgl': 4,
};

// node_modules/@luma.gl/core/dist/gpu-type-utils/decode-vertex-format.js
function decodeVertexFormat(format) {
  let webglOnly;
  if (format.endsWith("-webgl")) {
    format.replace("-webgl", "");
    webglOnly = true;
  }
  const [type_, count] = format.split("x");
  const type = type_;
  const components = count ? parseInt(count) : 1;
  const decodedType = decodeVertexType(type);
  const result = {
    type,
    components,
    byteLength: decodedType.byteLength * components,
    integer: decodedType.integer,
    signed: decodedType.signed,
    normalized: decodedType.normalized
  };
  if (webglOnly) {
    result.webglOnly = true;
  }
  return result;
}

// node_modules/@luma.gl/core/dist/adapter-utils/get-attribute-from-layouts.js
function getAttributeInfosFromLayouts(shaderLayout, bufferLayout) {
  const attributeInfos = {};
  for (const attribute of shaderLayout.attributes) {
    const attributeInfo = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);
    if (attributeInfo) {
      attributeInfos[attribute.name] = attributeInfo;
    }
  }
  return attributeInfos;
}
function getAttributeInfosByLocation(shaderLayout, bufferLayout, maxVertexAttributes = 16) {
  const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);
  const locationInfos = new Array(maxVertexAttributes).fill(null);
  for (const attributeInfo of Object.values(attributeInfos)) {
    locationInfos[attributeInfo.location] = attributeInfo;
  }
  return locationInfos;
}
function getAttributeInfoFromLayouts(shaderLayout, bufferLayout, name2) {
  const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name2);
  const bufferMapping = getAttributeFromBufferLayout(bufferLayout, name2);
  if (!shaderDeclaration) {
    return null;
  }
  const attributeTypeInfo = decodeShaderAttributeType(shaderDeclaration.type);
  const vertexFormat = (bufferMapping == null ? void 0 : bufferMapping.vertexFormat) || attributeTypeInfo.defaultVertexFormat;
  const vertexFormatInfo = decodeVertexFormat(vertexFormat);
  return {
    attributeName: (bufferMapping == null ? void 0 : bufferMapping.attributeName) || shaderDeclaration.name,
    bufferName: (bufferMapping == null ? void 0 : bufferMapping.bufferName) || shaderDeclaration.name,
    location: shaderDeclaration.location,
    shaderType: shaderDeclaration.type,
    shaderDataType: attributeTypeInfo.dataType,
    shaderComponents: attributeTypeInfo.components,
    vertexFormat,
    bufferDataType: vertexFormatInfo.type,
    bufferComponents: vertexFormatInfo.components,
    // normalized is a property of the buffer's vertex format
    normalized: vertexFormatInfo.normalized,
    // integer is a property of the shader declaration
    integer: attributeTypeInfo.integer,
    stepMode: (bufferMapping == null ? void 0 : bufferMapping.stepMode) || shaderDeclaration.stepMode || "vertex",
    byteOffset: (bufferMapping == null ? void 0 : bufferMapping.byteOffset) || 0,
    byteStride: (bufferMapping == null ? void 0 : bufferMapping.byteStride) || 0
  };
}
function getAttributeFromShaderLayout(shaderLayout, name2) {
  const attribute = shaderLayout.attributes.find((attr) => attr.name === name2);
  if (!attribute) {
    log.warn(`shader layout attribute "${name2}" not present in shader`);
  }
  return attribute || null;
}
function getAttributeFromBufferLayout(bufferLayouts, name2) {
  checkBufferLayouts(bufferLayouts);
  let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name2);
  if (bufferLayoutInfo) {
    return bufferLayoutInfo;
  }
  bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name2);
  if (bufferLayoutInfo) {
    return bufferLayoutInfo;
  }
  log.warn(`layout for attribute "${name2}" not present in buffer layout`);
  return null;
}
function checkBufferLayouts(bufferLayouts) {
  for (const bufferLayout of bufferLayouts) {
    if (bufferLayout.attributes && bufferLayout.format || !bufferLayout.attributes && !bufferLayout.format) {
      log.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);
    }
  }
}
function getAttributeFromShortHand(bufferLayouts, name2) {
  for (const bufferLayout of bufferLayouts) {
    if (bufferLayout.format && bufferLayout.name === name2) {
      return {
        attributeName: bufferLayout.name,
        bufferName: name2,
        stepMode: bufferLayout.stepMode,
        vertexFormat: bufferLayout.format,
        // If offset is needed, use `attributes` field.
        byteOffset: 0,
        byteStride: bufferLayout.byteStride || 0
      };
    }
  }
  return null;
}
function getAttributeFromAttributesList(bufferLayouts, name2) {
  var _a;
  for (const bufferLayout of bufferLayouts) {
    let byteStride = bufferLayout.byteStride;
    if (typeof bufferLayout.byteStride !== "number") {
      for (const attributeMapping2 of bufferLayout.attributes || []) {
        const info = decodeVertexFormat(attributeMapping2.format);
        byteStride += info.byteLength;
      }
    }
    const attributeMapping = (_a = bufferLayout.attributes) == null ? void 0 : _a.find((mapping) => mapping.attribute === name2);
    if (attributeMapping) {
      return {
        attributeName: attributeMapping.attribute,
        bufferName: bufferLayout.name,
        stepMode: bufferLayout.stepMode,
        vertexFormat: attributeMapping.format,
        byteOffset: attributeMapping.byteOffset,
        // @ts-ignore
        byteStride
      };
    }
  }
  return null;
}

// node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js
var _VertexArray = class _VertexArray extends Resource {
  constructor(device, props) {
    super(device, props, _VertexArray.defaultProps);
    /** Max number of vertex attributes */
    __publicField(this, "maxVertexAttributes");
    /** Attribute infos indexed by location - TODO only needed by webgl module? */
    __publicField(this, "attributeInfos");
    /** Index buffer */
    __publicField(this, "indexBuffer", null);
    /** Attributes indexed by buffer slot */
    __publicField(this, "attributes");
    this.maxVertexAttributes = device.limits.maxVertexAttributes;
    this.attributes = new Array(this.maxVertexAttributes).fill(null);
    const { shaderLayout, bufferLayout } = props.renderPipeline || {};
    if (!shaderLayout || !bufferLayout) {
      throw new Error("VertexArray");
    }
    this.attributeInfos = getAttributeInfosByLocation(shaderLayout, bufferLayout, this.maxVertexAttributes);
  }
  get [Symbol.toStringTag]() {
    return "VertexArray";
  }
  // DEPRECATED METHODS
  /** @deprecated Set constant attributes (WebGL only) */
  setConstantWebGL(location, value) {
    this.device.reportError(new Error("constant attributes not supported"));
  }
};
__publicField(_VertexArray, "defaultProps", {
  ...Resource.defaultProps,
  renderPipeline: null
});
var VertexArray = _VertexArray;

// node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js
var _TransformFeedback = class _TransformFeedback extends Resource {
  get [Symbol.toStringTag]() {
    return "TransformFeedback";
  }
  constructor(device, props) {
    super(device, props, _TransformFeedback.defaultProps);
  }
};
__publicField(_TransformFeedback, "defaultProps", {
  ...Resource.defaultProps,
  layout: void 0,
  buffers: {}
});
var TransformFeedback = _TransformFeedback;

// node_modules/@luma.gl/core/dist/adapter/resources/query-set.js
var _QuerySet = class _QuerySet extends Resource {
  get [Symbol.toStringTag]() {
    return "QuerySet";
  }
  constructor(device, props) {
    super(device, props, _QuerySet.defaultProps);
  }
};
__publicField(_QuerySet, "defaultProps", {
  ...Resource.defaultProps,
  type: void 0,
  count: void 0
});
var QuerySet = _QuerySet;

// node_modules/@luma.gl/core/dist/adapter/resources/pipeline-layout.js
var _PipelineLayout = class _PipelineLayout extends Resource {
  get [Symbol.toStringTag]() {
    return "PipelineLayout";
  }
  constructor(device, props) {
    super(device, props, _PipelineLayout.defaultProps);
  }
};
__publicField(_PipelineLayout, "defaultProps", {
  ...Resource.defaultProps,
  shaderLayout: {
    attributes: [],
    bindings: []
  }
});
var PipelineLayout = _PipelineLayout;

// node_modules/@luma.gl/core/dist/gpu-type-utils/decode-shader-types.js
var UNIFORM_FORMATS = {
  f32: { type: "f32", components: 1 },
  i32: { type: "i32", components: 1 },
  u32: { type: "u32", components: 1 },
  // 'bool-webgl': {type: 'bool-webgl', components: 1},
  "vec2<f32>": { type: "f32", components: 2 },
  "vec3<f32>": { type: "f32", components: 3 },
  "vec4<f32>": { type: "f32", components: 4 },
  "vec2<i32>": { type: "i32", components: 2 },
  "vec3<i32>": { type: "i32", components: 3 },
  "vec4<i32>": { type: "i32", components: 4 },
  "vec2<u32>": { type: "u32", components: 2 },
  "vec3<u32>": { type: "u32", components: 3 },
  "vec4<u32>": { type: "u32", components: 4 },
  "mat2x2<f32>": { type: "f32", components: 4 },
  "mat2x3<f32>": { type: "f32", components: 6 },
  "mat2x4<f32>": { type: "f32", components: 8 },
  "mat3x2<f32>": { type: "f32", components: 6 },
  "mat3x3<f32>": { type: "f32", components: 9 },
  "mat3x4<f32>": { type: "f32", components: 12 },
  "mat4x2<f32>": { type: "f32", components: 8 },
  "mat4x3<f32>": { type: "f32", components: 12 },
  "mat4x4<f32>": { type: "f32", components: 16 }
};
function decodeShaderUniformType(format) {
  const decoded = UNIFORM_FORMATS[format];
  return decoded;
}
function alignTo(size, count) {
  switch (count) {
    case 1:
      return size;
    case 2:
      return size + size % 2;
    default:
      return size + (4 - size % 4) % 4;
  }
}

// node_modules/@luma.gl/core/dist/utils/array-utils-flat.js
var arrayBuffer;
function getScratchArrayBuffer(byteLength) {
  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
    arrayBuffer = new ArrayBuffer(byteLength);
  }
  return arrayBuffer;
}
function getScratchArray(Type, length) {
  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);
  return new Type(scratchArrayBuffer, 0, length);
}

// node_modules/@luma.gl/core/dist/utils/is-array.js
function isTypedArray(value) {
  return ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function isNumberArray(value) {
  if (Array.isArray(value)) {
    return value.length === 0 || typeof value[0] === "number";
  }
  return isTypedArray(value);
}

// node_modules/@luma.gl/core/dist/portable/uniform-buffer-layout.js
var minBufferSize = 1024;
var UniformBufferLayout = class {
  /** Create a new UniformBufferLayout given a map of attributes. */
  constructor(uniformTypes2) {
    __publicField(this, "layout", {});
    /** number of bytes needed for buffer allocation */
    __publicField(this, "byteLength");
    let size = 0;
    for (const [key, uniformType] of Object.entries(uniformTypes2)) {
      const typeAndComponents = decodeShaderUniformType(uniformType);
      const { type, components: count } = typeAndComponents;
      size = alignTo(size, count);
      const offset = size;
      size += count;
      this.layout[key] = { type, size: count, offset };
    }
    size += (4 - size % 4) % 4;
    const actualByteLength = size * 4;
    this.byteLength = Math.max(actualByteLength, minBufferSize);
  }
  /** Get the data for the complete buffer */
  getData(uniformValues) {
    const bufferSize = Math.max(this.byteLength, minBufferSize);
    const arrayBuffer2 = getScratchArrayBuffer(bufferSize);
    const typedArrays = {
      i32: new Int32Array(arrayBuffer2),
      u32: new Uint32Array(arrayBuffer2),
      f32: new Float32Array(arrayBuffer2),
      // TODO not implemented
      f16: new Uint16Array(arrayBuffer2)
    };
    for (const [name2, value] of Object.entries(uniformValues)) {
      const uniformLayout = this.layout[name2];
      if (!uniformLayout) {
        log.warn(`Supplied uniform value ${name2} not present in uniform block layout`)();
        continue;
      }
      const { type, size, offset } = uniformLayout;
      const typedArray = typedArrays[type];
      if (size === 1) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          log.warn(`Supplied value for single component uniform ${name2} is not a number: ${value}`)();
          continue;
        }
        typedArray[offset] = Number(value);
      } else {
        if (!isNumberArray(value)) {
          log.warn(`Supplied value for multi component / array uniform ${name2} is not a numeric array: ${value}`)();
          continue;
        }
        typedArray.set(value, offset);
      }
    }
    return new Uint8Array(arrayBuffer2);
  }
  /** Does this layout have a field with specified name */
  has(name2) {
    return Boolean(this.layout[name2]);
  }
  /** Get offset and size for a field with specified name */
  get(name2) {
    const layout = this.layout[name2];
    return layout;
  }
};

// node_modules/@luma.gl/core/dist/utils/array-equal.js
function arrayEqual(a2, b2, limit = 16) {
  if (a2 !== b2) {
    return false;
  }
  const arrayA = a2;
  const arrayB = b2;
  if (!isNumberArray(arrayA)) {
    return false;
  }
  if (isNumberArray(arrayB) && arrayA.length === arrayB.length) {
    for (let i2 = 0; i2 < arrayA.length; ++i2) {
      if (arrayB[i2] !== arrayA[i2]) {
        return false;
      }
    }
  }
  return true;
}
function arrayCopy(a2) {
  if (isNumberArray(a2)) {
    return a2.slice();
  }
  return a2;
}

// node_modules/@luma.gl/core/dist/portable/uniform-block.js
var UniformBlock = class {
  constructor(props) {
    __publicField(this, "name");
    __publicField(this, "uniforms", {});
    __publicField(this, "modifiedUniforms", {});
    __publicField(this, "modified", true);
    __publicField(this, "bindingLayout", {});
    __publicField(this, "needsRedraw", "initialized");
    var _a;
    this.name = (props == null ? void 0 : props.name) || "unnamed";
    if ((props == null ? void 0 : props.name) && (props == null ? void 0 : props.shaderLayout)) {
      const binding = (_a = props == null ? void 0 : props.shaderLayout.bindings) == null ? void 0 : _a.find((binding_) => binding_.type === "uniform" && binding_.name === (props == null ? void 0 : props.name));
      if (!binding) {
        throw new Error(props == null ? void 0 : props.name);
      }
      const uniformBlock2 = binding;
      for (const uniform of uniformBlock2.uniforms || []) {
        this.bindingLayout[uniform.name] = uniform;
      }
    }
  }
  /** Set a map of uniforms */
  setUniforms(uniforms) {
    for (const [key, value] of Object.entries(uniforms)) {
      this._setUniform(key, value);
      if (!this.needsRedraw) {
        this.setNeedsRedraw(`${this.name}.${key}=${value}`);
      }
    }
  }
  setNeedsRedraw(reason) {
    this.needsRedraw = this.needsRedraw || reason;
  }
  /** Returns all uniforms */
  getAllUniforms() {
    this.modifiedUniforms = {};
    this.needsRedraw = false;
    return this.uniforms || {};
  }
  /** Set a single uniform */
  _setUniform(key, value) {
    if (arrayEqual(this.uniforms[key], value)) {
      return;
    }
    this.uniforms[key] = arrayCopy(value);
    this.modifiedUniforms[key] = true;
    this.modified = true;
  }
};

// node_modules/@luma.gl/core/dist/portable/uniform-store.js
var UniformStore = class {
  /**
   * Create a new UniformStore instance
   * @param blocks
   */
  constructor(blocks) {
    /** Stores the uniform values for each uniform block */
    __publicField(this, "uniformBlocks", /* @__PURE__ */ new Map());
    /** Can generate data for a uniform buffer for each block from data */
    __publicField(this, "uniformBufferLayouts", /* @__PURE__ */ new Map());
    /** Actual buffer for the blocks */
    __publicField(this, "uniformBuffers", /* @__PURE__ */ new Map());
    for (const [bufferName, block] of Object.entries(blocks)) {
      const uniformBufferName = bufferName;
      const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes || {});
      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
      const uniformBlock2 = new UniformBlock({ name: bufferName });
      uniformBlock2.setUniforms(block.defaultUniforms || {});
      this.uniformBlocks.set(uniformBufferName, uniformBlock2);
    }
  }
  /** Destroy any managed uniform buffers */
  destroy() {
    for (const uniformBuffer of this.uniformBuffers.values()) {
      uniformBuffer.destroy();
    }
  }
  /**
   * Set uniforms
   * Makes all properties partial
   */
  setUniforms(uniforms) {
    var _a;
    for (const [blockName, uniformValues] of Object.entries(uniforms)) {
      (_a = this.uniformBlocks.get(blockName)) == null ? void 0 : _a.setUniforms(uniformValues);
    }
    this.updateUniformBuffers();
  }
  /** Get the required minimum length of the uniform buffer */
  getUniformBufferByteLength(uniformBufferName) {
    var _a;
    return ((_a = this.uniformBufferLayouts.get(uniformBufferName)) == null ? void 0 : _a.byteLength) || 0;
  }
  /** Get formatted binary memory that can be uploaded to a buffer */
  getUniformBufferData(uniformBufferName) {
    var _a, _b;
    const uniformValues = ((_a = this.uniformBlocks.get(uniformBufferName)) == null ? void 0 : _a.getAllUniforms()) || {};
    return (_b = this.uniformBufferLayouts.get(uniformBufferName)) == null ? void 0 : _b.getData(uniformValues);
  }
  /**
   * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)
   * The new buffer is initialized with current / supplied values
   */
  createUniformBuffer(device, uniformBufferName, uniforms) {
    if (uniforms) {
      this.setUniforms(uniforms);
    }
    const byteLength = this.getUniformBufferByteLength(uniformBufferName);
    const uniformBuffer = device.createBuffer({
      usage: Buffer.UNIFORM | Buffer.COPY_DST,
      byteLength
    });
    const uniformBufferData = this.getUniformBufferData(uniformBufferName);
    uniformBuffer.write(uniformBufferData);
    return uniformBuffer;
  }
  /** Get the managed uniform buffer. "managed" resources are destroyed when the uniformStore is destroyed. */
  getManagedUniformBuffer(device, uniformBufferName) {
    if (!this.uniformBuffers.get(uniformBufferName)) {
      const byteLength = this.getUniformBufferByteLength(uniformBufferName);
      const uniformBuffer = device.createBuffer({
        usage: Buffer.UNIFORM | Buffer.COPY_DST,
        byteLength
      });
      this.uniformBuffers.set(uniformBufferName, uniformBuffer);
    }
    return this.uniformBuffers.get(uniformBufferName);
  }
  /** Updates all uniform buffers where values have changed */
  updateUniformBuffers() {
    let reason = false;
    for (const uniformBufferName of this.uniformBlocks.keys()) {
      const bufferReason = this.updateUniformBuffer(uniformBufferName);
      reason || (reason = bufferReason);
    }
    if (reason) {
      log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
    }
    return reason;
  }
  /** Update one uniform buffer. Only updates if values have changed */
  updateUniformBuffer(uniformBufferName) {
    var _a;
    const uniformBlock2 = this.uniformBlocks.get(uniformBufferName);
    let uniformBuffer = this.uniformBuffers.get(uniformBufferName);
    let reason = false;
    if (uniformBuffer && (uniformBlock2 == null ? void 0 : uniformBlock2.needsRedraw)) {
      reason || (reason = uniformBlock2.needsRedraw);
      const uniformBufferData = this.getUniformBufferData(uniformBufferName);
      uniformBuffer = this.uniformBuffers.get(uniformBufferName);
      uniformBuffer == null ? void 0 : uniformBuffer.write(uniformBufferData);
      const uniformValues = (_a = this.uniformBlocks.get(uniformBufferName)) == null ? void 0 : _a.getAllUniforms();
      log.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
    }
    return reason;
  }
};

// node_modules/@luma.gl/core/dist/gpu-type-utils/vertex-format-from-attribute.js
function getDataTypeFromTypedArray(arrayOrType) {
  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
  switch (type) {
    case Float32Array:
      return "float32";
    case Uint16Array:
      return "uint16";
    case Uint32Array:
      return "uint32";
    case Uint8Array:
    case Uint8ClampedArray:
      return "uint8";
    case Int8Array:
      return "sint8";
    case Int16Array:
      return "sint16";
    case Int32Array:
      return "sint32";
    default:
      throw new Error(type.constructor.name);
  }
}
function getTypedArrayFromDataType(dataType) {
  switch (dataType) {
    case "float32":
      return Float32Array;
    case "uint32":
      return Uint32Array;
    case "sint32":
      return Int32Array;
    case "uint16":
    case "unorm16":
      return Uint16Array;
    case "sint16":
    case "snorm16":
      return Int16Array;
    case "uint8":
    case "unorm8":
      return Uint8Array;
    case "sint8":
    case "snorm8":
      return Int8Array;
    default:
      throw new Error(dataType);
  }
}
function getVertexFormatFromAttribute(typedArray, size, normalized) {
  if (!size || size > 4) {
    throw new Error(`size ${size}`);
  }
  const components = size;
  let dataType = getDataTypeFromTypedArray(typedArray);
  if (dataType === "uint8" && normalized && components === 1) {
    return "unorm8-webgl";
  }
  if (dataType === "uint8" && normalized && components === 3) {
    return "unorm8x3-webgl";
  }
  if (dataType === "uint8" || dataType === "sint8") {
    if (components === 1 || components === 3) {
      throw new Error(`size: ${size}`);
    }
    if (normalized) {
      dataType = dataType.replace("int", "norm");
    }
    return `${dataType}x${components}`;
  }
  if (dataType === "uint16" || dataType === "sint16") {
    if (components === 1 || components === 3) {
      throw new Error(`size: ${size}`);
    }
    if (normalized) {
      dataType = dataType.replace("int", "norm");
    }
    return `${dataType}x${components}`;
  }
  if (components === 1) {
    return dataType;
  }
  return `${dataType}x${components}`;
}

// node_modules/@luma.gl/core/dist/adapter-utils/buffer-layout-helper.js
var BufferLayoutHelper = class {
  constructor(bufferLayouts) {
    __publicField(this, "bufferLayouts");
    this.bufferLayouts = bufferLayouts;
  }
  getBufferLayout(name2) {
    return this.bufferLayouts.find((layout) => layout.name === name2) || null;
  }
  /** Get attribute names from a BufferLayout */
  getAttributeNamesForBuffer(bufferLayout) {
    var _a;
    return bufferLayout.attributes ? (_a = bufferLayout.attributes) == null ? void 0 : _a.map((layout) => layout.attribute) : [bufferLayout.name];
  }
  mergeBufferLayouts(bufferLayouts1, bufferLayouts2) {
    const mergedLayouts = [...bufferLayouts1];
    for (const attribute of bufferLayouts2) {
      const index = mergedLayouts.findIndex((attribute2) => attribute2.name === attribute.name);
      if (index < 0) {
        mergedLayouts.push(attribute);
      } else {
        mergedLayouts[index] = attribute;
      }
    }
    return mergedLayouts;
  }
  getBufferIndex(bufferName) {
    const bufferIndex = this.bufferLayouts.findIndex((layout) => layout.name === bufferName);
    if (bufferIndex === -1) {
      log.warn(`BufferLayout: Missing buffer for "${bufferName}".`)();
    }
    return bufferIndex;
  }
};

// node_modules/@luma.gl/core/dist/adapter-utils/buffer-layout-order.js
function sortedBufferLayoutByShaderSourceLocations(shaderLayout, bufferLayout) {
  const shaderLayoutMap = Object.fromEntries(shaderLayout.attributes.map((attr) => [attr.name, attr.location]));
  const sortedLayout = bufferLayout.slice();
  sortedLayout.sort((a2, b2) => {
    const attributeNamesA = a2.attributes ? a2.attributes.map((attr) => attr.attribute) : [a2.name];
    const attributeNamesB = b2.attributes ? b2.attributes.map((attr) => attr.attribute) : [b2.name];
    const minLocationA = Math.min(...attributeNamesA.map((name2) => shaderLayoutMap[name2]));
    const minLocationB = Math.min(...attributeNamesB.map((name2) => shaderLayoutMap[name2]));
    return minLocationA - minLocationB;
  });
  return sortedLayout;
}

// node_modules/@luma.gl/engine/dist/animation-loop/request-animation-frame.js
function requestAnimationFramePolyfill(callback) {
  return typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1e3 / 60);
}
function cancelAnimationFramePolyfill(timerId) {
  return typeof window !== "undefined" && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}

// node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js
var statIdCounter = 0;
var DEFAULT_ANIMATION_LOOP_PROPS = {
  device: null,
  onAddHTML: () => "",
  onInitialize: async () => {
    return null;
  },
  onRender: () => {
  },
  onFinalize: () => {
  },
  onError: (error) => console.error(error),
  // eslint-disable-line no-console
  stats: luma.stats.get(`animation-loop-${statIdCounter++}`),
  // view parameters
  useDevicePixels: true,
  autoResizeViewport: false,
  autoResizeDrawingBuffer: false
};
var AnimationLoop = class {
  // _gpuTimeQuery: Query | null = null;
  /*
   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
   */
  constructor(props) {
    __publicField(this, "device", null);
    __publicField(this, "canvas", null);
    __publicField(this, "props");
    __publicField(this, "animationProps", null);
    __publicField(this, "timeline", null);
    __publicField(this, "stats");
    __publicField(this, "cpuTime");
    __publicField(this, "gpuTime");
    __publicField(this, "frameRate");
    __publicField(this, "display");
    __publicField(this, "needsRedraw", "initialized");
    __publicField(this, "_initialized", false);
    __publicField(this, "_running", false);
    __publicField(this, "_animationFrameId", null);
    __publicField(this, "_nextFramePromise", null);
    __publicField(this, "_resolveNextFrame", null);
    __publicField(this, "_cpuStartTime", 0);
    __publicField(this, "_error", null);
    this.props = { ...DEFAULT_ANIMATION_LOOP_PROPS, ...props };
    props = this.props;
    if (!props.device) {
      throw new Error("No device provided");
    }
    const { useDevicePixels = true } = this.props;
    this.stats = props.stats || new Stats({ id: "animation-loop-stats" });
    this.cpuTime = this.stats.get("CPU Time");
    this.gpuTime = this.stats.get("GPU Time");
    this.frameRate = this.stats.get("Frame Rate");
    this.setProps({
      autoResizeViewport: props.autoResizeViewport,
      autoResizeDrawingBuffer: props.autoResizeDrawingBuffer,
      useDevicePixels
    });
    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this._onMousemove = this._onMousemove.bind(this);
    this._onMouseleave = this._onMouseleave.bind(this);
  }
  destroy() {
    this.stop();
    this._setDisplay(null);
  }
  /** @deprecated Use .destroy() */
  delete() {
    this.destroy();
  }
  setError(error) {
    var _a, _b;
    this.props.onError(error);
    this._error = Error();
    const canvas2 = (_b = (_a = this.device) == null ? void 0 : _a.canvasContext) == null ? void 0 : _b.canvas;
    if (canvas2 instanceof HTMLCanvasElement) {
      const errorDiv = document.createElement("h1");
      errorDiv.innerHTML = error.message;
      errorDiv.style.position = "absolute";
      errorDiv.style.top = "20%";
      errorDiv.style.left = "10px";
      errorDiv.style.color = "black";
      errorDiv.style.backgroundColor = "red";
      document.body.appendChild(errorDiv);
    }
  }
  /** Flags this animation loop as needing redraw */
  setNeedsRedraw(reason) {
    this.needsRedraw = this.needsRedraw || reason;
    return this;
  }
  /** TODO - move these props to CanvasContext? */
  setProps(props) {
    if ("autoResizeViewport" in props) {
      this.props.autoResizeViewport = props.autoResizeViewport || false;
    }
    if ("autoResizeDrawingBuffer" in props) {
      this.props.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer || false;
    }
    if ("useDevicePixels" in props) {
      this.props.useDevicePixels = props.useDevicePixels || false;
    }
    return this;
  }
  /** Starts a render loop if not already running */
  async start() {
    if (this._running) {
      return this;
    }
    this._running = true;
    try {
      let appContext;
      if (!this._initialized) {
        this._initialized = true;
        await this._initDevice();
        this._initialize();
        await this.props.onInitialize(this._getAnimationProps());
      }
      if (!this._running) {
        return null;
      }
      if (appContext !== false) {
        this._cancelAnimationFrame();
        this._requestAnimationFrame();
      }
      return this;
    } catch (err) {
      const error = err instanceof Error ? err : new Error("Unknown error");
      this.props.onError(error);
      throw error;
    }
  }
  /** Stops a render loop if already running, finalizing */
  stop() {
    if (this._running) {
      if (this.animationProps && !this._error) {
        this.props.onFinalize(this.animationProps);
      }
      this._cancelAnimationFrame();
      this._nextFramePromise = null;
      this._resolveNextFrame = null;
      this._running = false;
    }
    return this;
  }
  /** Explicitly draw a frame */
  redraw() {
    var _a;
    if (((_a = this.device) == null ? void 0 : _a.isLost) || this._error) {
      return this;
    }
    this._beginFrameTimers();
    this._setupFrame();
    this._updateAnimationProps();
    this._renderFrame(this._getAnimationProps());
    this._clearNeedsRedraw();
    if (this._resolveNextFrame) {
      this._resolveNextFrame(this);
      this._nextFramePromise = null;
      this._resolveNextFrame = null;
    }
    this._endFrameTimers();
    return this;
  }
  /** Add a timeline, it will be automatically updated by the animation loop. */
  attachTimeline(timeline) {
    this.timeline = timeline;
    return this.timeline;
  }
  /** Remove a timeline */
  detachTimeline() {
    this.timeline = null;
  }
  /** Wait until a render completes */
  waitForRender() {
    this.setNeedsRedraw("waitForRender");
    if (!this._nextFramePromise) {
      this._nextFramePromise = new Promise((resolve) => {
        this._resolveNextFrame = resolve;
      });
    }
    return this._nextFramePromise;
  }
  /** TODO - should use device.deviceContext */
  async toDataURL() {
    this.setNeedsRedraw("toDataURL");
    await this.waitForRender();
    if (this.canvas instanceof HTMLCanvasElement) {
      return this.canvas.toDataURL();
    }
    throw new Error("OffscreenCanvas");
  }
  // PRIVATE METHODS
  _initialize() {
    this._startEventHandling();
    this._initializeAnimationProps();
    this._updateAnimationProps();
    this._resizeCanvasDrawingBuffer();
    this._resizeViewport();
  }
  _setDisplay(display) {
    if (this.display) {
      this.display.destroy();
      this.display.animationLoop = null;
    }
    if (display) {
      display.animationLoop = this;
    }
    this.display = display;
  }
  _requestAnimationFrame() {
    if (!this._running) {
      return;
    }
    this._animationFrameId = requestAnimationFramePolyfill(this._animationFrame.bind(this));
  }
  _cancelAnimationFrame() {
    if (this._animationFrameId === null) {
      return;
    }
    cancelAnimationFramePolyfill(this._animationFrameId);
    this._animationFrameId = null;
  }
  _animationFrame() {
    if (!this._running) {
      return;
    }
    this.redraw();
    this._requestAnimationFrame();
  }
  // Called on each frame, can be overridden to call onRender multiple times
  // to support e.g. stereoscopic rendering
  _renderFrame(animationProps) {
    var _a;
    if (this.display) {
      this.display._renderFrame(animationProps);
      return;
    }
    this.props.onRender(this._getAnimationProps());
    (_a = this.device) == null ? void 0 : _a.submit();
  }
  _clearNeedsRedraw() {
    this.needsRedraw = false;
  }
  _setupFrame() {
    this._resizeCanvasDrawingBuffer();
    this._resizeViewport();
  }
  // Initialize the  object that will be passed to app callbacks
  _initializeAnimationProps() {
    var _a, _b;
    const canvas2 = (_b = (_a = this.device) == null ? void 0 : _a.canvasContext) == null ? void 0 : _b.canvas;
    if (!this.device || !canvas2) {
      throw new Error("loop");
    }
    this.animationProps = {
      animationLoop: this,
      device: this.device,
      canvas: canvas2,
      timeline: this.timeline,
      // Initial values
      useDevicePixels: this.props.useDevicePixels,
      needsRedraw: false,
      // Placeholders
      width: 1,
      height: 1,
      aspect: 1,
      // Animation props
      time: 0,
      startTime: Date.now(),
      engineTime: 0,
      tick: 0,
      tock: 0,
      // Experimental
      _mousePosition: null
      // Event props
    };
  }
  _getAnimationProps() {
    if (!this.animationProps) {
      throw new Error("animationProps");
    }
    return this.animationProps;
  }
  // Update the context object that will be passed to app callbacks
  _updateAnimationProps() {
    if (!this.animationProps) {
      return;
    }
    const { width, height, aspect } = this._getSizeAndAspect();
    if (width !== this.animationProps.width || height !== this.animationProps.height) {
      this.setNeedsRedraw("drawing buffer resized");
    }
    if (aspect !== this.animationProps.aspect) {
      this.setNeedsRedraw("drawing buffer aspect changed");
    }
    this.animationProps.width = width;
    this.animationProps.height = height;
    this.animationProps.aspect = aspect;
    this.animationProps.needsRedraw = this.needsRedraw;
    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;
    if (this.timeline) {
      this.timeline.update(this.animationProps.engineTime);
    }
    this.animationProps.tick = Math.floor(this.animationProps.time / 1e3 * 60);
    this.animationProps.tock++;
    this.animationProps.time = this.timeline ? this.timeline.getTime() : this.animationProps.engineTime;
  }
  /** Wait for supplied device */
  async _initDevice() {
    var _a;
    this.device = await this.props.device;
    if (!this.device) {
      throw new Error("No device provided");
    }
    this.canvas = ((_a = this.device.canvasContext) == null ? void 0 : _a.canvas) || null;
  }
  _createInfoDiv() {
    if (this.canvas && this.props.onAddHTML) {
      const wrapperDiv = document.createElement("div");
      document.body.appendChild(wrapperDiv);
      wrapperDiv.style.position = "relative";
      const div = document.createElement("div");
      div.style.position = "absolute";
      div.style.left = "10px";
      div.style.bottom = "10px";
      div.style.width = "300px";
      div.style.background = "white";
      if (this.canvas instanceof HTMLCanvasElement) {
        wrapperDiv.appendChild(this.canvas);
      }
      wrapperDiv.appendChild(div);
      const html = this.props.onAddHTML(div);
      if (html) {
        div.innerHTML = html;
      }
    }
  }
  _getSizeAndAspect() {
    var _a, _b, _c, _d;
    if (!this.device) {
      return { width: 1, height: 1, aspect: 1 };
    }
    const [width, height] = ((_b = (_a = this.device) == null ? void 0 : _a.canvasContext) == null ? void 0 : _b.getPixelSize()) || [1, 1];
    let aspect = 1;
    const canvas2 = (_d = (_c = this.device) == null ? void 0 : _c.canvasContext) == null ? void 0 : _d.canvas;
    if (canvas2 && canvas2.clientHeight) {
      aspect = canvas2.clientWidth / canvas2.clientHeight;
    } else if (width > 0 && height > 0) {
      aspect = width / height;
    }
    return { width, height, aspect };
  }
  /** Default viewport setup */
  _resizeViewport() {
    if (this.props.autoResizeViewport && this.device.gl) {
      this.device.gl.viewport(
        0,
        0,
        // @ts-expect-error Expose canvasContext
        this.device.gl.drawingBufferWidth,
        // @ts-expect-error Expose canvasContext
        this.device.gl.drawingBufferHeight
      );
    }
  }
  /**
   * Resize the render buffer of the canvas to match canvas client size
   * Optionally multiplying with devicePixel ratio
   */
  _resizeCanvasDrawingBuffer() {
    var _a, _b;
    if (this.props.autoResizeDrawingBuffer) {
      (_b = (_a = this.device) == null ? void 0 : _a.canvasContext) == null ? void 0 : _b.resize({ useDevicePixels: this.props.useDevicePixels });
    }
  }
  _beginFrameTimers() {
    this.frameRate.timeEnd();
    this.frameRate.timeStart();
    this.cpuTime.timeStart();
  }
  _endFrameTimers() {
    this.cpuTime.timeEnd();
  }
  // Event handling
  _startEventHandling() {
    if (this.canvas) {
      this.canvas.addEventListener("mousemove", this._onMousemove.bind(this));
      this.canvas.addEventListener("mouseleave", this._onMouseleave.bind(this));
    }
  }
  _onMousemove(event) {
    if (event instanceof MouseEvent) {
      this._getAnimationProps()._mousePosition = [event.offsetX, event.offsetY];
    }
  }
  _onMouseleave(event) {
    this._getAnimationProps()._mousePosition = null;
  }
};

// node_modules/@luma.gl/engine/dist/animation-loop/make-animation-loop.js
function makeAnimationLoop(AnimationLoopTemplateCtor, props) {
  let renderLoop = null;
  const device = (props == null ? void 0 : props.device) || luma.createDevice({ id: "animation-loop", adapters: props == null ? void 0 : props.adapters, createCanvasContext: true });
  const animationLoop = new AnimationLoop({
    ...props,
    device,
    async onInitialize(animationProps) {
      renderLoop = new AnimationLoopTemplateCtor(animationProps);
      return await (renderLoop == null ? void 0 : renderLoop.onInitialize(animationProps));
    },
    onRender: (animationProps) => renderLoop == null ? void 0 : renderLoop.onRender(animationProps),
    onFinalize: (animationProps) => renderLoop == null ? void 0 : renderLoop.onFinalize(animationProps)
  });
  animationLoop.getInfo = () => {
    return this.AnimationLoopTemplateCtor.info;
  };
  return animationLoop;
}

// node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "shadertools: assertion failed.");
  }
}

// node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js
var DEFAULT_PROP_VALIDATORS = {
  number: {
    type: "number",
    validate(value, propType) {
      return Number.isFinite(value) && typeof propType === "object" && (propType.max === void 0 || value <= propType.max) && (propType.min === void 0 || value >= propType.min);
    }
  },
  array: {
    type: "array",
    validate(value, propType) {
      return Array.isArray(value) || ArrayBuffer.isView(value);
    }
  }
};
function makePropValidators(propTypes) {
  const propValidators = {};
  for (const [name2, propType] of Object.entries(propTypes)) {
    propValidators[name2] = makePropValidator(propType);
  }
  return propValidators;
}
function makePropValidator(propType) {
  let type = getTypeOf(propType);
  if (type !== "object") {
    return { value: propType, ...DEFAULT_PROP_VALIDATORS[type], type };
  }
  if (typeof propType === "object") {
    if (!propType) {
      return { type: "object", value: null };
    }
    if (propType.type !== void 0) {
      return { ...propType, ...DEFAULT_PROP_VALIDATORS[propType.type], type: propType.type };
    }
    if (propType.value === void 0) {
      return { type: "object", value: propType };
    }
    type = getTypeOf(propType.value);
    return { ...propType, ...DEFAULT_PROP_VALIDATORS[type], type };
  }
  throw new Error("props");
}
function getTypeOf(value) {
  if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    return "array";
  }
  return typeof value;
}

// node_modules/@luma.gl/shadertools/dist/module-injectors.js
var MODULE_INJECTORS_VS = (
  /* glsl */
  `#ifdef MODULE_LOGDEPTH
  logdepth_adjustPosition(gl_Position);
#endif
`
);
var MODULE_INJECTORS_FS = (
  /* glsl */
  `#ifdef MODULE_MATERIAL
  fragColor = material_filterColor(fragColor);
#endif

#ifdef MODULE_LIGHTING
  fragColor = lighting_filterColor(fragColor);
#endif

#ifdef MODULE_FOG
  fragColor = fog_filterColor(fragColor);
#endif

#ifdef MODULE_PICKING
  fragColor = picking_filterHighlightColor(fragColor);
  fragColor = picking_filterPickingColor(fragColor);
#endif

#ifdef MODULE_LOGDEPTH
  logdepth_setFragDepth();
#endif
`
);

// node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js
var MODULE_INJECTORS = {
  vertex: MODULE_INJECTORS_VS,
  fragment: MODULE_INJECTORS_FS
};
var REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/;
var REGEX_END_OF_MAIN = /}\n?[^{}]*$/;
var fragments = [];
var DECLARATION_INJECT_MARKER = "__LUMA_INJECT_DECLARATIONS__";
function normalizeInjections(injections) {
  const result = { vertex: {}, fragment: {} };
  for (const hook in injections) {
    let injection = injections[hook];
    const stage = getHookStage(hook);
    if (typeof injection === "string") {
      injection = {
        order: 0,
        injection
      };
    }
    result[stage][hook] = injection;
  }
  return result;
}
function getHookStage(hook) {
  const type = hook.slice(0, 2);
  switch (type) {
    case "vs":
      return "vertex";
    case "fs":
      return "fragment";
    default:
      throw new Error(type);
  }
}
function injectShader(source3, stage, inject, injectStandardStubs = false) {
  const isVertex = stage === "vertex";
  for (const key in inject) {
    const fragmentData = inject[key];
    fragmentData.sort((a2, b2) => a2.order - b2.order);
    fragments.length = fragmentData.length;
    for (let i2 = 0, len = fragmentData.length; i2 < len; ++i2) {
      fragments[i2] = fragmentData[i2].injection;
    }
    const fragmentString = `${fragments.join("\n")}
`;
    switch (key) {
      case "vs:#decl":
        if (isVertex) {
          source3 = source3.replace(DECLARATION_INJECT_MARKER, fragmentString);
        }
        break;
      case "vs:#main-start":
        if (isVertex) {
          source3 = source3.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
        }
        break;
      case "vs:#main-end":
        if (isVertex) {
          source3 = source3.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
        }
        break;
      case "fs:#decl":
        if (!isVertex) {
          source3 = source3.replace(DECLARATION_INJECT_MARKER, fragmentString);
        }
        break;
      case "fs:#main-start":
        if (!isVertex) {
          source3 = source3.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
        }
        break;
      case "fs:#main-end":
        if (!isVertex) {
          source3 = source3.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
        }
        break;
      default:
        source3 = source3.replace(key, (match) => match + fragmentString);
    }
  }
  source3 = source3.replace(DECLARATION_INJECT_MARKER, "");
  if (injectStandardStubs) {
    source3 = source3.replace(/\}\s*$/, (match) => match + MODULE_INJECTORS[stage]);
  }
  return source3;
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module.js
function initializeShaderModules(modules) {
  modules.map((module) => initializeShaderModule(module));
}
function initializeShaderModule(module) {
  if (module.instance) {
    return;
  }
  initializeShaderModules(module.dependencies || []);
  const {
    propTypes = {},
    deprecations = [],
    // defines = {},
    inject = {}
  } = module;
  const instance = {
    normalizedInjections: normalizeInjections(inject),
    parsedDeprecations: parseDeprecationDefinitions(deprecations)
  };
  if (propTypes) {
    instance.propValidators = makePropValidators(propTypes);
  }
  module.instance = instance;
  let defaultProps = {};
  if (propTypes) {
    defaultProps = Object.entries(propTypes).reduce((obj, [key, propType]) => {
      const value = propType == null ? void 0 : propType.value;
      if (value) {
        obj[key] = value;
      }
      return obj;
    }, {});
  }
  module.defaultUniforms = { ...module.defaultUniforms, ...defaultProps };
}
function checkShaderModuleDeprecations(shaderModule, shaderSource, log2) {
  var _a;
  (_a = shaderModule.deprecations) == null ? void 0 : _a.forEach((def) => {
    var _a2;
    if ((_a2 = def.regex) == null ? void 0 : _a2.test(shaderSource)) {
      if (def.deprecated) {
        log2.deprecated(def.old, def.new)();
      } else {
        log2.removed(def.old, def.new)();
      }
    }
  });
}
function parseDeprecationDefinitions(deprecations) {
  deprecations.forEach((def) => {
    switch (def.type) {
      case "function":
        def.regex = new RegExp(`\\b${def.old}\\(`);
        break;
      default:
        def.regex = new RegExp(`${def.type} ${def.old};`);
    }
  });
  return deprecations;
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-dependencies.js
function getShaderModuleDependencies(modules) {
  initializeShaderModules(modules);
  const moduleMap = {};
  const moduleDepth = {};
  getDependencyGraph({ modules, level: 0, moduleMap, moduleDepth });
  const dependencies = Object.keys(moduleDepth).sort((a2, b2) => moduleDepth[b2] - moduleDepth[a2]).map((name2) => moduleMap[name2]);
  initializeShaderModules(dependencies);
  return dependencies;
}
function getDependencyGraph(options) {
  const { modules, level, moduleMap, moduleDepth } = options;
  if (level >= 5) {
    throw new Error("Possible loop in shader dependency graph");
  }
  for (const module of modules) {
    moduleMap[module.name] = module;
    if (moduleDepth[module.name] === void 0 || moduleDepth[module.name] < level) {
      moduleDepth[module.name] = level;
    }
  }
  for (const module of modules) {
    if (module.dependencies) {
      getDependencyGraph({ modules: module.dependencies, level: level + 1, moduleMap, moduleDepth });
    }
  }
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js
function getPlatformShaderDefines(platformInfo) {
  switch (platformInfo == null ? void 0 : platformInfo.gpu.toLowerCase()) {
    case "apple":
      return (
        /* glsl */
        `#define APPLE_GPU
// Apple optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
    case "nvidia":
      return (
        /* glsl */
        `#define NVIDIA_GPU
// Nvidia optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`
      );
    case "intel":
      return (
        /* glsl */
        `#define INTEL_GPU
// Intel optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Intel's built-in 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
    case "amd":
      return (
        /* glsl */
        `#define AMD_GPU
`
      );
    default:
      return (
        /* glsl */
        `#define DEFAULT_GPU
// Prevent driver from optimizing away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Headless Chrome's software shader 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// If the GPU doesn't have full 32 bits precision, will causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
  }
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js
function transpileGLSLShader(source3, stage) {
  var _a;
  const sourceGLSLVersion = Number(((_a = source3.match(/^#version[ \t]+(\d+)/m)) == null ? void 0 : _a[1]) || 100);
  if (sourceGLSLVersion !== 300) {
    throw new Error("luma.gl v9 only supports GLSL 3.00 shader sources");
  }
  switch (stage) {
    case "vertex":
      source3 = convertShader(source3, ES300_VERTEX_REPLACEMENTS);
      return source3;
    case "fragment":
      source3 = convertShader(source3, ES300_FRAGMENT_REPLACEMENTS);
      return source3;
    default:
      throw new Error(stage);
  }
}
var ES300_REPLACEMENTS = [
  // Fix poorly formatted version directive
  [/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/, "#version 300 es\n"],
  // The individual `texture...()` functions were replaced with `texture()` overloads
  [/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g, "textureLod("],
  [/\btexture(2D|2DProj|Cube)(EXT)?\(/g, "texture("]
];
var ES300_VERTEX_REPLACEMENTS = [
  ...ES300_REPLACEMENTS,
  // `attribute` keyword replaced with `in`
  [makeVariableTextRegExp("attribute"), "in $1"],
  // `varying` keyword replaced with `out`
  [makeVariableTextRegExp("varying"), "out $1"]
];
var ES300_FRAGMENT_REPLACEMENTS = [
  ...ES300_REPLACEMENTS,
  // `varying` keyword replaced with `in`
  [makeVariableTextRegExp("varying"), "in $1"]
];
function convertShader(source3, replacements) {
  for (const [pattern, replacement] of replacements) {
    source3 = source3.replace(pattern, replacement);
  }
  return source3;
}
function makeVariableTextRegExp(qualifier) {
  return new RegExp(`\\b${qualifier}[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)`, "g");
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js
function getShaderHooks(hookFunctions, hookInjections) {
  let result = "";
  for (const hookName in hookFunctions) {
    const hookFunction = hookFunctions[hookName];
    result += `void ${hookFunction.signature} {
`;
    if (hookFunction.header) {
      result += `  ${hookFunction.header}`;
    }
    if (hookInjections[hookName]) {
      const injections = hookInjections[hookName];
      injections.sort((a2, b2) => a2.order - b2.order);
      for (const injection of injections) {
        result += `  ${injection.injection}
`;
      }
    }
    if (hookFunction.footer) {
      result += `  ${hookFunction.footer}`;
    }
    result += "}\n";
  }
  return result;
}
function normalizeShaderHooks(hookFunctions) {
  const result = { vertex: {}, fragment: {} };
  for (const hookFunction of hookFunctions) {
    let opts;
    let hook;
    if (typeof hookFunction !== "string") {
      opts = hookFunction;
      hook = opts.hook;
    } else {
      opts = {};
      hook = hookFunction;
    }
    hook = hook.trim();
    const [shaderStage, signature] = hook.split(":");
    const name2 = hook.replace(/\(.+/, "");
    const normalizedHook = Object.assign(opts, { signature });
    switch (shaderStage) {
      case "vs":
        result.vertex[name2] = normalizedHook;
        break;
      case "fs":
        result.fragment[name2] = normalizedHook;
        break;
      default:
        throw new Error(shaderStage);
    }
  }
  return result;
}

// node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js
function getShaderInfo(source3, defaultName) {
  return {
    name: getShaderName2(source3, defaultName),
    language: "glsl",
    version: getShaderVersion(source3)
  };
}
function getShaderName2(shader, defaultName = "unnamed") {
  const SHADER_NAME_REGEXP = /#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/;
  const match = SHADER_NAME_REGEXP.exec(shader);
  return match ? match[1] : defaultName;
}
function getShaderVersion(source3) {
  let version = 100;
  const words = source3.match(/[^\s]+/g);
  if (words && words.length >= 2 && words[0] === "#version") {
    const parsedVersion = parseInt(words[1], 10);
    if (Number.isFinite(parsedVersion)) {
      version = parsedVersion;
    }
  }
  if (version !== 100 && version !== 300) {
    throw new Error(`Invalid GLSL version ${version}`);
  }
  return version;
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js
var INJECT_SHADER_DECLARATIONS = `

${DECLARATION_INJECT_MARKER}
`;
var FRAGMENT_SHADER_PROLOGUE = (
  /* glsl */
  `precision highp float;
`
);
function assembleWGSLShader(options) {
  const modules = getShaderModuleDependencies(options.modules || []);
  return {
    source: assembleShaderWGSL(options.platformInfo, {
      ...options,
      source: options.source,
      stage: "vertex",
      modules
    }),
    getUniforms: assembleGetUniforms(modules)
  };
}
function assembleGLSLShaderPair(options) {
  const { vs: vs7, fs: fs7 } = options;
  const modules = getShaderModuleDependencies(options.modules || []);
  return {
    vs: assembleShaderGLSL(options.platformInfo, {
      ...options,
      source: vs7,
      stage: "vertex",
      modules
    }),
    fs: assembleShaderGLSL(options.platformInfo, {
      ...options,
      // @ts-expect-error
      source: fs7,
      stage: "fragment",
      modules
    }),
    getUniforms: assembleGetUniforms(modules)
  };
}
function assembleShaderWGSL(platformInfo, options) {
  var _a;
  const {
    // id,
    source: source3,
    stage,
    modules,
    // defines = {},
    hookFunctions = [],
    inject = {},
    log: log2
  } = options;
  assert(typeof source3 === "string", "shader source must be a string");
  const coreSource = source3;
  let assembledSource = "";
  const hookFunctionMap = normalizeShaderHooks(hookFunctions);
  const hookInjections = {};
  const declInjections = {};
  const mainInjections = {};
  for (const key in inject) {
    const injection = typeof inject[key] === "string" ? { injection: inject[key], order: 0 } : inject[key];
    const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
    if (match) {
      const hash = match[2];
      const name2 = match[3];
      if (hash) {
        if (name2 === "decl") {
          declInjections[key] = [injection];
        } else {
          mainInjections[key] = [injection];
        }
      } else {
        hookInjections[key] = [injection];
      }
    } else {
      mainInjections[key] = [injection];
    }
  }
  const modulesToInject = modules;
  for (const module of modulesToInject) {
    if (log2) {
      checkShaderModuleDeprecations(module, coreSource, log2);
    }
    const moduleSource = getShaderModuleSource(module, "wgsl");
    assembledSource += moduleSource;
    const injections = ((_a = module.injections) == null ? void 0 : _a[stage]) || {};
    for (const key in injections) {
      const match = /^(v|f)s:#([\w-]+)$/.exec(key);
      if (match) {
        const name2 = match[2];
        const injectionType = name2 === "decl" ? declInjections : mainInjections;
        injectionType[key] = injectionType[key] || [];
        injectionType[key].push(injections[key]);
      } else {
        hookInjections[key] = hookInjections[key] || [];
        hookInjections[key].push(injections[key]);
      }
    }
  }
  assembledSource += INJECT_SHADER_DECLARATIONS;
  assembledSource = injectShader(assembledSource, stage, declInjections);
  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
  assembledSource += coreSource;
  assembledSource = injectShader(assembledSource, stage, mainInjections);
  return assembledSource;
}
function assembleShaderGLSL(platformInfo, options) {
  var _a;
  const { id, source: source3, stage, language = "glsl", modules, defines = {}, hookFunctions = [], inject = {}, prologue = true, log: log2 } = options;
  assert(typeof source3 === "string", "shader source must be a string");
  const sourceVersion = language === "glsl" ? getShaderInfo(source3).version : -1;
  const targetVersion = platformInfo.shaderLanguageVersion;
  const sourceVersionDirective = sourceVersion === 100 ? "#version 100" : "#version 300 es";
  const sourceLines = source3.split("\n");
  const coreSource = sourceLines.slice(1).join("\n");
  const allDefines = {};
  modules.forEach((module) => {
    Object.assign(allDefines, module.defines);
  });
  Object.assign(allDefines, defines);
  let assembledSource = "";
  switch (language) {
    case "wgsl":
      break;
    case "glsl":
      assembledSource = prologue ? `${sourceVersionDirective}

// ----- PROLOGUE -------------------------
${getShaderNameDefine({ id, source: source3, stage })}
${`#define SHADER_TYPE_${stage.toUpperCase()}`}

${getPlatformShaderDefines(platformInfo)}
${stage === "fragment" ? FRAGMENT_SHADER_PROLOGUE : ""}

// ----- APPLICATION DEFINES -------------------------

${getApplicationDefines(allDefines)}

` : `${sourceVersionDirective}
`;
      break;
  }
  const hookFunctionMap = normalizeShaderHooks(hookFunctions);
  const hookInjections = {};
  const declInjections = {};
  const mainInjections = {};
  for (const key in inject) {
    const injection = typeof inject[key] === "string" ? { injection: inject[key], order: 0 } : inject[key];
    const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
    if (match) {
      const hash = match[2];
      const name2 = match[3];
      if (hash) {
        if (name2 === "decl") {
          declInjections[key] = [injection];
        } else {
          mainInjections[key] = [injection];
        }
      } else {
        hookInjections[key] = [injection];
      }
    } else {
      mainInjections[key] = [injection];
    }
  }
  for (const module of modules) {
    if (log2) {
      checkShaderModuleDeprecations(module, coreSource, log2);
    }
    const moduleSource = getShaderModuleSource(module, stage);
    assembledSource += moduleSource;
    const injections = ((_a = module.instance) == null ? void 0 : _a.normalizedInjections[stage]) || {};
    for (const key in injections) {
      const match = /^(v|f)s:#([\w-]+)$/.exec(key);
      if (match) {
        const name2 = match[2];
        const injectionType = name2 === "decl" ? declInjections : mainInjections;
        injectionType[key] = injectionType[key] || [];
        injectionType[key].push(injections[key]);
      } else {
        hookInjections[key] = hookInjections[key] || [];
        hookInjections[key].push(injections[key]);
      }
    }
  }
  assembledSource += "// ----- MAIN SHADER SOURCE -------------------------";
  assembledSource += INJECT_SHADER_DECLARATIONS;
  assembledSource = injectShader(assembledSource, stage, declInjections);
  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
  assembledSource += coreSource;
  assembledSource = injectShader(assembledSource, stage, mainInjections);
  if (language === "glsl" && sourceVersion !== targetVersion) {
    assembledSource = transpileGLSLShader(assembledSource, stage);
  }
  return assembledSource.trim();
}
function assembleGetUniforms(modules) {
  return function getUniforms4(opts) {
    var _a;
    const uniforms = {};
    for (const module of modules) {
      const moduleUniforms = (_a = module.getUniforms) == null ? void 0 : _a.call(module, opts, uniforms);
      Object.assign(uniforms, moduleUniforms);
    }
    return uniforms;
  };
}
function getShaderNameDefine(options) {
  const { id, source: source3, stage } = options;
  const injectShaderName = id && source3.indexOf("SHADER_NAME") === -1;
  return injectShaderName ? `
#define SHADER_NAME ${id}_${stage}` : "";
}
function getApplicationDefines(defines = {}) {
  let sourceText = "";
  for (const define in defines) {
    const value = defines[define];
    if (value || Number.isFinite(value)) {
      sourceText += `#define ${define.toUpperCase()} ${defines[define]}
`;
    }
  }
  return sourceText;
}
function getShaderModuleSource(module, stage) {
  let moduleSource;
  switch (stage) {
    case "vertex":
      moduleSource = module.vs || "";
      break;
    case "fragment":
      moduleSource = module.fs || "";
      break;
    case "wgsl":
      moduleSource = module.source || "";
      break;
    default:
      assert(false);
  }
  if (!module.name) {
    throw new Error("Shader module must have a name");
  }
  const moduleName = module.name.toUpperCase().replace(/[^0-9a-z]/gi, "_");
  let source3 = `// ----- MODULE ${module.name} ---------------

`;
  if (stage !== "wgsl") {
    source3 += `#define MODULE_${moduleName}
`;
  }
  source3 += `${moduleSource}
`;
  return source3;
}

// node_modules/@luma.gl/shadertools/dist/lib/preprocessor/preprocessor.js
var IFDEF_REGEXP = /^\s*\#\s*ifdef\s*([a-zA-Z_]+)\s*$/;
var ENDIF_REGEXP = /^\s*\#\s*endif\s*$/;
function preprocess(source3, options) {
  var _a;
  const lines = source3.split("\n");
  const output = [];
  let conditional = true;
  let currentDefine = null;
  for (const line of lines) {
    const matchIf = line.match(IFDEF_REGEXP);
    const matchEnd = line.match(ENDIF_REGEXP);
    if (matchIf) {
      currentDefine = matchIf[1];
      conditional = Boolean((_a = options == null ? void 0 : options.defines) == null ? void 0 : _a[currentDefine]);
    } else if (matchEnd) {
      conditional = true;
    } else if (conditional) {
      output.push(line);
    }
  }
  return output.join("\n");
}

// node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js
var _ShaderAssembler = class _ShaderAssembler {
  constructor() {
    /** Hook functions */
    __publicField(this, "_hookFunctions", []);
    /** Shader modules */
    __publicField(this, "_defaultModules", []);
  }
  /**
   * A default shader assembler instance - the natural place to register default modules and hooks
   * @returns
   */
  static getDefaultShaderAssembler() {
    _ShaderAssembler.defaultShaderAssembler = _ShaderAssembler.defaultShaderAssembler || new _ShaderAssembler();
    return _ShaderAssembler.defaultShaderAssembler;
  }
  /**
   * Add a default module that does not have to be provided with every call to assembleShaders()
   */
  addDefaultModule(module) {
    if (!this._defaultModules.find((m2) => m2.name === (typeof module === "string" ? module : module.name))) {
      this._defaultModules.push(module);
    }
  }
  /**
   * Remove a default module
   */
  removeDefaultModule(module) {
    const moduleName = typeof module === "string" ? module : module.name;
    this._defaultModules = this._defaultModules.filter((m2) => m2.name !== moduleName);
  }
  /**
   * Register a shader hook
   * @param hook
   * @param opts
   */
  addShaderHook(hook, opts) {
    if (opts) {
      hook = Object.assign(opts, { hook });
    }
    this._hookFunctions.push(hook);
  }
  /**
   * Assemble a WGSL unified shader
   * @param platformInfo
   * @param props
   * @returns
   */
  assembleWGSLShader(props) {
    const modules = this._getModuleList(props.modules);
    const hookFunctions = this._hookFunctions;
    const { source: source3, getUniforms: getUniforms4 } = assembleWGSLShader({
      ...props,
      // @ts-expect-error
      source: props.source,
      modules,
      hookFunctions
    });
    const preprocessedSource = props.platformInfo.shaderLanguage === "wgsl" ? preprocess(source3) : source3;
    return { source: preprocessedSource, getUniforms: getUniforms4, modules };
  }
  /**
   * Assemble a pair of shaders into a single shader program
   * @param platformInfo
   * @param props
   * @returns
   */
  assembleGLSLShaderPair(props) {
    const modules = this._getModuleList(props.modules);
    const hookFunctions = this._hookFunctions;
    const assembled = assembleGLSLShaderPair({
      ...props,
      // @ts-expect-error
      vs: props.vs,
      // @ts-expect-error
      fs: props.fs,
      modules,
      hookFunctions
    });
    return { ...assembled, modules };
  }
  /**
   * Dedupe and combine with default modules
   */
  _getModuleList(appModules = []) {
    const modules = new Array(this._defaultModules.length + appModules.length);
    const seen = {};
    let count = 0;
    for (let i2 = 0, len = this._defaultModules.length; i2 < len; ++i2) {
      const module = this._defaultModules[i2];
      const name2 = module.name;
      modules[count++] = module;
      seen[name2] = true;
    }
    for (let i2 = 0, len = appModules.length; i2 < len; ++i2) {
      const module = appModules[i2];
      const name2 = module.name;
      if (!seen[name2]) {
        modules[count++] = module;
        seen[name2] = true;
      }
    }
    modules.length = count;
    initializeShaderModules(modules);
    return modules;
  }
};
/** Default ShaderAssembler instance */
__publicField(_ShaderAssembler, "defaultShaderAssembler");
var ShaderAssembler = _ShaderAssembler;

// node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js
var FS_GLES = (
  /* glsl */
  `out vec4 transform_output;
void main() {
  transform_output = vec4(0);
}`
);
var FS300 = `#version 300 es
${FS_GLES}`;
function getPassthroughFS(options) {
  const { input, inputChannels, output } = options || {};
  if (!input) {
    return FS300;
  }
  if (!inputChannels) {
    throw new Error("inputChannels");
  }
  const inputType = channelCountToType(inputChannels);
  const outputValue = convertToVec4(input, inputChannels);
  return `#version 300 es
in ${inputType} ${input};
out vec4 ${output};
void main() {
  ${output} = ${outputValue};
}`;
}
function channelCountToType(channels) {
  switch (channels) {
    case 1:
      return "float";
    case 2:
      return "vec2";
    case 3:
      return "vec3";
    case 4:
      return "vec4";
    default:
      throw new Error(`invalid channels: ${channels}`);
  }
}
function convertToVec4(variable, channels) {
  switch (channels) {
    case 1:
      return `vec4(${variable}, 0.0, 0.0, 1.0)`;
    case 2:
      return `vec4(${variable}, 0.0, 1.0)`;
    case 3:
      return `vec4(${variable}, 1.0)`;
    case 4:
      return variable;
    default:
      throw new Error(`invalid channels: ${channels}`);
  }
}

// node_modules/wgsl_reflect/wgsl_reflect.module.js
var e = class {
  constructor(e2, t2) {
    this.name = e2, this.attributes = t2, this.size = 0;
  }
  get isArray() {
    return false;
  }
  get isStruct() {
    return false;
  }
  get isTemplate() {
    return false;
  }
  get isPointer() {
    return false;
  }
  getTypeName() {
    return this.name;
  }
};
var t = class {
  constructor(e2, t2, n2) {
    this.name = e2, this.type = t2, this.attributes = n2, this.offset = 0, this.size = 0;
  }
  get isArray() {
    return this.type.isArray;
  }
  get isStruct() {
    return this.type.isStruct;
  }
  get isTemplate() {
    return this.type.isTemplate;
  }
  get align() {
    return this.type.isStruct ? this.type.align : 0;
  }
  get members() {
    return this.type.isStruct ? this.type.members : null;
  }
  get format() {
    return this.type.isArray || this.type.isTemplate ? this.type.format : null;
  }
  get count() {
    return this.type.isArray ? this.type.count : 0;
  }
  get stride() {
    return this.type.isArray ? this.type.stride : this.size;
  }
};
var n = class extends e {
  constructor(e2, t2) {
    super(e2, t2), this.members = [], this.align = 0, this.startLine = -1, this.endLine = -1, this.inUse = false;
  }
  get isStruct() {
    return true;
  }
};
var s = class extends e {
  constructor(e2, t2) {
    super(e2, t2), this.count = 0, this.stride = 0;
  }
  get isArray() {
    return true;
  }
  getTypeName() {
    return `array<${this.format.getTypeName()}, ${this.count}>`;
  }
};
var r = class extends e {
  constructor(e2, t2, n2) {
    super(e2, n2), this.format = t2;
  }
  get isPointer() {
    return true;
  }
  getTypeName() {
    return `&${this.format.getTypeName()}`;
  }
};
var a = class extends e {
  constructor(e2, t2, n2, s2) {
    super(e2, n2), this.format = t2, this.access = s2;
  }
  get isTemplate() {
    return true;
  }
  getTypeName() {
    let e2 = this.name;
    if (null !== this.format) {
      if ("vec2" === e2 || "vec3" === e2 || "vec4" === e2 || "mat2x2" === e2 || "mat2x3" === e2 || "mat2x4" === e2 || "mat3x2" === e2 || "mat3x3" === e2 || "mat3x4" === e2 || "mat4x2" === e2 || "mat4x3" === e2 || "mat4x4" === e2) {
        if ("f32" === this.format.name) return e2 += "f", e2;
        if ("i32" === this.format.name) return e2 += "i", e2;
        if ("u32" === this.format.name) return e2 += "u", e2;
        if ("bool" === this.format.name) return e2 += "b", e2;
        if ("f16" === this.format.name) return e2 += "h", e2;
      }
      e2 += `<${this.format.name}>`;
    } else if ("vec2" === e2 || "vec3" === e2 || "vec4" === e2) return e2;
    return e2;
  }
};
var i;
((e2) => {
  e2[e2.Uniform = 0] = "Uniform", e2[e2.Storage = 1] = "Storage", e2[e2.Texture = 2] = "Texture", e2[e2.Sampler = 3] = "Sampler", e2[e2.StorageTexture = 4] = "StorageTexture";
})(i || (i = {}));
var o = class {
  constructor(e2, t2, n2, s2, r2, a2, i2) {
    this.name = e2, this.type = t2, this.group = n2, this.binding = s2, this.attributes = r2, this.resourceType = a2, this.access = i2;
  }
  get isArray() {
    return this.type.isArray;
  }
  get isStruct() {
    return this.type.isStruct;
  }
  get isTemplate() {
    return this.type.isTemplate;
  }
  get size() {
    return this.type.size;
  }
  get align() {
    return this.type.isStruct ? this.type.align : 0;
  }
  get members() {
    return this.type.isStruct ? this.type.members : null;
  }
  get format() {
    return this.type.isArray || this.type.isTemplate ? this.type.format : null;
  }
  get count() {
    return this.type.isArray ? this.type.count : 0;
  }
  get stride() {
    return this.type.isArray ? this.type.stride : this.size;
  }
};
var c = class {
  constructor(e2, t2) {
    this.name = e2, this.type = t2;
  }
};
var l = class {
  constructor(e2, t2, n2, s2) {
    this.name = e2, this.type = t2, this.locationType = n2, this.location = s2, this.interpolation = null;
  }
};
var u = class {
  constructor(e2, t2, n2, s2) {
    this.name = e2, this.type = t2, this.locationType = n2, this.location = s2;
  }
};
var h = class {
  constructor(e2, t2, n2, s2) {
    this.name = e2, this.type = t2, this.attributes = n2, this.id = s2;
  }
};
var f = class {
  constructor(e2, t2, n2) {
    this.name = e2, this.type = t2, this.attributes = n2;
  }
};
var p = class {
  constructor(e2, t2 = null, n2) {
    this.stage = null, this.inputs = [], this.outputs = [], this.arguments = [], this.returnType = null, this.resources = [], this.overrides = [], this.startLine = -1, this.endLine = -1, this.inUse = false, this.calls = /* @__PURE__ */ new Set(), this.name = e2, this.stage = t2, this.attributes = n2;
  }
};
var d = class {
  constructor() {
    this.vertex = [], this.fragment = [], this.compute = [];
  }
};
function m(e2) {
  var t2 = (32768 & e2) >> 15, n2 = (31744 & e2) >> 10, s2 = 1023 & e2;
  return 0 == n2 ? (t2 ? -1 : 1) * Math.pow(2, -14) * (s2 / Math.pow(2, 10)) : 31 == n2 ? s2 ? NaN : 1 / 0 * (t2 ? -1 : 1) : (t2 ? -1 : 1) * Math.pow(2, n2 - 15) * (1 + s2 / Math.pow(2, 10));
}
var g = new Float32Array(1);
var _ = new Int32Array(g.buffer);
var x = new Uint16Array(1);
function y(e2) {
  g[0] = e2;
  const t2 = _[0], n2 = t2 >> 31 & 1;
  let s2 = t2 >> 23 & 255, r2 = 8388607 & t2;
  if (255 === s2) return x[0] = n2 << 15 | 31744 | (0 !== r2 ? 512 : 0), x[0];
  if (0 === s2) {
    if (0 === r2) return x[0] = n2 << 15, x[0];
    r2 |= 8388608;
    let e3 = 113;
    for (; !(8388608 & r2); ) r2 <<= 1, e3--;
    return s2 = 127 - e3, r2 &= 8388607, s2 > 0 ? (r2 = (r2 >> 126 - s2) + (r2 >> 127 - s2 & 1), x[0] = n2 << 15 | s2 << 10 | r2 >> 13, x[0]) : (x[0] = n2 << 15, x[0]);
  }
  return s2 = s2 - 127 + 15, s2 >= 31 ? (x[0] = n2 << 15 | 31744, x[0]) : s2 <= 0 ? s2 < -10 ? (x[0] = n2 << 15, x[0]) : (r2 = (8388608 | r2) >> 1 - s2, x[0] = n2 << 15 | r2 >> 13, x[0]) : (r2 >>= 13, x[0] = n2 << 15 | s2 << 10 | r2, x[0]);
}
var b = new Uint32Array(1);
var v = new Float32Array(b.buffer, 0, 1);
function w(e2) {
  const t2 = 112 + (e2 >> 6 & 31) << 23 | (63 & e2) << 17;
  return b[0] = t2, v[0];
}
function k(e2, t2, n2, s2, r2, a2, i2, o2, c2) {
  const l2 = s2 * (i2 >>= r2) * (a2 >>= r2) + n2 * i2 + t2 * o2;
  switch (c2) {
    case "r8unorm":
      return [I(e2, l2, "8unorm", 1)[0]];
    case "r8snorm":
      return [I(e2, l2, "8snorm", 1)[0]];
    case "r8uint":
      return [I(e2, l2, "8uint", 1)[0]];
    case "r8sint":
      return [I(e2, l2, "8sint", 1)[0]];
    case "rg8unorm": {
      const t3 = I(e2, l2, "8unorm", 2);
      return [t3[0], t3[1]];
    }
    case "rg8snorm": {
      const t3 = I(e2, l2, "8snorm", 2);
      return [t3[0], t3[1]];
    }
    case "rg8uint": {
      const t3 = I(e2, l2, "8uint", 2);
      return [t3[0], t3[1]];
    }
    case "rg8sint": {
      const t3 = I(e2, l2, "8sint", 2);
      return [t3[0], t3[1]];
    }
    case "rgba8unorm-srgb":
    case "rgba8unorm": {
      const t3 = I(e2, l2, "8unorm", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba8snorm": {
      const t3 = I(e2, l2, "8snorm", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba8uint": {
      const t3 = I(e2, l2, "8uint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba8sint": {
      const t3 = I(e2, l2, "8sint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "bgra8unorm-srgb":
    case "bgra8unorm": {
      const t3 = I(e2, l2, "8unorm", 4);
      return [t3[2], t3[1], t3[0], t3[3]];
    }
    case "r16uint":
      return [I(e2, l2, "16uint", 1)[0]];
    case "r16sint":
      return [I(e2, l2, "16sint", 1)[0]];
    case "r16float":
      return [I(e2, l2, "16float", 1)[0]];
    case "rg16uint": {
      const t3 = I(e2, l2, "16uint", 2);
      return [t3[0], t3[1]];
    }
    case "rg16sint": {
      const t3 = I(e2, l2, "16sint", 2);
      return [t3[0], t3[1]];
    }
    case "rg16float": {
      const t3 = I(e2, l2, "16float", 2);
      return [t3[0], t3[1]];
    }
    case "rgba16uint": {
      const t3 = I(e2, l2, "16uint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba16sint": {
      const t3 = I(e2, l2, "16sint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba16float": {
      const t3 = I(e2, l2, "16float", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "r32uint":
      return [I(e2, l2, "32uint", 1)[0]];
    case "r32sint":
      return [I(e2, l2, "32sint", 1)[0]];
    case "depth16unorm":
    case "depth24plus":
    case "depth24plus-stencil8":
    case "depth32float":
    case "depth32float-stencil8":
    case "r32float":
      return [I(e2, l2, "32float", 1)[0]];
    case "rg32uint": {
      const t3 = I(e2, l2, "32uint", 2);
      return [t3[0], t3[1]];
    }
    case "rg32sint": {
      const t3 = I(e2, l2, "32sint", 2);
      return [t3[0], t3[1]];
    }
    case "rg32float": {
      const t3 = I(e2, l2, "32float", 2);
      return [t3[0], t3[1]];
    }
    case "rgba32uint": {
      const t3 = I(e2, l2, "32uint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba32sint": {
      const t3 = I(e2, l2, "32sint", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rgba32float": {
      const t3 = I(e2, l2, "32float", 4);
      return [t3[0], t3[1], t3[2], t3[3]];
    }
    case "rg11b10ufloat": {
      const t3 = new Uint32Array(e2.buffer, l2, 1)[0], n3 = (4192256 & t3) >> 11, s3 = (4290772992 & t3) >> 22;
      return [w(2047 & t3), w(n3), function(e3) {
        const t4 = 112 + (e3 >> 5 & 31) << 23 | (31 & e3) << 18;
        return b[0] = t4, v[0];
      }(s3), 1];
    }
  }
  return null;
}
function I(e2, t2, n2, s2) {
  const r2 = [0, 0, 0, 0];
  for (let a2 = 0; a2 < s2; ++a2) switch (n2) {
    case "8unorm":
      r2[a2] = e2[t2] / 255, t2++;
      break;
    case "8snorm":
      r2[a2] = e2[t2] / 255 * 2 - 1, t2++;
      break;
    case "8uint":
      r2[a2] = e2[t2], t2++;
      break;
    case "8sint":
      r2[a2] = e2[t2] - 127, t2++;
      break;
    case "16uint":
      r2[a2] = e2[t2] | e2[t2 + 1] << 8, t2 += 2;
      break;
    case "16sint":
      r2[a2] = (e2[t2] | e2[t2 + 1] << 8) - 32768, t2 += 2;
      break;
    case "16float":
      r2[a2] = m(e2[t2] | e2[t2 + 1] << 8), t2 += 2;
      break;
    case "32uint":
    case "32sint":
      r2[a2] = e2[t2] | e2[t2 + 1] << 8 | e2[t2 + 2] << 16 | e2[t2 + 3] << 24, t2 += 4;
      break;
    case "32float":
      r2[a2] = new Float32Array(e2.buffer, t2, 1)[0], t2 += 4;
  }
  return r2;
}
function T(e2, t2, n2, s2, r2) {
  for (let a2 = 0; a2 < s2; ++a2) switch (n2) {
    case "8unorm":
      e2[t2] = 255 * r2[a2], t2++;
      break;
    case "8snorm":
      e2[t2] = 0.5 * (r2[a2] + 1) * 255, t2++;
      break;
    case "8uint":
      e2[t2] = r2[a2], t2++;
      break;
    case "8sint":
      e2[t2] = r2[a2] + 127, t2++;
      break;
    case "16uint":
      new Uint16Array(e2.buffer, t2, 1)[0] = r2[a2], t2 += 2;
      break;
    case "16sint":
      new Int16Array(e2.buffer, t2, 1)[0] = r2[a2], t2 += 2;
      break;
    case "16float": {
      const n3 = y(r2[a2]);
      new Uint16Array(e2.buffer, t2, 1)[0] = n3, t2 += 2;
      break;
    }
    case "32uint":
      new Uint32Array(e2.buffer, t2, 1)[0] = r2[a2], t2 += 4;
      break;
    case "32sint":
      new Int32Array(e2.buffer, t2, 1)[0] = r2[a2], t2 += 4;
      break;
    case "32float":
      new Float32Array(e2.buffer, t2, 1)[0] = r2[a2], t2 += 4;
  }
  return r2;
}
var S = { r8unorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8snorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8uint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8sint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg8unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8snorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "rgba8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8snorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, bgra8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bgra8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r16uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16float: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg16uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba16uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r32uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg32uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba32uint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32sint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32float: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rg11b10ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, stencil8: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: false, hasStencil: true, channels: 1 }, depth16unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, depth24plus: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, depthOnlyFormat: "depth32float", channels: 1 }, "depth24plus-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, depthOnlyFormat: "depth32float", channels: 1 }, depth32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, "depth32float-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, stencilOnlyFormat: "depth32float", channels: 1 }, rgb9e5ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bc1-rgba-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc1-rgba-unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc4-r-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc4-r-snorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc5-rg-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc5-rg-snorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc6h-rgb-ufloat": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc6h-rgb-float": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "eac-r11unorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-r11snorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-rg11unorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "eac-rg11snorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "astc-4x4-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-4x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x5-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-5x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x6-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-6x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x5-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x6-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x8-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-8x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x5-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x6-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x8-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x10-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-10x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x12-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 }, "astc-12x12-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 } };
var A = class _A {
  constructor() {
    this.id = _A._id++, this.line = 0;
  }
  get isAstNode() {
    return true;
  }
  get astNodeType() {
    return "";
  }
  search(e2) {
    e2(this);
  }
  searchBlock(e2, t2) {
    if (e2) {
      t2(E.instance);
      for (const n2 of e2) n2 instanceof Array ? this.searchBlock(n2, t2) : n2.search(t2);
      t2($.instance);
    }
  }
  constEvaluate(e2, t2) {
    throw new Error("Cannot evaluate node");
  }
  constEvaluateString(e2) {
    return this.constEvaluate(e2).toString();
  }
};
A._id = 0;
var E = class extends A {
};
E.instance = new E();
var $ = class extends A {
};
$.instance = new $();
var L = /* @__PURE__ */ new Set(["all", "all", "any", "select", "arrayLength", "abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "clamp", "cos", "cosh", "countLeadingZeros", "countOneBits", "countTrailingZeros", "cross", "degrees", "determinant", "distance", "dot", "dot4U8Packed", "dot4I8Packed", "exp", "exp2", "extractBits", "faceForward", "firstLeadingBit", "firstTrailingBit", "floor", "fma", "fract", "frexp", "insertBits", "inverseSqrt", "ldexp", "length", "log", "log2", "max", "min", "mix", "modf", "normalize", "pow", "quantizeToF16", "radians", "reflect", "refract", "reverseBits", "round", "saturate", "sign", "sin", "sinh", "smoothStep", "sqrt", "step", "tan", "tanh", "transpose", "trunc", "dpdx", "dpdxCoarse", "dpdxFine", "dpdy", "dpdyCoarse", "dpdyFine", "fwidth", "fwidthCoarse", "fwidthFine", "textureDimensions", "textureGather", "textureGatherCompare", "textureLoad", "textureNumLayers", "textureNumLevels", "textureNumSamples", "textureSample", "textureSampleBias", "textureSampleCompare", "textureSampleCompareLevel", "textureSampleGrad", "textureSampleLevel", "textureSampleBaseClampToEdge", "textureStore", "atomicLoad", "atomicStore", "atomicAdd", "atomicSub", "atomicMax", "atomicMin", "atomicAnd", "atomicOr", "atomicXor", "atomicExchange", "atomicCompareExchangeWeak", "pack4x8snorm", "pack4x8unorm", "pack4xI8", "pack4xU8", "pack4x8Clamp", "pack4xU8Clamp", "pack2x16snorm", "pack2x16unorm", "pack2x16float", "unpack4x8snorm", "unpack4x8unorm", "unpack4xI8", "unpack4xU8", "unpack2x16snorm", "unpack2x16unorm", "unpack2x16float", "storageBarrier", "textureBarrier", "workgroupBarrier", "workgroupUniformLoad", "subgroupAdd", "subgroupExclusiveAdd", "subgroupInclusiveAdd", "subgroupAll", "subgroupAnd", "subgroupAny", "subgroupBallot", "subgroupBroadcast", "subgroupBroadcastFirst", "subgroupElect", "subgroupMax", "subgroupMin", "subgroupMul", "subgroupExclusiveMul", "subgroupInclusiveMul", "subgroupOr", "subgroupShuffle", "subgroupShuffleDown", "subgroupShuffleUp", "subgroupShuffleXor", "subgroupXor", "quadBroadcast", "quadSwapDiagonal", "quadSwapX", "quadSwapY"]);
var C = class extends A {
  constructor() {
    super();
  }
};
var D = class extends C {
  constructor(e2, t2, n2, s2, r2, a2) {
    super(), this.calls = /* @__PURE__ */ new Set(), this.name = e2, this.args = t2, this.returnType = n2, this.body = s2, this.startLine = r2, this.endLine = a2;
  }
  get astNodeType() {
    return "function";
  }
  search(e2) {
    if (this.attributes) for (const t2 of this.attributes) e2(t2);
    e2(this);
    for (const t2 of this.args) e2(t2);
    this.searchBlock(this.body, e2);
  }
};
var N = class extends C {
  constructor(e2) {
    super(), this.expression = e2;
  }
  get astNodeType() {
    return "staticAssert";
  }
  search(e2) {
    this.expression.search(e2);
  }
};
var V = class extends C {
  constructor(e2, t2) {
    super(), this.condition = e2, this.body = t2;
  }
  get astNodeType() {
    return "while";
  }
  search(e2) {
    this.condition.search(e2), this.searchBlock(this.body, e2);
  }
};
var O = class extends C {
  constructor(e2, t2) {
    super(), this.body = e2, this.loopId = t2;
  }
  get astNodeType() {
    return "continuing";
  }
  search(e2) {
    this.searchBlock(this.body, e2);
  }
};
var B = class extends C {
  constructor(e2, t2, n2, s2) {
    super(), this.init = e2, this.condition = t2, this.increment = n2, this.body = s2;
  }
  get astNodeType() {
    return "for";
  }
  search(e2) {
    var t2, n2, s2;
    null === (t2 = this.init) || void 0 === t2 || t2.search(e2), null === (n2 = this.condition) || void 0 === n2 || n2.search(e2), null === (s2 = this.increment) || void 0 === s2 || s2.search(e2), this.searchBlock(this.body, e2);
  }
};
var F = class extends C {
  constructor(e2, t2, n2, s2, r2) {
    super(), this.attributes = null, this.name = e2, this.type = t2, this.storage = n2, this.access = s2, this.value = r2;
  }
  get astNodeType() {
    return "var";
  }
  search(e2) {
    var t2;
    e2(this), null === (t2 = this.value) || void 0 === t2 || t2.search(e2);
  }
};
var M = class extends C {
  constructor(e2, t2, n2) {
    super(), this.attributes = null, this.name = e2, this.type = t2, this.value = n2;
  }
  get astNodeType() {
    return "override";
  }
  search(e2) {
    var t2;
    null === (t2 = this.value) || void 0 === t2 || t2.search(e2);
  }
};
var U = class extends C {
  constructor(e2, t2, n2, s2, r2) {
    super(), this.attributes = null, this.name = e2, this.type = t2, this.storage = n2, this.access = s2, this.value = r2;
  }
  get astNodeType() {
    return "let";
  }
  search(e2) {
    var t2;
    e2(this), null === (t2 = this.value) || void 0 === t2 || t2.search(e2);
  }
};
var P = class extends C {
  constructor(e2, t2, n2, s2, r2) {
    super(), this.attributes = null, this.name = e2, this.type = t2, this.storage = n2, this.access = s2, this.value = r2;
  }
  get astNodeType() {
    return "const";
  }
  constEvaluate(e2, t2) {
    return this.value.constEvaluate(e2, t2);
  }
  search(e2) {
    var t2;
    e2(this), null === (t2 = this.value) || void 0 === t2 || t2.search(e2);
  }
};
var W;
var q;
var H;
var z;
((e2) => {
  e2.increment = "++", e2.decrement = "--";
})(W || (W = {})), ((e2) => {
  e2.parse = function(t2) {
    const n2 = t2;
    if ("parse" == n2) throw new Error("Invalid value for IncrementOperator");
    return e2[n2];
  };
})(W || (W = {}));
var R = class extends C {
  constructor(e2, t2) {
    super(), this.operator = e2, this.variable = t2;
  }
  get astNodeType() {
    return "increment";
  }
  search(e2) {
    this.variable.search(e2);
  }
};
((e2) => {
  e2.assign = "=", e2.addAssign = "+=", e2.subtractAssin = "-=", e2.multiplyAssign = "*=", e2.divideAssign = "/=", e2.moduloAssign = "%=", e2.andAssign = "&=", e2.orAssign = "|=", e2.xorAssign = "^=", e2.shiftLeftAssign = "<<=", e2.shiftRightAssign = ">>=";
})(q || (q = {})), ((e2) => {
  e2.parse = function(e3) {
    const t2 = e3;
    if ("parse" == t2) throw new Error("Invalid value for AssignOperator");
    return t2;
  };
})(q || (q = {}));
var G = class extends C {
  constructor(e2, t2, n2) {
    super(), this.operator = e2, this.variable = t2, this.value = n2;
  }
  get astNodeType() {
    return "assign";
  }
  search(e2) {
    this.variable.search(e2), this.value.search(e2);
  }
};
var X = class extends C {
  constructor(e2, t2) {
    super(), this.name = e2, this.args = t2;
  }
  get astNodeType() {
    return "call";
  }
  isBuiltin() {
    return L.has(this.name);
  }
  search(e2) {
    for (const t2 of this.args) t2.search(e2);
    e2(this);
  }
};
var j = class extends C {
  constructor(e2, t2) {
    super(), this.body = e2, this.continuing = t2;
  }
  get astNodeType() {
    return "loop";
  }
  search(e2) {
    var t2;
    this.searchBlock(this.body, e2), null === (t2 = this.continuing) || void 0 === t2 || t2.search(e2);
  }
};
var Z = class extends C {
  constructor(e2, t2) {
    super(), this.condition = e2, this.cases = t2;
  }
  get astNodeType() {
    return "switch";
  }
  search(e2) {
    e2(this);
    for (const t2 of this.cases) t2.search(e2);
  }
};
var Q = class extends C {
  constructor(e2, t2, n2, s2) {
    super(), this.condition = e2, this.body = t2, this.elseif = n2, this.else = s2;
  }
  get astNodeType() {
    return "if";
  }
  search(e2) {
    this.condition.search(e2), this.searchBlock(this.body, e2), this.searchBlock(this.elseif, e2), this.searchBlock(this.else, e2);
  }
};
var Y = class extends C {
  constructor(e2) {
    super(), this.value = e2;
  }
  get astNodeType() {
    return "return";
  }
  search(e2) {
    var t2;
    null === (t2 = this.value) || void 0 === t2 || t2.search(e2);
  }
};
var K = class extends C {
  constructor(e2) {
    super(), this.name = e2;
  }
  get astNodeType() {
    return "enable";
  }
};
var J = class extends C {
  constructor(e2) {
    super(), this.extensions = e2;
  }
  get astNodeType() {
    return "requires";
  }
};
var ee = class extends C {
  constructor(e2, t2) {
    super(), this.severity = e2, this.rule = t2;
  }
  get astNodeType() {
    return "diagnostic";
  }
};
var te = class extends C {
  constructor(e2, t2) {
    super(), this.name = e2, this.type = t2;
  }
  get astNodeType() {
    return "alias";
  }
};
var ne = class extends C {
  constructor() {
    super();
  }
  get astNodeType() {
    return "discard";
  }
};
var se = class extends C {
  constructor() {
    super(), this.condition = null, this.loopId = -1;
  }
  get astNodeType() {
    return "break";
  }
};
var re = class extends C {
  constructor() {
    super(), this.loopId = -1;
  }
  get astNodeType() {
    return "continue";
  }
};
var ae = class _ae extends C {
  constructor(e2) {
    super(), this.attributes = null, this.name = e2;
  }
  get astNodeType() {
    return "type";
  }
  get isStruct() {
    return false;
  }
  get isArray() {
    return false;
  }
  static maxFormatType(e2) {
    let t2 = e2[0];
    if ("f32" === t2.name) return t2;
    for (let n2 = 1; n2 < e2.length; ++n2) {
      const s2 = _ae._priority.get(t2.name);
      _ae._priority.get(e2[n2].name) < s2 && (t2 = e2[n2]);
    }
    return "x32" === t2.name ? _ae.i32 : t2;
  }
  getTypeName() {
    return this.name;
  }
};
ae.x32 = new ae("x32"), ae.f32 = new ae("f32"), ae.i32 = new ae("i32"), ae.u32 = new ae("u32"), ae.f16 = new ae("f16"), ae.bool = new ae("bool"), ae.void = new ae("void"), ae._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
var ie = class extends ae {
  constructor(e2) {
    super(e2);
  }
};
var oe = class extends ae {
  constructor(e2, t2, n2, s2) {
    super(e2), this.members = t2, this.startLine = n2, this.endLine = s2;
  }
  get astNodeType() {
    return "struct";
  }
  get isStruct() {
    return true;
  }
  getMemberIndex(e2) {
    for (let t2 = 0; t2 < this.members.length; t2++) if (this.members[t2].name == e2) return t2;
    return -1;
  }
  search(e2) {
    for (const t2 of this.members) e2(t2);
  }
};
var ce = class extends ae {
  constructor(e2, t2, n2) {
    super(e2), this.format = t2, this.access = n2;
  }
  get astNodeType() {
    return "template";
  }
  getTypeName() {
    let e2 = this.name;
    if (null !== this.format) {
      if ("vec2" === e2 || "vec3" === e2 || "vec4" === e2 || "mat2x2" === e2 || "mat2x3" === e2 || "mat2x4" === e2 || "mat3x2" === e2 || "mat3x3" === e2 || "mat3x4" === e2 || "mat4x2" === e2 || "mat4x3" === e2 || "mat4x4" === e2) {
        if ("f32" === this.format.name) return e2 += "f", e2;
        if ("i32" === this.format.name) return e2 += "i", e2;
        if ("u32" === this.format.name) return e2 += "u", e2;
        if ("bool" === this.format.name) return e2 += "b", e2;
        if ("f16" === this.format.name) return e2 += "h", e2;
      }
      e2 += `<${this.format.name}>`;
    } else if ("vec2" === e2 || "vec3" === e2 || "vec4" === e2) return e2;
    return e2;
  }
};
ce.vec2f = new ce("vec2", ae.f32, null), ce.vec3f = new ce("vec3", ae.f32, null), ce.vec4f = new ce("vec4", ae.f32, null), ce.vec2i = new ce("vec2", ae.i32, null), ce.vec3i = new ce("vec3", ae.i32, null), ce.vec4i = new ce("vec4", ae.i32, null), ce.vec2u = new ce("vec2", ae.u32, null), ce.vec3u = new ce("vec3", ae.u32, null), ce.vec4u = new ce("vec4", ae.u32, null), ce.vec2h = new ce("vec2", ae.f16, null), ce.vec3h = new ce("vec3", ae.f16, null), ce.vec4h = new ce("vec4", ae.f16, null), ce.vec2b = new ce("vec2", ae.bool, null), ce.vec3b = new ce("vec3", ae.bool, null), ce.vec4b = new ce("vec4", ae.bool, null), ce.mat2x2f = new ce("mat2x2", ae.f32, null), ce.mat2x3f = new ce("mat2x3", ae.f32, null), ce.mat2x4f = new ce("mat2x4", ae.f32, null), ce.mat3x2f = new ce("mat3x2", ae.f32, null), ce.mat3x3f = new ce("mat3x3", ae.f32, null), ce.mat3x4f = new ce("mat3x4", ae.f32, null), ce.mat4x2f = new ce("mat4x2", ae.f32, null), ce.mat4x3f = new ce("mat4x3", ae.f32, null), ce.mat4x4f = new ce("mat4x4", ae.f32, null), ce.mat2x2h = new ce("mat2x2", ae.f16, null), ce.mat2x3h = new ce("mat2x3", ae.f16, null), ce.mat2x4h = new ce("mat2x4", ae.f16, null), ce.mat3x2h = new ce("mat3x2", ae.f16, null), ce.mat3x3h = new ce("mat3x3", ae.f16, null), ce.mat3x4h = new ce("mat3x4", ae.f16, null), ce.mat4x2h = new ce("mat4x2", ae.f16, null), ce.mat4x3h = new ce("mat4x3", ae.f16, null), ce.mat4x4h = new ce("mat4x4", ae.f16, null), ce.mat2x2i = new ce("mat2x2", ae.i32, null), ce.mat2x3i = new ce("mat2x3", ae.i32, null), ce.mat2x4i = new ce("mat2x4", ae.i32, null), ce.mat3x2i = new ce("mat3x2", ae.i32, null), ce.mat3x3i = new ce("mat3x3", ae.i32, null), ce.mat3x4i = new ce("mat3x4", ae.i32, null), ce.mat4x2i = new ce("mat4x2", ae.i32, null), ce.mat4x3i = new ce("mat4x3", ae.i32, null), ce.mat4x4i = new ce("mat4x4", ae.i32, null), ce.mat2x2u = new ce("mat2x2", ae.u32, null), ce.mat2x3u = new ce("mat2x3", ae.u32, null), ce.mat2x4u = new ce("mat2x4", ae.u32, null), ce.mat3x2u = new ce("mat3x2", ae.u32, null), ce.mat3x3u = new ce("mat3x3", ae.u32, null), ce.mat3x4u = new ce("mat3x4", ae.u32, null), ce.mat4x2u = new ce("mat4x2", ae.u32, null), ce.mat4x3u = new ce("mat4x3", ae.u32, null), ce.mat4x4u = new ce("mat4x4", ae.u32, null);
var le = class extends ae {
  constructor(e2, t2, n2, s2) {
    super(e2), this.storage = t2, this.type = n2, this.access = s2;
  }
  get astNodeType() {
    return "pointer";
  }
};
var ue = class extends ae {
  constructor(e2, t2, n2, s2) {
    super(e2), this.attributes = t2, this.format = n2, this.count = s2;
  }
  get astNodeType() {
    return "array";
  }
  get isArray() {
    return true;
  }
};
var he = class extends ae {
  constructor(e2, t2, n2) {
    super(e2), this.format = t2, this.access = n2;
  }
  get astNodeType() {
    return "sampler";
  }
};
var fe = class extends A {
  constructor() {
    super(), this.postfix = null;
  }
};
var pe = class extends fe {
  constructor(e2) {
    super(), this.value = e2;
  }
  get astNodeType() {
    return "stringExpr";
  }
  toString() {
    return this.value;
  }
  constEvaluateString() {
    return this.value;
  }
};
var de = class extends fe {
  constructor(e2, t2) {
    super(), this.type = e2, this.args = t2;
  }
  get astNodeType() {
    return "createExpr";
  }
  search(e2) {
    if (e2(this), this.args) for (const t2 of this.args) t2.search(e2);
  }
  constEvaluate(e2, t2) {
    return t2 && (t2[0] = this.type), e2.evalExpression(this, e2.context);
  }
};
var me = class extends fe {
  constructor(e2, t2) {
    super(), this.cachedReturnValue = null, this.name = e2, this.args = t2;
  }
  get astNodeType() {
    return "callExpr";
  }
  setCachedReturnValue(e2) {
    this.cachedReturnValue = e2;
  }
  get isBuiltin() {
    return L.has(this.name);
  }
  constEvaluate(e2, t2) {
    return e2.evalExpression(this, e2.context);
  }
  search(e2) {
    for (const t2 of this.args) t2.search(e2);
    e2(this);
  }
};
var ge = class extends fe {
  constructor(e2) {
    super(), this.name = e2;
  }
  get astNodeType() {
    return "varExpr";
  }
  search(e2) {
    e2(this), this.postfix && this.postfix.search(e2);
  }
  constEvaluate(e2, t2) {
    return e2.evalExpression(this, e2.context);
  }
};
var _e = class extends fe {
  constructor(e2, t2) {
    super(), this.name = e2, this.initializer = t2;
  }
  get astNodeType() {
    return "constExpr";
  }
  constEvaluate(e2, t2) {
    if (this.initializer) {
      const t3 = e2.evalExpression(this.initializer, e2.context);
      return null !== t3 && this.postfix ? t3.getSubData(e2, this.postfix, e2.context) : t3;
    }
    return null;
  }
  search(e2) {
    this.initializer.search(e2);
  }
};
var xe = class extends fe {
  constructor(e2, t2) {
    super(), this.value = e2, this.type = t2;
  }
  get astNodeType() {
    return "literalExpr";
  }
  constEvaluate(e2, t2) {
    return void 0 !== t2 && (t2[0] = this.type), this.value;
  }
  get isScalar() {
    return this.value instanceof Be;
  }
  get isVector() {
    return this.value instanceof Me || this.value instanceof Ue;
  }
  get scalarValue() {
    return this.value instanceof Be ? this.value.value : (console.error("Value is not scalar."), 0);
  }
  get vectorValue() {
    return this.value instanceof Me || this.value instanceof Ue ? this.value.data : (console.error("Value is not a vector or matrix."), new Float32Array(0));
  }
};
var ye = class extends fe {
  constructor(e2, t2) {
    super(), this.type = e2, this.value = t2;
  }
  get astNodeType() {
    return "bitcastExpr";
  }
  search(e2) {
    this.value.search(e2);
  }
};
var ve = class extends fe {
  constructor(e2) {
    super(), this.index = e2;
  }
  search(e2) {
    this.index.search(e2);
  }
};
var we = class extends fe {
  constructor() {
    super();
  }
};
var ke = class extends we {
  constructor(e2, t2) {
    super(), this.operator = e2, this.right = t2;
  }
  get astNodeType() {
    return "unaryOp";
  }
  constEvaluate(e2, t2) {
    return e2.evalExpression(this, e2.context);
  }
  search(e2) {
    this.right.search(e2);
  }
};
var Ie = class extends we {
  constructor(e2, t2, n2) {
    super(), this.operator = e2, this.left = t2, this.right = n2;
  }
  get astNodeType() {
    return "binaryOp";
  }
  _getPromotedType(e2, t2) {
    return e2.name === t2.name ? e2 : "f32" === e2.name || "f32" === t2.name ? ae.f32 : "u32" === e2.name || "u32" === t2.name ? ae.u32 : ae.i32;
  }
  constEvaluate(e2, t2) {
    return e2.evalExpression(this, e2.context);
  }
  search(e2) {
    this.left.search(e2), this.right.search(e2);
  }
};
var Te = class extends A {
  constructor(e2) {
    super(), this.body = e2;
  }
  search(e2) {
    e2(this), this.searchBlock(this.body, e2);
  }
};
var Se = class extends fe {
  constructor() {
    super();
  }
  get astNodeType() {
    return "default";
  }
};
var Ae = class extends Te {
  constructor(e2, t2) {
    super(t2), this.selectors = e2;
  }
  get astNodeType() {
    return "case";
  }
  search(e2) {
    this.searchBlock(this.body, e2);
  }
};
var Ee = class extends Te {
  constructor(e2) {
    super(e2);
  }
  get astNodeType() {
    return "default";
  }
  search(e2) {
    this.searchBlock(this.body, e2);
  }
};
var $e = class extends A {
  constructor(e2, t2, n2) {
    super(), this.name = e2, this.type = t2, this.attributes = n2;
  }
  get astNodeType() {
    return "argument";
  }
};
var Le = class extends A {
  constructor(e2, t2) {
    super(), this.condition = e2, this.body = t2;
  }
  get astNodeType() {
    return "elseif";
  }
  search(e2) {
    this.condition.search(e2), this.searchBlock(this.body, e2);
  }
};
var Ce = class extends A {
  constructor(e2, t2, n2) {
    super(), this.name = e2, this.type = t2, this.attributes = n2;
  }
  get astNodeType() {
    return "member";
  }
};
var De = class extends A {
  constructor(e2, t2) {
    super(), this.name = e2, this.value = t2;
  }
  get astNodeType() {
    return "attribute";
  }
};
var Ne = class _Ne {
  constructor(e2, t2) {
    this.parent = null, this.typeInfo = e2, this.parent = t2, this.id = _Ne._id++;
  }
  clone() {
    throw `Clone: Not implemented for ${this.constructor.name}`;
  }
  setDataValue(e2, t2, n2, s2) {
    console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);
  }
  getSubData(e2, t2, n2) {
    return console.error(`GetDataValue: Not implemented for ${this.constructor.name}`), null;
  }
  toString() {
    return `<${this.typeInfo.getTypeName()}>`;
  }
};
Ne._id = 0;
var Ve = class extends Ne {
  constructor() {
    super(new e("void", null), null);
  }
  toString() {
    return "void";
  }
};
Ve.void = new Ve();
var Oe = class extends Ne {
  constructor(e2) {
    super(new r("pointer", e2.typeInfo, null), null), this.reference = e2;
  }
  clone() {
    return this;
  }
  setDataValue(e2, t2, n2, s2) {
    this.reference.setDataValue(e2, t2, n2, s2);
  }
  getSubData(e2, t2, n2) {
    return t2 ? this.reference.getSubData(e2, t2, n2) : this;
  }
  toString() {
    return `&${this.reference.toString()}`;
  }
};
var Be = class _Be extends Ne {
  constructor(e2, t2, n2 = null) {
    super(t2, n2), e2 instanceof Int32Array || e2 instanceof Uint32Array || e2 instanceof Float32Array ? this.data = e2 : "x32" === this.typeInfo.name ? e2 - Math.floor(e2) !== 0 ? this.data = new Float32Array([e2]) : this.data = e2 >= 0 ? new Uint32Array([e2]) : new Int32Array([e2]) : "i32" === this.typeInfo.name || "bool" === this.typeInfo.name ? this.data = new Int32Array([e2]) : "u32" === this.typeInfo.name ? this.data = new Uint32Array([e2]) : "f32" === this.typeInfo.name || "f16" === this.typeInfo.name ? this.data = new Float32Array([e2]) : console.error("ScalarData2: Invalid type", t2);
  }
  clone() {
    if (this.data instanceof Float32Array) return new _Be(new Float32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Int32Array) return new _Be(new Int32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Uint32Array) return new _Be(new Uint32Array(this.data), this.typeInfo, null);
    throw "ScalarData: Invalid data type";
  }
  get value() {
    return this.data[0];
  }
  set value(e2) {
    this.data[0] = e2;
  }
  setDataValue(e2, t2, n2, s2) {
    if (n2) return void console.error("SetDataValue: Scalar data does not support postfix", n2);
    if (!(t2 instanceof _Be)) return void console.error("SetDataValue: Invalid value", t2);
    let r2 = t2.data[0];
    "i32" === this.typeInfo.name || "u32" === this.typeInfo.name ? r2 = Math.floor(r2) : "bool" === this.typeInfo.name && (r2 = r2 ? 1 : 0), this.data[0] = r2;
  }
  getSubData(e2, t2, n2) {
    return t2 ? (console.error("getSubData: Scalar data does not support postfix", t2), null) : this;
  }
  toString() {
    return `${this.value}`;
  }
};
function Fe(e2, t2, n2) {
  const s2 = t2.length;
  return 2 === s2 ? "f32" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec2f")) : "i32" === n2 || "bool" === n2 ? new Me(new Int32Array(t2), e2.getTypeInfo("vec2i")) : "u32" === n2 ? new Me(new Uint32Array(t2), e2.getTypeInfo("vec2u")) : "f16" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec2h")) : (console.error(`getSubData: Unknown format ${n2}`), null) : 3 === s2 ? "f32" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec3f")) : "i32" === n2 || "bool" === n2 ? new Me(new Int32Array(t2), e2.getTypeInfo("vec3i")) : "u32" === n2 ? new Me(new Uint32Array(t2), e2.getTypeInfo("vec3u")) : "f16" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec3h")) : (console.error(`getSubData: Unknown format ${n2}`), null) : 4 === s2 ? "f32" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec4f")) : "i32" === n2 || "bool" === n2 ? new Me(new Int32Array(t2), e2.getTypeInfo("vec4i")) : "u32" === n2 ? new Me(new Uint32Array(t2), e2.getTypeInfo("vec4u")) : "f16" === n2 ? new Me(new Float32Array(t2), e2.getTypeInfo("vec4h")) : (console.error(`getSubData: Unknown format ${n2}`), null) : (console.error(`getSubData: Invalid vector size ${t2.length}`), null);
}
var Me = class _Me extends Ne {
  constructor(e2, t2, n2 = null) {
    if (super(t2, n2), e2 instanceof Float32Array || e2 instanceof Uint32Array || e2 instanceof Int32Array) this.data = e2;
    else {
      const t3 = this.typeInfo.name;
      "vec2f" === t3 || "vec3f" === t3 || "vec4f" === t3 ? this.data = new Float32Array(e2) : "vec2i" === t3 || "vec3i" === t3 || "vec4i" === t3 ? this.data = new Int32Array(e2) : "vec2u" === t3 || "vec3u" === t3 || "vec4u" === t3 ? this.data = new Uint32Array(e2) : "vec2h" === t3 || "vec3h" === t3 || "vec4h" === t3 ? this.data = new Float32Array(e2) : "vec2b" === t3 || "vec3b" === t3 || "vec4b" === t3 ? this.data = new Int32Array(e2) : "vec2" === t3 || "vec3" === t3 || "vec4" === t3 ? this.data = new Float32Array(e2) : console.error(`VectorData: Invalid type ${t3}`);
    }
  }
  clone() {
    if (this.data instanceof Float32Array) return new _Me(new Float32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Int32Array) return new _Me(new Int32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Uint32Array) return new _Me(new Uint32Array(this.data), this.typeInfo, null);
    throw "VectorData: Invalid data type";
  }
  setDataValue(e2, t2, n2, s2) {
    n2 instanceof pe ? console.error("TODO: Set vector postfix") : t2 instanceof _Me ? this.data = t2.data : console.error("SetDataValue: Invalid value", t2);
  }
  getSubData(e2, t2, n2) {
    if (null === t2) return this;
    let s2 = e2.getTypeInfo("f32");
    if (this.typeInfo instanceof a) s2 = this.typeInfo.format || s2;
    else {
      const t3 = this.typeInfo.name;
      "vec2f" === t3 || "vec3f" === t3 || "vec4f" === t3 ? s2 = e2.getTypeInfo("f32") : "vec2i" === t3 || "vec3i" === t3 || "vec4i" === t3 ? s2 = e2.getTypeInfo("i32") : "vec2b" === t3 || "vec3b" === t3 || "vec4b" === t3 ? s2 = e2.getTypeInfo("bool") : "vec2u" === t3 || "vec3u" === t3 || "vec4u" === t3 ? s2 = e2.getTypeInfo("u32") : "vec2h" === t3 || "vec3h" === t3 || "vec4h" === t3 ? s2 = e2.getTypeInfo("f16") : console.error(`GetSubData: Unknown type ${t3}`);
    }
    let r2 = this;
    for (; null !== t2 && null !== r2; ) {
      if (t2 instanceof ve) {
        const a2 = t2.index;
        let i2 = -1;
        if (a2 instanceof xe) {
          if (!(a2.value instanceof Be)) return console.error(`GetSubData: Invalid array index ${a2.value}`), null;
          i2 = a2.value.value;
        } else {
          const t3 = e2.evalExpression(a2, n2);
          if (!(t3 instanceof Be)) return console.error("GetSubData: Unknown index type", a2), null;
          i2 = t3.value;
        }
        if (i2 < 0 || i2 >= r2.data.length) return console.error("GetSubData: Index out of range", i2), null;
        if (r2.data instanceof Float32Array) {
          const e3 = new Float32Array(r2.data.buffer, r2.data.byteOffset + 4 * i2, 1);
          return new Be(e3, s2);
        }
        if (r2.data instanceof Int32Array) {
          const e3 = new Int32Array(r2.data.buffer, r2.data.byteOffset + 4 * i2, 1);
          return new Be(e3, s2);
        }
        if (r2.data instanceof Uint32Array) {
          const e3 = new Uint32Array(r2.data.buffer, r2.data.byteOffset + 4 * i2, 1);
          return new Be(e3, s2);
        }
        throw "GetSubData: Invalid data type";
      }
      if (!(t2 instanceof pe)) return console.error("GetSubData: Unknown postfix", t2), null;
      {
        const n3 = t2.value.toLowerCase();
        if (1 === n3.length) {
          let e3 = 0;
          if ("x" === n3 || "r" === n3) e3 = 0;
          else if ("y" === n3 || "g" === n3) e3 = 1;
          else if ("z" === n3 || "b" === n3) e3 = 2;
          else {
            if ("w" !== n3 && "a" !== n3) return console.error(`GetSubData: Unknown member ${n3}`), null;
            e3 = 3;
          }
          if (this.data instanceof Float32Array) {
            let t3 = new Float32Array(this.data.buffer, this.data.byteOffset + 4 * e3, 1);
            return new Be(t3, s2, this);
          }
          if (this.data instanceof Int32Array) {
            let t3 = new Int32Array(this.data.buffer, this.data.byteOffset + 4 * e3, 1);
            return new Be(t3, s2, this);
          }
          if (this.data instanceof Uint32Array) {
            let t3 = new Uint32Array(this.data.buffer, this.data.byteOffset + 4 * e3, 1);
            return new Be(t3, s2, this);
          }
        }
        const a2 = [];
        for (const e3 of n3) "x" === e3 || "r" === e3 ? a2.push(this.data[0]) : "y" === e3 || "g" === e3 ? a2.push(this.data[1]) : "z" === e3 || "b" === e3 ? a2.push(this.data[2]) : "w" === e3 || "a" === e3 ? a2.push(this.data[3]) : console.error(`GetDataValue: Unknown member ${e3}`);
        r2 = Fe(e2, a2, s2.name);
      }
      t2 = t2.postfix;
    }
    return r2;
  }
  toString() {
    let e2 = `${this.data[0]}`;
    for (let t2 = 1; t2 < this.data.length; ++t2) e2 += `, ${this.data[t2]}`;
    return e2;
  }
};
var Ue = class _Ue extends Ne {
  constructor(e2, t2, n2 = null) {
    super(t2, n2), e2 instanceof Float32Array ? this.data = e2 : this.data = new Float32Array(e2);
  }
  clone() {
    return new _Ue(new Float32Array(this.data), this.typeInfo, null);
  }
  setDataValue(e2, t2, n2, s2) {
    n2 instanceof pe ? console.error("TODO: Set matrix postfix") : t2 instanceof _Ue ? this.data = t2.data : console.error("SetDataValue: Invalid value", t2);
  }
  getSubData(e2, t2, n2) {
    if (null === t2) return this;
    const s2 = this.typeInfo.name;
    if (e2.getTypeInfo("f32"), this.typeInfo instanceof a) this.typeInfo.format;
    else if (s2.endsWith("f")) e2.getTypeInfo("f32");
    else if (s2.endsWith("i")) e2.getTypeInfo("i32");
    else if (s2.endsWith("u")) e2.getTypeInfo("u32");
    else {
      if (!s2.endsWith("h")) return console.error(`GetDataValue: Unknown type ${s2}`), null;
      e2.getTypeInfo("f16");
    }
    if (t2 instanceof ve) {
      const r2 = t2.index;
      let a2 = -1;
      if (r2 instanceof xe) {
        if (!(r2.value instanceof Be)) return console.error(`GetDataValue: Invalid array index ${r2.value}`), null;
        a2 = r2.value.value;
      } else {
        const t3 = e2.evalExpression(r2, n2);
        if (!(t3 instanceof Be)) return console.error("GetDataValue: Unknown index type", r2), null;
        a2 = t3.value;
      }
      if (a2 < 0 || a2 >= this.data.length) return console.error("GetDataValue: Index out of range", a2), null;
      const i2 = s2.endsWith("h") ? "h" : "f";
      let o2;
      if ("mat2x2" === s2 || "mat2x2f" === s2 || "mat2x2h" === s2 || "mat3x2" === s2 || "mat3x2f" === s2 || "mat3x2h" === s2 || "mat4x2" === s2 || "mat4x2f" === s2 || "mat4x2h" === s2) o2 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 2 * a2 * 4, 2), e2.getTypeInfo(`vec2${i2}`));
      else if ("mat2x3" === s2 || "mat2x3f" === s2 || "mat2x3h" === s2 || "mat3x3" === s2 || "mat3x3f" === s2 || "mat3x3h" === s2 || "mat4x3" === s2 || "mat4x3f" === s2 || "mat4x3h" === s2) o2 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 3 * a2 * 4, 3), e2.getTypeInfo(`vec3${i2}`));
      else {
        if ("mat2x4" !== s2 && "mat2x4f" !== s2 && "mat2x4h" !== s2 && "mat3x4" !== s2 && "mat3x4f" !== s2 && "mat3x4h" !== s2 && "mat4x4" !== s2 && "mat4x4f" !== s2 && "mat4x4h" !== s2) return console.error(`GetDataValue: Unknown type ${s2}`), null;
        o2 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 4 * a2 * 4, 4), e2.getTypeInfo(`vec4${i2}`));
      }
      return t2.postfix ? o2.getSubData(e2, t2.postfix, n2) : o2;
    }
    return console.error("GetDataValue: Invalid postfix", t2), null;
  }
  toString() {
    let e2 = `${this.data[0]}`;
    for (let t2 = 1; t2 < this.data.length; ++t2) e2 += `, ${this.data[t2]}`;
    return e2;
  }
};
var Pe = class _Pe extends Ne {
  constructor(e2, t2, n2 = 0, s2 = null) {
    super(t2, s2), this.buffer = e2 instanceof ArrayBuffer ? e2 : e2.buffer, this.offset = n2;
  }
  clone() {
    const e2 = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));
    return new _Pe(e2.buffer, this.typeInfo, 0, null);
  }
  setDataValue(t2, r2, a2, i2) {
    if (null === r2) return void console.log("setDataValue: NULL data.");
    let o2 = this.offset, c2 = this.typeInfo;
    for (; a2; ) {
      if (a2 instanceof ve) if (c2 instanceof s) {
        const e2 = a2.index;
        if (e2 instanceof xe) {
          if (!(e2.value instanceof Be)) return void console.error(`SetDataValue: Invalid index type ${e2.value}`);
          o2 += e2.value.value * c2.stride;
        } else {
          const n2 = t2.evalExpression(e2, i2);
          if (!(n2 instanceof Be)) return void console.error("SetDataValue: Unknown index type", e2);
          o2 += n2.value * c2.stride;
        }
        c2 = c2.format;
      } else console.error(`SetDataValue: Type ${c2.getTypeName()} is not an array`);
      else {
        if (!(a2 instanceof pe)) return void console.error("SetDataValue: Unknown postfix type", a2);
        {
          const t3 = a2.value;
          if (c2 instanceof n) {
            let e2 = false;
            for (const n2 of c2.members) if (n2.name === t3) {
              o2 += n2.offset, c2 = n2.type, e2 = true;
              break;
            }
            if (!e2) return void console.error(`SetDataValue: Member ${t3} not found`);
          } else if (c2 instanceof e) {
            const e2 = c2.getTypeName();
            let n2 = 0;
            if ("x" === t3 || "r" === t3) n2 = 0;
            else if ("y" === t3 || "g" === t3) n2 = 1;
            else if ("z" === t3 || "b" === t3) n2 = 2;
            else {
              if ("w" !== t3 && "a" !== t3) return void console.error(`SetDataValue: Unknown member ${t3}`);
              n2 = 3;
            }
            if (!(r2 instanceof Be)) return void console.error("SetDataValue: Invalid value", r2);
            const s2 = r2.value;
            return "vec2f" === e2 ? void (new Float32Array(this.buffer, o2, 2)[n2] = s2) : "vec3f" === e2 ? void (new Float32Array(this.buffer, o2, 3)[n2] = s2) : "vec4f" === e2 ? void (new Float32Array(this.buffer, o2, 4)[n2] = s2) : "vec2i" === e2 ? void (new Int32Array(this.buffer, o2, 2)[n2] = s2) : "vec3i" === e2 ? void (new Int32Array(this.buffer, o2, 3)[n2] = s2) : "vec4i" === e2 ? void (new Int32Array(this.buffer, o2, 4)[n2] = s2) : "vec2u" === e2 ? void (new Uint32Array(this.buffer, o2, 2)[n2] = s2) : "vec3u" === e2 ? void (new Uint32Array(this.buffer, o2, 3)[n2] = s2) : "vec4u" === e2 ? void (new Uint32Array(this.buffer, o2, 4)[n2] = s2) : void console.error(`SetDataValue: Type ${e2} is not a struct`);
          }
        }
      }
      a2 = a2.postfix;
    }
    this.setData(t2, r2, c2, o2, i2);
  }
  setData(e2, t2, n2, s2, r2) {
    const a2 = n2.getTypeName();
    if ("f32" !== a2 && "f16" !== a2) if ("i32" !== a2 && "atomic<i32>" !== a2 && "x32" !== a2) if ("u32" !== a2 && "atomic<u32>" !== a2) if ("bool" !== a2) {
      if ("vec2f" === a2 || "vec2h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 2);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1]) : (e3[0] = t2[0], e3[1] = t2[1]));
      }
      if ("vec3f" === a2 || "vec3h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 3);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2]));
      }
      if ("vec4f" === a2 || "vec4h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 4);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3]));
      }
      if ("vec2i" === a2) {
        const e3 = new Int32Array(this.buffer, s2, 2);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1]) : (e3[0] = t2[0], e3[1] = t2[1]));
      }
      if ("vec3i" === a2) {
        const e3 = new Int32Array(this.buffer, s2, 3);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2]));
      }
      if ("vec4i" === a2) {
        const e3 = new Int32Array(this.buffer, s2, 4);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3]));
      }
      if ("vec2u" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 2);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1]) : (e3[0] = t2[0], e3[1] = t2[1]));
      }
      if ("vec3u" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 3);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2]));
      }
      if ("vec4u" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 4);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3]));
      }
      if ("vec2b" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 2);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1]) : (e3[0] = t2[0], e3[1] = t2[1]));
      }
      if ("vec3b" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 3);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2]));
      }
      if ("vec4b" === a2) {
        const e3 = new Uint32Array(this.buffer, s2, 4);
        return void (t2 instanceof Me ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3]));
      }
      if ("mat2x2f" === a2 || "mat2x2h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 4);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3]));
      }
      if ("mat2x3f" === a2 || "mat2x3h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 6);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5]));
      }
      if ("mat2x4f" === a2 || "mat2x4h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 8);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7]));
      }
      if ("mat3x2f" === a2 || "mat3x2h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 6);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5]));
      }
      if ("mat3x3f" === a2 || "mat3x3h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 9);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7], e3[8] = t2.data[8]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7], e3[8] = t2[8]));
      }
      if ("mat3x4f" === a2 || "mat3x4h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 12);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7], e3[8] = t2.data[8], e3[9] = t2.data[9], e3[10] = t2.data[10], e3[11] = t2.data[11]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7], e3[8] = t2[8], e3[9] = t2[9], e3[10] = t2[10], e3[11] = t2[11]));
      }
      if ("mat4x2f" === a2 || "mat4x2h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 8);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7]));
      }
      if ("mat4x3f" === a2 || "mat4x3h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 12);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7], e3[8] = t2.data[8], e3[9] = t2.data[9], e3[10] = t2.data[10], e3[11] = t2.data[11]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7], e3[8] = t2[8], e3[9] = t2[9], e3[10] = t2[10], e3[11] = t2[11]));
      }
      if ("mat4x4f" === a2 || "mat4x4h" === a2) {
        const e3 = new Float32Array(this.buffer, s2, 16);
        return void (t2 instanceof Ue ? (e3[0] = t2.data[0], e3[1] = t2.data[1], e3[2] = t2.data[2], e3[3] = t2.data[3], e3[4] = t2.data[4], e3[5] = t2.data[5], e3[6] = t2.data[6], e3[7] = t2.data[7], e3[8] = t2.data[8], e3[9] = t2.data[9], e3[10] = t2.data[10], e3[11] = t2.data[11], e3[12] = t2.data[12], e3[13] = t2.data[13], e3[14] = t2.data[14], e3[15] = t2.data[15]) : (e3[0] = t2[0], e3[1] = t2[1], e3[2] = t2[2], e3[3] = t2[3], e3[4] = t2[4], e3[5] = t2[5], e3[6] = t2[6], e3[7] = t2[7], e3[8] = t2[8], e3[9] = t2[9], e3[10] = t2[10], e3[11] = t2[11], e3[12] = t2[12], e3[13] = t2[13], e3[14] = t2[14], e3[15] = t2[15]));
      }
      if (t2 instanceof _Pe) {
        if (n2 === t2.typeInfo) {
          return void new Uint8Array(this.buffer, s2, t2.buffer.byteLength).set(new Uint8Array(t2.buffer));
        }
        console.error("SetDataValue: Type mismatch", a2, t2.typeInfo.getTypeName());
      } else console.error(`SetData: Unknown type ${a2}`);
    } else t2 instanceof Be && (new Int32Array(this.buffer, s2, 1)[0] = t2.value);
    else t2 instanceof Be && (new Uint32Array(this.buffer, s2, 1)[0] = t2.value);
    else t2 instanceof Be && (new Int32Array(this.buffer, s2, 1)[0] = t2.value);
    else t2 instanceof Be && (new Float32Array(this.buffer, s2, 1)[0] = t2.value);
  }
  getSubData(t2, r2, i2) {
    var o2, c2, l2;
    if (null === r2) return this;
    let u2 = this.offset, h2 = this.typeInfo;
    for (; r2; ) {
      if (r2 instanceof ve) {
        const e2 = r2.index, n2 = e2 instanceof fe ? t2.evalExpression(e2, i2) : e2;
        let a2 = 0;
        if (n2 instanceof Be ? a2 = n2.value : "number" == typeof n2 ? a2 = n2 : console.error("GetDataValue: Invalid index type", e2), h2 instanceof s) u2 += a2 * h2.stride, h2 = h2.format;
        else {
          const e3 = h2.getTypeName();
          "mat4x4" === e3 || "mat4x4f" === e3 || "mat4x4h" === e3 ? (u2 += 16 * a2, h2 = t2.getTypeInfo("vec4f")) : console.error(`getDataValue: Type ${h2.getTypeName()} is not an array`);
        }
      } else {
        if (!(r2 instanceof pe)) return console.error("GetDataValue: Unknown postfix type", r2), null;
        {
          const s2 = r2.value;
          if (h2 instanceof n) {
            let e2 = false;
            for (const t3 of h2.members) if (t3.name === s2) {
              u2 += t3.offset, h2 = t3.type, e2 = true;
              break;
            }
            if (!e2) return console.error(`GetDataValue: Member ${s2} not found`), null;
          } else if (h2 instanceof e) {
            const e2 = h2.getTypeName();
            if ("vec2f" === e2 || "vec3f" === e2 || "vec4f" === e2 || "vec2i" === e2 || "vec3i" === e2 || "vec4i" === e2 || "vec2u" === e2 || "vec3u" === e2 || "vec4u" === e2 || "vec2b" === e2 || "vec3b" === e2 || "vec4b" === e2 || "vec2h" === e2 || "vec3h" === e2 || "vec4h" === e2 || "vec2" === e2 || "vec3" === e2 || "vec4" === e2) {
              if (s2.length > 0 && s2.length < 5) {
                let n2 = "f";
                const r3 = [];
                for (let a2 = 0; a2 < s2.length; ++a2) {
                  const i3 = s2[a2].toLowerCase();
                  let o3 = 0;
                  if ("x" === i3 || "r" === i3) o3 = 0;
                  else if ("y" === i3 || "g" === i3) o3 = 1;
                  else if ("z" === i3 || "b" === i3) o3 = 2;
                  else {
                    if ("w" !== i3 && "a" !== i3) return console.error(`Unknown member ${s2}`), null;
                    o3 = 3;
                  }
                  if (1 === s2.length) {
                    if (e2.endsWith("f")) return this.buffer.byteLength < u2 + 4 * o3 + 4 ? (console.log("Insufficient buffer data"), null) : new Be(new Float32Array(this.buffer, u2 + 4 * o3, 1), t2.getTypeInfo("f32"), this);
                    if (e2.endsWith("h")) return new Be(new Float32Array(this.buffer, u2 + 4 * o3, 1), t2.getTypeInfo("f16"), this);
                    if (e2.endsWith("i")) return new Be(new Int32Array(this.buffer, u2 + 4 * o3, 1), t2.getTypeInfo("i32"), this);
                    if (e2.endsWith("b")) return new Be(new Int32Array(this.buffer, u2 + 4 * o3, 1), t2.getTypeInfo("bool"), this);
                    if (e2.endsWith("u")) return new Be(new Uint32Array(this.buffer, u2 + 4 * o3, 1), t2.getTypeInfo("i32"), this);
                  }
                  if ("vec2f" === e2) r3.push(new Float32Array(this.buffer, u2, 2)[o3]);
                  else if ("vec3f" === e2) {
                    if (u2 + 12 >= this.buffer.byteLength) return console.log("Insufficient buffer data"), null;
                    const e3 = new Float32Array(this.buffer, u2, 3);
                    r3.push(e3[o3]);
                  } else if ("vec4f" === e2) r3.push(new Float32Array(this.buffer, u2, 4)[o3]);
                  else if ("vec2i" === e2) n2 = "i", r3.push(new Int32Array(this.buffer, u2, 2)[o3]);
                  else if ("vec3i" === e2) n2 = "i", r3.push(new Int32Array(this.buffer, u2, 3)[o3]);
                  else if ("vec4i" === e2) n2 = "i", r3.push(new Int32Array(this.buffer, u2, 4)[o3]);
                  else if ("vec2u" === e2) {
                    n2 = "u";
                    const e3 = new Uint32Array(this.buffer, u2, 2);
                    r3.push(e3[o3]);
                  } else "vec3u" === e2 ? (n2 = "u", r3.push(new Uint32Array(this.buffer, u2, 3)[o3])) : "vec4u" === e2 && (n2 = "u", r3.push(new Uint32Array(this.buffer, u2, 4)[o3]));
                }
                return 2 === r3.length ? h2 = t2.getTypeInfo(`vec2${n2}`) : 3 === r3.length ? h2 = t2.getTypeInfo(`vec3${n2}`) : 4 === r3.length ? h2 = t2.getTypeInfo(`vec4${n2}`) : console.error(`GetDataValue: Invalid vector length ${r3.length}`), new Me(r3, h2, null);
              }
              return console.error(`GetDataValue: Unknown member ${s2}`), null;
            }
            return console.error(`GetDataValue: Type ${e2} is not a struct`), null;
          }
        }
      }
      r2 = r2.postfix;
    }
    const f2 = h2.getTypeName();
    return "f32" === f2 ? new Be(new Float32Array(this.buffer, u2, 1), h2, this) : "i32" === f2 ? new Be(new Int32Array(this.buffer, u2, 1), h2, this) : "u32" === f2 ? new Be(new Uint32Array(this.buffer, u2, 1), h2, this) : "vec2f" === f2 ? new Me(new Float32Array(this.buffer, u2, 2), h2, this) : "vec3f" === f2 ? new Me(new Float32Array(this.buffer, u2, 3), h2, this) : "vec4f" === f2 ? new Me(new Float32Array(this.buffer, u2, 4), h2, this) : "vec2i" === f2 ? new Me(new Int32Array(this.buffer, u2, 2), h2, this) : "vec3i" === f2 ? new Me(new Int32Array(this.buffer, u2, 3), h2, this) : "vec4i" === f2 ? new Me(new Int32Array(this.buffer, u2, 4), h2, this) : "vec2u" === f2 ? new Me(new Uint32Array(this.buffer, u2, 2), h2, this) : "vec3u" === f2 ? new Me(new Uint32Array(this.buffer, u2, 3), h2, this) : "vec4u" === f2 ? new Me(new Uint32Array(this.buffer, u2, 4), h2, this) : h2 instanceof a && "atomic" === h2.name ? "u32" === (null === (o2 = h2.format) || void 0 === o2 ? void 0 : o2.name) ? new Be(new Uint32Array(this.buffer, u2, 1)[0], h2.format, this) : "i32" === (null === (c2 = h2.format) || void 0 === c2 ? void 0 : c2.name) ? new Be(new Int32Array(this.buffer, u2, 1)[0], h2.format, this) : (console.error(`GetDataValue: Invalid atomic format ${null === (l2 = h2.format) || void 0 === l2 ? void 0 : l2.name}`), null) : new _Pe(this.buffer, h2, u2, this);
  }
  toString() {
    let e2 = "";
    if (this.typeInfo instanceof s) if ("f32" === this.typeInfo.format.name) {
      const t2 = new Float32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}`;
      for (let n2 = 1; n2 < t2.length; ++n2) e2 += `, ${t2[n2]}`;
    } else if ("i32" === this.typeInfo.format.name) {
      const t2 = new Int32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}`;
      for (let n2 = 1; n2 < t2.length; ++n2) e2 += `, ${t2[n2]}`;
    } else if ("u32" === this.typeInfo.format.name) {
      const t2 = new Uint32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}`;
      for (let n2 = 1; n2 < t2.length; ++n2) e2 += `, ${t2[n2]}`;
    } else if ("vec2f" === this.typeInfo.format.name) {
      const t2 = new Float32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}, ${t2[1]}]`;
      for (let n2 = 1; n2 < t2.length / 2; ++n2) e2 += `, [${t2[2 * n2]}, ${t2[2 * n2 + 1]}]`;
    } else if ("vec3f" === this.typeInfo.format.name) {
      const t2 = new Float32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}, ${t2[1]}, ${t2[2]}]`;
      for (let n2 = 4; n2 < t2.length; n2 += 4) e2 += `, [${t2[n2]}, ${t2[n2 + 1]}, ${t2[n2 + 2]}]`;
    } else if ("vec4f" === this.typeInfo.format.name) {
      const t2 = new Float32Array(this.buffer, this.offset);
      e2 = `[${t2[0]}, ${t2[1]}, ${t2[2]}, ${t2[3]}]`;
      for (let n2 = 4; n2 < t2.length; n2 += 4) e2 += `, [${t2[n2]}, ${t2[n2 + 1]}, ${t2[n2 + 2]}, ${t2[n2 + 3]}]`;
    } else e2 = "[...]";
    else this.typeInfo instanceof n ? e2 += "{...}" : e2 = "[...]";
    return e2;
  }
};
var We = class _We extends Ne {
  constructor(e2, t2, n2, s2) {
    super(t2, null), this.data = e2, this.descriptor = n2, this.view = s2;
  }
  clone() {
    return new _We(this.data, this.typeInfo, this.descriptor, this.view);
  }
  get width() {
    var e2, t2;
    const n2 = this.descriptor.size;
    return n2 instanceof Array && n2.length > 0 ? null !== (e2 = n2[0]) && void 0 !== e2 ? e2 : 0 : n2 instanceof Object && null !== (t2 = n2.width) && void 0 !== t2 ? t2 : 0;
  }
  get height() {
    var e2, t2;
    const n2 = this.descriptor.size;
    return n2 instanceof Array && n2.length > 1 ? null !== (e2 = n2[1]) && void 0 !== e2 ? e2 : 0 : n2 instanceof Object && null !== (t2 = n2.height) && void 0 !== t2 ? t2 : 0;
  }
  get depthOrArrayLayers() {
    var e2, t2;
    const n2 = this.descriptor.size;
    return n2 instanceof Array && n2.length > 2 ? null !== (e2 = n2[2]) && void 0 !== e2 ? e2 : 0 : n2 instanceof Object && null !== (t2 = n2.depthOrArrayLayers) && void 0 !== t2 ? t2 : 0;
  }
  get format() {
    var e2;
    return this.descriptor && null !== (e2 = this.descriptor.format) && void 0 !== e2 ? e2 : "rgba8unorm";
  }
  get sampleCount() {
    var e2;
    return this.descriptor && null !== (e2 = this.descriptor.sampleCount) && void 0 !== e2 ? e2 : 1;
  }
  get mipLevelCount() {
    var e2;
    return this.descriptor && null !== (e2 = this.descriptor.mipLevelCount) && void 0 !== e2 ? e2 : 1;
  }
  get dimension() {
    var e2;
    return this.descriptor && null !== (e2 = this.descriptor.dimension) && void 0 !== e2 ? e2 : "2d";
  }
  getMipLevelSize(e2) {
    if (e2 >= this.mipLevelCount) return [0, 0, 0];
    const t2 = [this.width, this.height, this.depthOrArrayLayers];
    for (let n2 = 0; n2 < t2.length; ++n2) t2[n2] = Math.max(1, t2[n2] >> e2);
    return t2;
  }
  get texelByteSize() {
    const e2 = this.format, t2 = S[e2];
    return t2 ? t2.isDepthStencil ? 4 : t2.bytesPerBlock : 0;
  }
  get bytesPerRow() {
    return this.width * this.texelByteSize;
  }
  get isDepthStencil() {
    const e2 = this.format, t2 = S[e2];
    return !!t2 && t2.isDepthStencil;
  }
  getGpuSize() {
    const e2 = this.format, t2 = S[e2], n2 = this.width;
    if (!e2 || n2 <= 0 || !t2) return -1;
    const s2 = this.height, r2 = this.depthOrArrayLayers, a2 = this.dimension;
    return n2 / t2.blockWidth * ("1d" === a2 ? 1 : s2 / t2.blockHeight) * t2.bytesPerBlock * r2;
  }
  getPixel(e2, t2, n2 = 0, s2 = 0) {
    const r2 = this.texelByteSize, a2 = this.bytesPerRow, i2 = this.height, o2 = this.data[s2];
    return k(new Uint8Array(o2), e2, t2, n2, s2, i2, a2, r2, this.format);
  }
  setPixel(e2, t2, n2, s2, r2) {
    const a2 = this.texelByteSize, i2 = this.bytesPerRow, o2 = this.height, c2 = this.data[s2];
    !function(e3, t3, n3, s3, r3, a3, i3, o3, c3, l2) {
      const u2 = s3 * (i3 >>= r3) * (a3 >>= r3) + n3 * i3 + t3 * o3;
      switch (c3) {
        case "r8unorm":
          return void T(e3, u2, "8unorm", 1, l2);
        case "r8snorm":
          return void T(e3, u2, "8snorm", 1, l2);
        case "r8uint":
          return void T(e3, u2, "8uint", 1, l2);
        case "r8sint":
          return void T(e3, u2, "8sint", 1, l2);
        case "rg8unorm":
          return void T(e3, u2, "8unorm", 2, l2);
        case "rg8snorm":
          return void T(e3, u2, "8snorm", 2, l2);
        case "rg8uint":
          return void T(e3, u2, "8uint", 2, l2);
        case "rg8sint":
          return void T(e3, u2, "8sint", 2, l2);
        case "rgba8unorm-srgb":
        case "rgba8unorm":
        case "bgra8unorm-srgb":
        case "bgra8unorm":
          return void T(e3, u2, "8unorm", 4, l2);
        case "rgba8snorm":
          return void T(e3, u2, "8snorm", 4, l2);
        case "rgba8uint":
          return void T(e3, u2, "8uint", 4, l2);
        case "rgba8sint":
          return void T(e3, u2, "8sint", 4, l2);
        case "r16uint":
          return void T(e3, u2, "16uint", 1, l2);
        case "r16sint":
          return void T(e3, u2, "16sint", 1, l2);
        case "r16float":
          return void T(e3, u2, "16float", 1, l2);
        case "rg16uint":
          return void T(e3, u2, "16uint", 2, l2);
        case "rg16sint":
          return void T(e3, u2, "16sint", 2, l2);
        case "rg16float":
          return void T(e3, u2, "16float", 2, l2);
        case "rgba16uint":
          return void T(e3, u2, "16uint", 4, l2);
        case "rgba16sint":
          return void T(e3, u2, "16sint", 4, l2);
        case "rgba16float":
          return void T(e3, u2, "16float", 4, l2);
        case "r32uint":
          return void T(e3, u2, "32uint", 1, l2);
        case "r32sint":
          return void T(e3, u2, "32sint", 1, l2);
        case "depth16unorm":
        case "depth24plus":
        case "depth24plus-stencil8":
        case "depth32float":
        case "depth32float-stencil8":
        case "r32float":
          return void T(e3, u2, "32float", 1, l2);
        case "rg32uint":
          return void T(e3, u2, "32uint", 2, l2);
        case "rg32sint":
          return void T(e3, u2, "32sint", 2, l2);
        case "rg32float":
          return void T(e3, u2, "32float", 2, l2);
        case "rgba32uint":
          return void T(e3, u2, "32uint", 4, l2);
        case "rgba32sint":
          return void T(e3, u2, "32sint", 4, l2);
        case "rgba32float":
          return void T(e3, u2, "32float", 4, l2);
        case "rg11b10ufloat":
          console.error("TODO: rg11b10ufloat not supported for writing");
      }
    }(new Uint8Array(c2), e2, t2, n2, s2, o2, i2, a2, this.format, r2);
  }
};
((e2) => {
  e2[e2.token = 0] = "token", e2[e2.keyword = 1] = "keyword", e2[e2.reserved = 2] = "reserved";
})(z || (z = {}));
var qe = class {
  constructor(e2, t2, n2) {
    this.name = e2, this.type = t2, this.rule = n2;
  }
  toString() {
    return this.name;
  }
};
var He = class {
};
H = He, He.none = new qe("", z.reserved, ""), He.eof = new qe("EOF", z.token, ""), He.reserved = { asm: new qe("asm", z.reserved, "asm"), bf16: new qe("bf16", z.reserved, "bf16"), do: new qe("do", z.reserved, "do"), enum: new qe("enum", z.reserved, "enum"), f16: new qe("f16", z.reserved, "f16"), f64: new qe("f64", z.reserved, "f64"), handle: new qe("handle", z.reserved, "handle"), i8: new qe("i8", z.reserved, "i8"), i16: new qe("i16", z.reserved, "i16"), i64: new qe("i64", z.reserved, "i64"), mat: new qe("mat", z.reserved, "mat"), premerge: new qe("premerge", z.reserved, "premerge"), regardless: new qe("regardless", z.reserved, "regardless"), typedef: new qe("typedef", z.reserved, "typedef"), u8: new qe("u8", z.reserved, "u8"), u16: new qe("u16", z.reserved, "u16"), u64: new qe("u64", z.reserved, "u64"), unless: new qe("unless", z.reserved, "unless"), using: new qe("using", z.reserved, "using"), vec: new qe("vec", z.reserved, "vec"), void: new qe("void", z.reserved, "void") }, He.keywords = { array: new qe("array", z.keyword, "array"), atomic: new qe("atomic", z.keyword, "atomic"), bool: new qe("bool", z.keyword, "bool"), f32: new qe("f32", z.keyword, "f32"), i32: new qe("i32", z.keyword, "i32"), mat2x2: new qe("mat2x2", z.keyword, "mat2x2"), mat2x3: new qe("mat2x3", z.keyword, "mat2x3"), mat2x4: new qe("mat2x4", z.keyword, "mat2x4"), mat3x2: new qe("mat3x2", z.keyword, "mat3x2"), mat3x3: new qe("mat3x3", z.keyword, "mat3x3"), mat3x4: new qe("mat3x4", z.keyword, "mat3x4"), mat4x2: new qe("mat4x2", z.keyword, "mat4x2"), mat4x3: new qe("mat4x3", z.keyword, "mat4x3"), mat4x4: new qe("mat4x4", z.keyword, "mat4x4"), ptr: new qe("ptr", z.keyword, "ptr"), sampler: new qe("sampler", z.keyword, "sampler"), sampler_comparison: new qe("sampler_comparison", z.keyword, "sampler_comparison"), struct: new qe("struct", z.keyword, "struct"), texture_1d: new qe("texture_1d", z.keyword, "texture_1d"), texture_2d: new qe("texture_2d", z.keyword, "texture_2d"), texture_2d_array: new qe("texture_2d_array", z.keyword, "texture_2d_array"), texture_3d: new qe("texture_3d", z.keyword, "texture_3d"), texture_cube: new qe("texture_cube", z.keyword, "texture_cube"), texture_cube_array: new qe("texture_cube_array", z.keyword, "texture_cube_array"), texture_multisampled_2d: new qe("texture_multisampled_2d", z.keyword, "texture_multisampled_2d"), texture_storage_1d: new qe("texture_storage_1d", z.keyword, "texture_storage_1d"), texture_storage_2d: new qe("texture_storage_2d", z.keyword, "texture_storage_2d"), texture_storage_2d_array: new qe("texture_storage_2d_array", z.keyword, "texture_storage_2d_array"), texture_storage_3d: new qe("texture_storage_3d", z.keyword, "texture_storage_3d"), texture_depth_2d: new qe("texture_depth_2d", z.keyword, "texture_depth_2d"), texture_depth_2d_array: new qe("texture_depth_2d_array", z.keyword, "texture_depth_2d_array"), texture_depth_cube: new qe("texture_depth_cube", z.keyword, "texture_depth_cube"), texture_depth_cube_array: new qe("texture_depth_cube_array", z.keyword, "texture_depth_cube_array"), texture_depth_multisampled_2d: new qe("texture_depth_multisampled_2d", z.keyword, "texture_depth_multisampled_2d"), texture_external: new qe("texture_external", z.keyword, "texture_external"), u32: new qe("u32", z.keyword, "u32"), vec2: new qe("vec2", z.keyword, "vec2"), vec3: new qe("vec3", z.keyword, "vec3"), vec4: new qe("vec4", z.keyword, "vec4"), bitcast: new qe("bitcast", z.keyword, "bitcast"), block: new qe("block", z.keyword, "block"), break: new qe("break", z.keyword, "break"), case: new qe("case", z.keyword, "case"), continue: new qe("continue", z.keyword, "continue"), continuing: new qe("continuing", z.keyword, "continuing"), default: new qe("default", z.keyword, "default"), diagnostic: new qe("diagnostic", z.keyword, "diagnostic"), discard: new qe("discard", z.keyword, "discard"), else: new qe("else", z.keyword, "else"), enable: new qe("enable", z.keyword, "enable"), fallthrough: new qe("fallthrough", z.keyword, "fallthrough"), false: new qe("false", z.keyword, "false"), fn: new qe("fn", z.keyword, "fn"), for: new qe("for", z.keyword, "for"), function: new qe("function", z.keyword, "function"), if: new qe("if", z.keyword, "if"), let: new qe("let", z.keyword, "let"), const: new qe("const", z.keyword, "const"), loop: new qe("loop", z.keyword, "loop"), while: new qe("while", z.keyword, "while"), private: new qe("private", z.keyword, "private"), read: new qe("read", z.keyword, "read"), read_write: new qe("read_write", z.keyword, "read_write"), return: new qe("return", z.keyword, "return"), requires: new qe("requires", z.keyword, "requires"), storage: new qe("storage", z.keyword, "storage"), switch: new qe("switch", z.keyword, "switch"), true: new qe("true", z.keyword, "true"), alias: new qe("alias", z.keyword, "alias"), type: new qe("type", z.keyword, "type"), uniform: new qe("uniform", z.keyword, "uniform"), var: new qe("var", z.keyword, "var"), override: new qe("override", z.keyword, "override"), workgroup: new qe("workgroup", z.keyword, "workgroup"), write: new qe("write", z.keyword, "write"), r8unorm: new qe("r8unorm", z.keyword, "r8unorm"), r8snorm: new qe("r8snorm", z.keyword, "r8snorm"), r8uint: new qe("r8uint", z.keyword, "r8uint"), r8sint: new qe("r8sint", z.keyword, "r8sint"), r16uint: new qe("r16uint", z.keyword, "r16uint"), r16sint: new qe("r16sint", z.keyword, "r16sint"), r16float: new qe("r16float", z.keyword, "r16float"), rg8unorm: new qe("rg8unorm", z.keyword, "rg8unorm"), rg8snorm: new qe("rg8snorm", z.keyword, "rg8snorm"), rg8uint: new qe("rg8uint", z.keyword, "rg8uint"), rg8sint: new qe("rg8sint", z.keyword, "rg8sint"), r32uint: new qe("r32uint", z.keyword, "r32uint"), r32sint: new qe("r32sint", z.keyword, "r32sint"), r32float: new qe("r32float", z.keyword, "r32float"), rg16uint: new qe("rg16uint", z.keyword, "rg16uint"), rg16sint: new qe("rg16sint", z.keyword, "rg16sint"), rg16float: new qe("rg16float", z.keyword, "rg16float"), rgba8unorm: new qe("rgba8unorm", z.keyword, "rgba8unorm"), rgba8unorm_srgb: new qe("rgba8unorm_srgb", z.keyword, "rgba8unorm_srgb"), rgba8snorm: new qe("rgba8snorm", z.keyword, "rgba8snorm"), rgba8uint: new qe("rgba8uint", z.keyword, "rgba8uint"), rgba8sint: new qe("rgba8sint", z.keyword, "rgba8sint"), bgra8unorm: new qe("bgra8unorm", z.keyword, "bgra8unorm"), bgra8unorm_srgb: new qe("bgra8unorm_srgb", z.keyword, "bgra8unorm_srgb"), rgb10a2unorm: new qe("rgb10a2unorm", z.keyword, "rgb10a2unorm"), rg11b10float: new qe("rg11b10float", z.keyword, "rg11b10float"), rg32uint: new qe("rg32uint", z.keyword, "rg32uint"), rg32sint: new qe("rg32sint", z.keyword, "rg32sint"), rg32float: new qe("rg32float", z.keyword, "rg32float"), rgba16uint: new qe("rgba16uint", z.keyword, "rgba16uint"), rgba16sint: new qe("rgba16sint", z.keyword, "rgba16sint"), rgba16float: new qe("rgba16float", z.keyword, "rgba16float"), rgba32uint: new qe("rgba32uint", z.keyword, "rgba32uint"), rgba32sint: new qe("rgba32sint", z.keyword, "rgba32sint"), rgba32float: new qe("rgba32float", z.keyword, "rgba32float"), static_assert: new qe("static_assert", z.keyword, "static_assert") }, He.tokens = { decimal_float_literal: new qe("decimal_float_literal", z.token, /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/), hex_float_literal: new qe("hex_float_literal", z.token, /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/), int_literal: new qe("int_literal", z.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/), uint_literal: new qe("uint_literal", z.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/), name: new qe("name", z.token, /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u), ident: new qe("ident", z.token, /[_a-zA-Z][0-9a-zA-Z_]*/), and: new qe("and", z.token, "&"), and_and: new qe("and_and", z.token, "&&"), arrow: new qe("arrow ", z.token, "->"), attr: new qe("attr", z.token, "@"), forward_slash: new qe("forward_slash", z.token, "/"), bang: new qe("bang", z.token, "!"), bracket_left: new qe("bracket_left", z.token, "["), bracket_right: new qe("bracket_right", z.token, "]"), brace_left: new qe("brace_left", z.token, "{"), brace_right: new qe("brace_right", z.token, "}"), colon: new qe("colon", z.token, ":"), comma: new qe("comma", z.token, ","), equal: new qe("equal", z.token, "="), equal_equal: new qe("equal_equal", z.token, "=="), not_equal: new qe("not_equal", z.token, "!="), greater_than: new qe("greater_than", z.token, ">"), greater_than_equal: new qe("greater_than_equal", z.token, ">="), shift_right: new qe("shift_right", z.token, ">>"), less_than: new qe("less_than", z.token, "<"), less_than_equal: new qe("less_than_equal", z.token, "<="), shift_left: new qe("shift_left", z.token, "<<"), modulo: new qe("modulo", z.token, "%"), minus: new qe("minus", z.token, "-"), minus_minus: new qe("minus_minus", z.token, "--"), period: new qe("period", z.token, "."), plus: new qe("plus", z.token, "+"), plus_plus: new qe("plus_plus", z.token, "++"), or: new qe("or", z.token, "|"), or_or: new qe("or_or", z.token, "||"), paren_left: new qe("paren_left", z.token, "("), paren_right: new qe("paren_right", z.token, ")"), semicolon: new qe("semicolon", z.token, ";"), star: new qe("star", z.token, "*"), tilde: new qe("tilde", z.token, "~"), underscore: new qe("underscore", z.token, "_"), xor: new qe("xor", z.token, "^"), plus_equal: new qe("plus_equal", z.token, "+="), minus_equal: new qe("minus_equal", z.token, "-="), times_equal: new qe("times_equal", z.token, "*="), division_equal: new qe("division_equal", z.token, "/="), modulo_equal: new qe("modulo_equal", z.token, "%="), and_equal: new qe("and_equal", z.token, "&="), or_equal: new qe("or_equal", z.token, "|="), xor_equal: new qe("xor_equal", z.token, "^="), shift_right_equal: new qe("shift_right_equal", z.token, ">>="), shift_left_equal: new qe("shift_left_equal", z.token, "<<=") }, He.simpleTokens = { "@": H.tokens.attr, "{": H.tokens.brace_left, "}": H.tokens.brace_right, ":": H.tokens.colon, ",": H.tokens.comma, "(": H.tokens.paren_left, ")": H.tokens.paren_right, ";": H.tokens.semicolon }, He.literalTokens = { "&": H.tokens.and, "&&": H.tokens.and_and, "->": H.tokens.arrow, "/": H.tokens.forward_slash, "!": H.tokens.bang, "[": H.tokens.bracket_left, "]": H.tokens.bracket_right, "=": H.tokens.equal, "==": H.tokens.equal_equal, "!=": H.tokens.not_equal, ">": H.tokens.greater_than, ">=": H.tokens.greater_than_equal, ">>": H.tokens.shift_right, "<": H.tokens.less_than, "<=": H.tokens.less_than_equal, "<<": H.tokens.shift_left, "%": H.tokens.modulo, "-": H.tokens.minus, "--": H.tokens.minus_minus, ".": H.tokens.period, "+": H.tokens.plus, "++": H.tokens.plus_plus, "|": H.tokens.or, "||": H.tokens.or_or, "*": H.tokens.star, "~": H.tokens.tilde, _: H.tokens.underscore, "^": H.tokens.xor, "+=": H.tokens.plus_equal, "-=": H.tokens.minus_equal, "*=": H.tokens.times_equal, "/=": H.tokens.division_equal, "%=": H.tokens.modulo_equal, "&=": H.tokens.and_equal, "|=": H.tokens.or_equal, "^=": H.tokens.xor_equal, ">>=": H.tokens.shift_right_equal, "<<=": H.tokens.shift_left_equal }, He.regexTokens = { decimal_float_literal: H.tokens.decimal_float_literal, hex_float_literal: H.tokens.hex_float_literal, int_literal: H.tokens.int_literal, uint_literal: H.tokens.uint_literal, ident: H.tokens.ident }, He.storage_class = [H.keywords.function, H.keywords.private, H.keywords.workgroup, H.keywords.uniform, H.keywords.storage], He.access_mode = [H.keywords.read, H.keywords.write, H.keywords.read_write], He.sampler_type = [H.keywords.sampler, H.keywords.sampler_comparison], He.sampled_texture_type = [H.keywords.texture_1d, H.keywords.texture_2d, H.keywords.texture_2d_array, H.keywords.texture_3d, H.keywords.texture_cube, H.keywords.texture_cube_array], He.multisampled_texture_type = [H.keywords.texture_multisampled_2d], He.storage_texture_type = [H.keywords.texture_storage_1d, H.keywords.texture_storage_2d, H.keywords.texture_storage_2d_array, H.keywords.texture_storage_3d], He.depth_texture_type = [H.keywords.texture_depth_2d, H.keywords.texture_depth_2d_array, H.keywords.texture_depth_cube, H.keywords.texture_depth_cube_array, H.keywords.texture_depth_multisampled_2d], He.texture_external_type = [H.keywords.texture_external], He.any_texture_type = [...H.sampled_texture_type, ...H.multisampled_texture_type, ...H.storage_texture_type, ...H.depth_texture_type, ...H.texture_external_type], He.texel_format = [H.keywords.r8unorm, H.keywords.r8snorm, H.keywords.r8uint, H.keywords.r8sint, H.keywords.r16uint, H.keywords.r16sint, H.keywords.r16float, H.keywords.rg8unorm, H.keywords.rg8snorm, H.keywords.rg8uint, H.keywords.rg8sint, H.keywords.r32uint, H.keywords.r32sint, H.keywords.r32float, H.keywords.rg16uint, H.keywords.rg16sint, H.keywords.rg16float, H.keywords.rgba8unorm, H.keywords.rgba8unorm_srgb, H.keywords.rgba8snorm, H.keywords.rgba8uint, H.keywords.rgba8sint, H.keywords.bgra8unorm, H.keywords.bgra8unorm_srgb, H.keywords.rgb10a2unorm, H.keywords.rg11b10float, H.keywords.rg32uint, H.keywords.rg32sint, H.keywords.rg32float, H.keywords.rgba16uint, H.keywords.rgba16sint, H.keywords.rgba16float, H.keywords.rgba32uint, H.keywords.rgba32sint, H.keywords.rgba32float], He.const_literal = [H.tokens.int_literal, H.tokens.uint_literal, H.tokens.decimal_float_literal, H.tokens.hex_float_literal, H.keywords.true, H.keywords.false], He.literal_or_ident = [H.tokens.ident, H.tokens.int_literal, H.tokens.uint_literal, H.tokens.decimal_float_literal, H.tokens.hex_float_literal, H.tokens.name], He.element_count_expression = [H.tokens.int_literal, H.tokens.uint_literal, H.tokens.ident], He.template_types = [H.keywords.vec2, H.keywords.vec3, H.keywords.vec4, H.keywords.mat2x2, H.keywords.mat2x3, H.keywords.mat2x4, H.keywords.mat3x2, H.keywords.mat3x3, H.keywords.mat3x4, H.keywords.mat4x2, H.keywords.mat4x3, H.keywords.mat4x4, H.keywords.atomic, H.keywords.bitcast, ...H.any_texture_type], He.attribute_name = [H.tokens.ident, H.keywords.block, H.keywords.diagnostic], He.assignment_operators = [H.tokens.equal, H.tokens.plus_equal, H.tokens.minus_equal, H.tokens.times_equal, H.tokens.division_equal, H.tokens.modulo_equal, H.tokens.and_equal, H.tokens.or_equal, H.tokens.xor_equal, H.tokens.shift_right_equal, H.tokens.shift_left_equal], He.increment_operators = [H.tokens.plus_plus, H.tokens.minus_minus];
var ze = class {
  constructor(e2, t2, n2, s2, r2) {
    this.type = e2, this.lexeme = t2, this.line = n2, this.start = s2, this.end = r2;
  }
  toString() {
    return this.lexeme;
  }
  isTemplateType() {
    return -1 != He.template_types.indexOf(this.type);
  }
  isArrayType() {
    return this.type == He.keywords.array;
  }
  isArrayOrTemplateType() {
    return this.isArrayType() || this.isTemplateType();
  }
};
var Re = class {
  constructor(e2) {
    this._tokens = [], this._start = 0, this._current = 0, this._line = 1, this._source = null != e2 ? e2 : "";
  }
  scanTokens() {
    for (; !this._isAtEnd(); ) if (this._start = this._current, !this.scanToken()) throw `Invalid syntax at line ${this._line}`;
    return this._tokens.push(new ze(He.eof, "", this._line, this._current, this._current)), this._tokens;
  }
  scanToken() {
    let e2 = this._advance();
    if ("\n" == e2) return this._line++, true;
    if (this._isWhitespace(e2)) return true;
    if ("/" == e2) {
      if ("/" == this._peekAhead()) {
        for (; "\n" != e2; ) {
          if (this._isAtEnd()) return true;
          e2 = this._advance();
        }
        return this._line++, true;
      }
      if ("*" == this._peekAhead()) {
        this._advance();
        let t3 = 1;
        for (; t3 > 0; ) {
          if (this._isAtEnd()) return true;
          if (e2 = this._advance(), "\n" == e2) this._line++;
          else if ("*" == e2) {
            if ("/" == this._peekAhead() && (this._advance(), t3--, 0 == t3)) return true;
          } else "/" == e2 && "*" == this._peekAhead() && (this._advance(), t3++);
        }
        return true;
      }
    }
    const t2 = He.simpleTokens[e2];
    if (t2) return this._addToken(t2), true;
    let n2 = He.none;
    const s2 = this._isAlpha(e2), r2 = "_" === e2;
    if (this._isAlphaNumeric(e2)) {
      let t3 = this._peekAhead();
      for (; this._isAlphaNumeric(t3); ) e2 += this._advance(), t3 = this._peekAhead();
    }
    if (s2) {
      const t3 = He.keywords[e2];
      if (t3) return this._addToken(t3), true;
    }
    if (s2 || r2) return this._addToken(He.tokens.ident), true;
    for (; ; ) {
      let t3 = this._findType(e2);
      const s3 = this._peekAhead();
      if ("-" == e2 && this._tokens.length > 0) {
        if ("=" == s3) return this._current++, e2 += s3, this._addToken(He.tokens.minus_equal), true;
        if ("-" == s3) return this._current++, e2 += s3, this._addToken(He.tokens.minus_minus), true;
        const n3 = this._tokens.length - 1;
        if ((-1 != He.literal_or_ident.indexOf(this._tokens[n3].type) || this._tokens[n3].type == He.tokens.paren_right) && ">" != s3) return this._addToken(t3), true;
      }
      if (">" == e2 && (">" == s3 || "=" == s3)) {
        let e3 = false, n3 = this._tokens.length - 1;
        for (let t4 = 0; t4 < 5 && n3 >= 0 && -1 === He.assignment_operators.indexOf(this._tokens[n3].type); ++t4, --n3) if (this._tokens[n3].type === He.tokens.less_than) {
          n3 > 0 && this._tokens[n3 - 1].isArrayOrTemplateType() && (e3 = true);
          break;
        }
        if (e3) return this._addToken(t3), true;
      }
      if (t3 === He.none) {
        let s4 = e2, r3 = 0;
        const a2 = 2;
        for (let e3 = 0; e3 < a2; ++e3) if (s4 += this._peekAhead(e3), t3 = this._findType(s4), t3 !== He.none) {
          r3 = e3;
          break;
        }
        if (t3 === He.none) return n2 !== He.none && (this._current--, this._addToken(n2), true);
        e2 = s4, this._current += r3 + 1;
      }
      if (n2 = t3, this._isAtEnd()) break;
      e2 += this._advance();
    }
    return n2 !== He.none && (this._addToken(n2), true);
  }
  _findType(e2) {
    for (const t3 in He.regexTokens) {
      const n2 = He.regexTokens[t3];
      if (this._match(e2, n2.rule)) return n2;
    }
    const t2 = He.literalTokens[e2];
    return t2 || He.none;
  }
  _match(e2, t2) {
    const n2 = t2.exec(e2);
    return n2 && 0 == n2.index && n2[0] == e2;
  }
  _isAtEnd() {
    return this._current >= this._source.length;
  }
  _isAlpha(e2) {
    return !this._isNumeric(e2) && !this._isWhitespace(e2) && "_" !== e2 && "." !== e2 && "(" !== e2 && ")" !== e2 && "[" !== e2 && "]" !== e2 && "{" !== e2 && "}" !== e2 && "," !== e2 && ";" !== e2 && ":" !== e2 && "=" !== e2 && "!" !== e2 && "<" !== e2 && ">" !== e2 && "+" !== e2 && "-" !== e2 && "*" !== e2 && "/" !== e2 && "%" !== e2 && "&" !== e2 && "|" !== e2 && "^" !== e2 && "~" !== e2 && "@" !== e2 && "#" !== e2 && "?" !== e2 && "'" !== e2 && "`" !== e2 && '"' !== e2 && "\\" !== e2 && "\n" !== e2 && "\r" !== e2 && "	" !== e2 && "\0" !== e2;
  }
  _isNumeric(e2) {
    return e2 >= "0" && e2 <= "9";
  }
  _isAlphaNumeric(e2) {
    return this._isAlpha(e2) || this._isNumeric(e2) || "_" === e2;
  }
  _isWhitespace(e2) {
    return " " == e2 || "	" == e2 || "\r" == e2;
  }
  _advance(e2 = 0) {
    let t2 = this._source[this._current];
    return e2 = e2 || 0, e2++, this._current += e2, t2;
  }
  _peekAhead(e2 = 0) {
    return e2 = e2 || 0, this._current + e2 >= this._source.length ? "\0" : this._source[this._current + e2];
  }
  _addToken(e2) {
    const t2 = this._source.substring(this._start, this._current);
    this._tokens.push(new ze(e2, t2, this._line, this._start, this._current));
  }
};
function Ge(e2) {
  return Array.isArray(e2) || (null == e2 ? void 0 : e2.buffer) instanceof ArrayBuffer;
}
var Xe = new Float32Array(1);
var je = new Uint32Array(Xe.buffer);
var Ze = new Uint32Array(Xe.buffer);
var Qe = new Int32Array(1);
var Ye = new Float32Array(Qe.buffer);
var Ke = new Uint32Array(Qe.buffer);
var Je = new Uint32Array(1);
var et = new Float32Array(Je.buffer);
var tt = new Int32Array(Je.buffer);
function nt(e2, t2, n2) {
  if (t2 === n2) return e2;
  if ("f32" === t2) {
    if ("i32" === n2 || "x32" === n2) return Xe[0] = e2, je[0];
    if ("u32" === n2) return Xe[0] = e2, Ze[0];
  } else if ("i32" === t2 || "x32" === t2) {
    if ("f32" === n2) return Qe[0] = e2, Ye[0];
    if ("u32" === n2) return Qe[0] = e2, Ke[0];
  } else if ("u32" === t2) {
    if ("f32" === n2) return Je[0] = e2, et[0];
    if ("i32" === n2 || "x32" === n2) return Je[0] = e2, tt[0];
  }
  return console.error(`Unsupported cast from ${t2} to ${n2}`), e2;
}
var st = class {
  constructor(e2) {
    this.resources = null, this.inUse = false, this.info = null, this.node = e2;
  }
};
var rt = class {
  constructor(e2, t2) {
    this.align = e2, this.size = t2;
  }
};
var at = class _at {
  constructor() {
    this.uniforms = [], this.storage = [], this.textures = [], this.samplers = [], this.aliases = [], this.overrides = [], this.structs = [], this.entry = new d(), this.functions = [], this._types = /* @__PURE__ */ new Map(), this._functions = /* @__PURE__ */ new Map();
  }
  _isStorageTexture(e2) {
    return "texture_storage_1d" == e2.name || "texture_storage_2d" == e2.name || "texture_storage_2d_array" == e2.name || "texture_storage_3d" == e2.name;
  }
  updateAST(e2) {
    for (const t2 of e2) t2 instanceof D && this._functions.set(t2.name, new st(t2));
    for (const t2 of e2) if (t2 instanceof oe) {
      const e3 = this.getTypeInfo(t2, null);
      e3 instanceof n && this.structs.push(e3);
    }
    for (const t2 of e2) if (t2 instanceof te) this.aliases.push(this._getAliasInfo(t2));
    else {
      if (t2 instanceof M) {
        const e3 = t2, n2 = this._getAttributeNum(e3.attributes, "id", 0), s2 = null != e3.type ? this.getTypeInfo(e3.type, e3.attributes) : null;
        this.overrides.push(new h(e3.name, s2, e3.attributes, n2));
        continue;
      }
      if (this._isUniformVar(t2)) {
        const e3 = t2, n2 = this._getAttributeNum(e3.attributes, "group", 0), s2 = this._getAttributeNum(e3.attributes, "binding", 0), r2 = this.getTypeInfo(e3.type, e3.attributes), a2 = new o(e3.name, r2, n2, s2, e3.attributes, i.Uniform, e3.access);
        a2.access || (a2.access = "read"), this.uniforms.push(a2);
        continue;
      }
      if (this._isStorageVar(t2)) {
        const e3 = t2, n2 = this._getAttributeNum(e3.attributes, "group", 0), s2 = this._getAttributeNum(e3.attributes, "binding", 0), r2 = this.getTypeInfo(e3.type, e3.attributes), a2 = this._isStorageTexture(r2), c2 = new o(e3.name, r2, n2, s2, e3.attributes, a2 ? i.StorageTexture : i.Storage, e3.access);
        c2.access || (c2.access = "read"), this.storage.push(c2);
        continue;
      }
      if (this._isTextureVar(t2)) {
        const e3 = t2, n2 = this._getAttributeNum(e3.attributes, "group", 0), s2 = this._getAttributeNum(e3.attributes, "binding", 0), r2 = this.getTypeInfo(e3.type, e3.attributes), a2 = this._isStorageTexture(r2), c2 = new o(e3.name, r2, n2, s2, e3.attributes, a2 ? i.StorageTexture : i.Texture, e3.access);
        c2.access || (c2.access = "read"), a2 ? this.storage.push(c2) : this.textures.push(c2);
        continue;
      }
      if (this._isSamplerVar(t2)) {
        const e3 = t2, n2 = this._getAttributeNum(e3.attributes, "group", 0), s2 = this._getAttributeNum(e3.attributes, "binding", 0), r2 = this.getTypeInfo(e3.type, e3.attributes), a2 = new o(e3.name, r2, n2, s2, e3.attributes, i.Sampler, e3.access);
        this.samplers.push(a2);
        continue;
      }
    }
    for (const t2 of e2) if (t2 instanceof D) {
      const e3 = this._getAttribute(t2, "vertex"), n2 = this._getAttribute(t2, "fragment"), s2 = this._getAttribute(t2, "compute"), r2 = e3 || n2 || s2, a2 = new p(t2.name, null == r2 ? void 0 : r2.name, t2.attributes);
      a2.attributes = t2.attributes, a2.startLine = t2.startLine, a2.endLine = t2.endLine, this.functions.push(a2), this._functions.get(t2.name).info = a2, r2 && (this._functions.get(t2.name).inUse = true, a2.inUse = true, a2.resources = this._findResources(t2, !!r2), a2.inputs = this._getInputs(t2.args), a2.outputs = this._getOutputs(t2.returnType), this.entry[r2.name].push(a2)), a2.arguments = t2.args.map((e4) => new f(e4.name, this.getTypeInfo(e4.type, e4.attributes), e4.attributes)), a2.returnType = t2.returnType ? this.getTypeInfo(t2.returnType, t2.attributes) : null;
      continue;
    }
    for (const e3 of this._functions.values()) e3.info && (e3.info.inUse = e3.inUse, this._addCalls(e3.node, e3.info.calls));
    for (const e3 of this._functions.values()) e3.node.search((t2) => {
      var n2, s2, r2;
      if (t2 instanceof De) {
        if (t2.value) if (Ge(t2.value)) for (const s3 of t2.value) for (const t3 of this.overrides) s3 === t3.name && (null === (n2 = e3.info) || void 0 === n2 || n2.overrides.push(t3));
        else for (const n3 of this.overrides) t2.value === n3.name && (null === (s2 = e3.info) || void 0 === s2 || s2.overrides.push(n3));
      } else if (t2 instanceof ge) for (const n3 of this.overrides) t2.name === n3.name && (null === (r2 = e3.info) || void 0 === r2 || r2.overrides.push(n3));
    });
    for (const e3 of this.uniforms) this._markStructsInUse(e3.type);
    for (const e3 of this.storage) this._markStructsInUse(e3.type);
  }
  getFunctionInfo(e2) {
    for (const t2 of this.functions) if (t2.name == e2) return t2;
    return null;
  }
  getStructInfo(e2) {
    for (const t2 of this.structs) if (t2.name == e2) return t2;
    return null;
  }
  getOverrideInfo(e2) {
    for (const t2 of this.overrides) if (t2.name == e2) return t2;
    return null;
  }
  _markStructsInUse(e2) {
    if (e2) if (e2.isStruct) {
      if (e2.inUse = true, e2.members) for (const t2 of e2.members) this._markStructsInUse(t2.type);
    } else if (e2.isArray) this._markStructsInUse(e2.format);
    else if (e2.isTemplate) e2.format && this._markStructsInUse(e2.format);
    else {
      const t2 = this._getAlias(e2.name);
      t2 && this._markStructsInUse(t2);
    }
  }
  _addCalls(e2, t2) {
    var n2;
    for (const s2 of e2.calls) {
      const e3 = null === (n2 = this._functions.get(s2.name)) || void 0 === n2 ? void 0 : n2.info;
      e3 && t2.add(e3);
    }
  }
  findResource(e2, t2, n2) {
    if (n2) {
      for (const s2 of this.entry.compute) if (s2.name === n2) {
        for (const n3 of s2.resources) if (n3.group == e2 && n3.binding == t2) return n3;
      }
      for (const s2 of this.entry.vertex) if (s2.name === n2) {
        for (const n3 of s2.resources) if (n3.group == e2 && n3.binding == t2) return n3;
      }
      for (const s2 of this.entry.fragment) if (s2.name === n2) {
        for (const n3 of s2.resources) if (n3.group == e2 && n3.binding == t2) return n3;
      }
    }
    for (const n3 of this.uniforms) if (n3.group == e2 && n3.binding == t2) return n3;
    for (const n3 of this.storage) if (n3.group == e2 && n3.binding == t2) return n3;
    for (const n3 of this.textures) if (n3.group == e2 && n3.binding == t2) return n3;
    for (const n3 of this.samplers) if (n3.group == e2 && n3.binding == t2) return n3;
    return null;
  }
  _findResource(e2) {
    for (const t2 of this.uniforms) if (t2.name == e2) return t2;
    for (const t2 of this.storage) if (t2.name == e2) return t2;
    for (const t2 of this.textures) if (t2.name == e2) return t2;
    for (const t2 of this.samplers) if (t2.name == e2) return t2;
    return null;
  }
  _markStructsFromAST(e2) {
    const t2 = this.getTypeInfo(e2, null);
    this._markStructsInUse(t2);
  }
  _findResources(e2, t2) {
    const n2 = [], s2 = this, r2 = [];
    return e2.search((a2) => {
      if (a2 instanceof E) r2.push({});
      else if (a2 instanceof $) r2.pop();
      else if (a2 instanceof F) {
        const e3 = a2;
        t2 && null !== e3.type && this._markStructsFromAST(e3.type), r2.length > 0 && (r2[r2.length - 1][e3.name] = e3);
      } else if (a2 instanceof de) {
        const e3 = a2;
        t2 && null !== e3.type && this._markStructsFromAST(e3.type);
      } else if (a2 instanceof U) {
        const e3 = a2;
        t2 && null !== e3.type && this._markStructsFromAST(e3.type), r2.length > 0 && (r2[r2.length - 1][e3.name] = e3);
      } else if (a2 instanceof ge) {
        const e3 = a2;
        if (r2.length > 0) {
          if (r2[r2.length - 1][e3.name]) return;
        }
        const t3 = s2._findResource(e3.name);
        t3 && n2.push(t3);
      } else if (a2 instanceof me) {
        const r3 = a2, i2 = s2._functions.get(r3.name);
        i2 && (t2 && (i2.inUse = true), e2.calls.add(i2.node), null === i2.resources && (i2.resources = s2._findResources(i2.node, t2)), n2.push(...i2.resources));
      } else if (a2 instanceof X) {
        const r3 = a2, i2 = s2._functions.get(r3.name);
        i2 && (t2 && (i2.inUse = true), e2.calls.add(i2.node), null === i2.resources && (i2.resources = s2._findResources(i2.node, t2)), n2.push(...i2.resources));
      }
    }), [...new Map(n2.map((e3) => [e3.name, e3])).values()];
  }
  getBindGroups() {
    const e2 = [];
    function t2(t3, n2) {
      t3 >= e2.length && (e2.length = t3 + 1), void 0 === e2[t3] && (e2[t3] = []), n2 >= e2[t3].length && (e2[t3].length = n2 + 1);
    }
    for (const n2 of this.uniforms) {
      t2(n2.group, n2.binding);
      e2[n2.group][n2.binding] = n2;
    }
    for (const n2 of this.storage) {
      t2(n2.group, n2.binding);
      e2[n2.group][n2.binding] = n2;
    }
    for (const n2 of this.textures) {
      t2(n2.group, n2.binding);
      e2[n2.group][n2.binding] = n2;
    }
    for (const n2 of this.samplers) {
      t2(n2.group, n2.binding);
      e2[n2.group][n2.binding] = n2;
    }
    return e2;
  }
  _getOutputs(e2, t2 = void 0) {
    if (void 0 === t2 && (t2 = []), e2 instanceof oe) this._getStructOutputs(e2, t2);
    else {
      const n2 = this._getOutputInfo(e2);
      null !== n2 && t2.push(n2);
    }
    return t2;
  }
  _getStructOutputs(e2, t2) {
    for (const n2 of e2.members) if (n2.type instanceof oe) this._getStructOutputs(n2.type, t2);
    else {
      const e3 = this._getAttribute(n2, "location") || this._getAttribute(n2, "builtin");
      if (null !== e3) {
        const s2 = this.getTypeInfo(n2.type, n2.type.attributes), r2 = this._parseInt(e3.value), a2 = new u(n2.name, s2, e3.name, r2);
        t2.push(a2);
      }
    }
  }
  _getOutputInfo(e2) {
    const t2 = this._getAttribute(e2, "location") || this._getAttribute(e2, "builtin");
    if (null !== t2) {
      const n2 = this.getTypeInfo(e2, e2.attributes), s2 = this._parseInt(t2.value);
      return new u("", n2, t2.name, s2);
    }
    return null;
  }
  _getInputs(e2, t2 = void 0) {
    void 0 === t2 && (t2 = []);
    for (const n2 of e2) if (n2.type instanceof oe) this._getStructInputs(n2.type, t2);
    else {
      const e3 = this._getInputInfo(n2);
      null !== e3 && t2.push(e3);
    }
    return t2;
  }
  _getStructInputs(e2, t2) {
    for (const n2 of e2.members) if (n2.type instanceof oe) this._getStructInputs(n2.type, t2);
    else {
      const e3 = this._getInputInfo(n2);
      null !== e3 && t2.push(e3);
    }
  }
  _getInputInfo(e2) {
    const t2 = this._getAttribute(e2, "location") || this._getAttribute(e2, "builtin");
    if (null !== t2) {
      const n2 = this._getAttribute(e2, "interpolation"), s2 = this.getTypeInfo(e2.type, e2.attributes), r2 = this._parseInt(t2.value), a2 = new l(e2.name, s2, t2.name, r2);
      return null !== n2 && (a2.interpolation = this._parseString(n2.value)), a2;
    }
    return null;
  }
  _parseString(e2) {
    return e2 instanceof Array && (e2 = e2[0]), e2;
  }
  _parseInt(e2) {
    e2 instanceof Array && (e2 = e2[0]);
    const t2 = parseInt(e2);
    return isNaN(t2) ? e2 : t2;
  }
  _getAlias(e2) {
    for (const t2 of this.aliases) if (t2.name == e2) return t2.type;
    return null;
  }
  _getAliasInfo(e2) {
    return new c(e2.name, this.getTypeInfo(e2.type, null));
  }
  getTypeInfoByName(e2) {
    for (const t2 of this.structs) if (t2.name == e2) return t2;
    for (const t2 of this.aliases) if (t2.name == e2) return t2.type;
    return null;
  }
  getTypeInfo(i2, o2 = null) {
    if (this._types.has(i2)) return this._types.get(i2);
    if (i2 instanceof le) {
      const e2 = i2.type ? this.getTypeInfo(i2.type, i2.attributes) : null, t2 = new r(i2.name, e2, o2);
      return this._types.set(i2, t2), this._updateTypeInfo(t2), t2;
    }
    if (i2 instanceof ue) {
      const e2 = i2, t2 = e2.format ? this.getTypeInfo(e2.format, e2.attributes) : null, n2 = new s(e2.name, o2);
      return n2.format = t2, n2.count = e2.count, this._types.set(i2, n2), this._updateTypeInfo(n2), n2;
    }
    if (i2 instanceof oe) {
      const e2 = i2, s2 = new n(e2.name, o2);
      s2.startLine = e2.startLine, s2.endLine = e2.endLine;
      for (const n2 of e2.members) {
        const e3 = this.getTypeInfo(n2.type, n2.attributes);
        s2.members.push(new t(n2.name, e3, n2.attributes));
      }
      return this._types.set(i2, s2), this._updateTypeInfo(s2), s2;
    }
    if (i2 instanceof he) {
      const t2 = i2, n2 = t2.format instanceof ae, s2 = t2.format ? n2 ? this.getTypeInfo(t2.format, null) : new e(t2.format, null) : null, r2 = new a(t2.name, s2, o2, t2.access);
      return this._types.set(i2, r2), this._updateTypeInfo(r2), r2;
    }
    if (i2 instanceof ce) {
      const e2 = i2, t2 = e2.format ? this.getTypeInfo(e2.format, null) : null, n2 = new a(e2.name, t2, o2, e2.access);
      return this._types.set(i2, n2), this._updateTypeInfo(n2), n2;
    }
    const c2 = new e(i2.name, o2);
    return this._types.set(i2, c2), this._updateTypeInfo(c2), c2;
  }
  _updateTypeInfo(e2) {
    var t2, a2, i2;
    const o2 = this._getTypeSize(e2);
    if (e2.size = null !== (t2 = null == o2 ? void 0 : o2.size) && void 0 !== t2 ? t2 : 0, e2 instanceof s && e2.format) {
      const t3 = this._getTypeSize(e2.format);
      e2.stride = Math.max(null !== (a2 = null == t3 ? void 0 : t3.size) && void 0 !== a2 ? a2 : 0, null !== (i2 = null == t3 ? void 0 : t3.align) && void 0 !== i2 ? i2 : 0), this._updateTypeInfo(e2.format);
    }
    e2 instanceof r && this._updateTypeInfo(e2.format), e2 instanceof n && this._updateStructInfo(e2);
  }
  _updateStructInfo(e2) {
    var t2;
    let n2 = 0, s2 = 0, r2 = 0, a2 = 0;
    for (let i2 = 0, o2 = e2.members.length; i2 < o2; ++i2) {
      const o3 = e2.members[i2], c2 = this._getTypeSize(o3);
      if (!c2) continue;
      null !== (t2 = this._getAlias(o3.type.name)) && void 0 !== t2 || o3.type;
      const l2 = c2.align, u2 = c2.size;
      n2 = this._roundUp(l2, n2 + s2), s2 = u2, r2 = n2, a2 = Math.max(a2, l2), o3.offset = n2, o3.size = u2, this._updateTypeInfo(o3.type);
    }
    e2.size = this._roundUp(a2, r2 + s2), e2.align = a2;
  }
  _getTypeSize(r2) {
    var a2, i2;
    if (null == r2) return null;
    const o2 = this._getAttributeNum(r2.attributes, "size", 0), c2 = this._getAttributeNum(r2.attributes, "align", 0);
    if (r2 instanceof t && (r2 = r2.type), r2 instanceof e) {
      const e2 = this._getAlias(r2.name);
      null !== e2 && (r2 = e2);
    }
    {
      const e2 = _at._typeInfo[r2.name];
      if (void 0 !== e2) {
        const t2 = "f16" === (null === (a2 = r2.format) || void 0 === a2 ? void 0 : a2.name) ? 2 : 1;
        return new rt(Math.max(c2, e2.align / t2), Math.max(o2, e2.size / t2));
      }
    }
    {
      const e2 = _at._typeInfo[r2.name.substring(0, r2.name.length - 1)];
      if (e2) {
        const t2 = "h" === r2.name[r2.name.length - 1] ? 2 : 1;
        return new rt(Math.max(c2, e2.align / t2), Math.max(o2, e2.size / t2));
      }
    }
    if (r2 instanceof s) {
      let e2 = r2, t2 = 8, n2 = 8;
      const s2 = this._getTypeSize(e2.format);
      null !== s2 && (n2 = s2.size, t2 = s2.align);
      return n2 = e2.count * this._getAttributeNum(null !== (i2 = null == r2 ? void 0 : r2.attributes) && void 0 !== i2 ? i2 : null, "stride", this._roundUp(t2, n2)), o2 && (n2 = o2), new rt(Math.max(c2, t2), Math.max(o2, n2));
    }
    if (r2 instanceof n) {
      let e2 = 0, t2 = 0, n2 = 0, s2 = 0, a3 = 0;
      for (const t3 of r2.members) {
        const r3 = this._getTypeSize(t3.type);
        null !== r3 && (e2 = Math.max(r3.align, e2), n2 = this._roundUp(r3.align, n2 + s2), s2 = r3.size, a3 = n2);
      }
      return t2 = this._roundUp(e2, a3 + s2), new rt(Math.max(c2, e2), Math.max(o2, t2));
    }
    return null;
  }
  _isUniformVar(e2) {
    return e2 instanceof F && "uniform" == e2.storage;
  }
  _isStorageVar(e2) {
    return e2 instanceof F && "storage" == e2.storage;
  }
  _isTextureVar(e2) {
    return e2 instanceof F && null !== e2.type && -1 != _at._textureTypes.indexOf(e2.type.name);
  }
  _isSamplerVar(e2) {
    return e2 instanceof F && null !== e2.type && -1 != _at._samplerTypes.indexOf(e2.type.name);
  }
  _getAttribute(e2, t2) {
    const n2 = e2;
    if (!n2 || !n2.attributes) return null;
    const s2 = n2.attributes;
    for (let e3 of s2) if (e3.name == t2) return e3;
    return null;
  }
  _getAttributeNum(e2, t2, n2) {
    if (null === e2) return n2;
    for (let s2 of e2) if (s2.name == t2) {
      let e3 = null !== s2 && null !== s2.value ? s2.value : n2;
      return e3 instanceof Array && (e3 = e3[0]), "number" == typeof e3 ? e3 : "string" == typeof e3 ? parseInt(e3) : n2;
    }
    return n2;
  }
  _roundUp(e2, t2) {
    return Math.ceil(t2 / e2) * e2;
  }
};
at._typeInfo = { f16: { align: 2, size: 2 }, i32: { align: 4, size: 4 }, u32: { align: 4, size: 4 }, f32: { align: 4, size: 4 }, atomic: { align: 4, size: 4 }, vec2: { align: 8, size: 8 }, vec3: { align: 16, size: 12 }, vec4: { align: 16, size: 16 }, mat2x2: { align: 8, size: 16 }, mat3x2: { align: 8, size: 24 }, mat4x2: { align: 8, size: 32 }, mat2x3: { align: 16, size: 32 }, mat3x3: { align: 16, size: 48 }, mat4x3: { align: 16, size: 64 }, mat2x4: { align: 16, size: 32 }, mat3x4: { align: 16, size: 48 }, mat4x4: { align: 16, size: 64 } }, at._textureTypes = He.any_texture_type.map((e2) => e2.name), at._samplerTypes = He.sampler_type.map((e2) => e2.name);
var it = 0;
var ot = class _ot {
  constructor(e2, t2, n2) {
    this.id = it++, this.name = e2, this.value = t2, this.node = n2;
  }
  clone() {
    return new _ot(this.name, this.value, this.node);
  }
};
var ct = class _ct {
  constructor(e2) {
    this.id = it++, this.name = e2.name, this.node = e2;
  }
  clone() {
    return new _ct(this.node);
  }
};
var lt = class _lt {
  constructor(e2) {
    this.parent = null, this.variables = /* @__PURE__ */ new Map(), this.functions = /* @__PURE__ */ new Map(), this.currentFunctionName = "", this.id = it++, e2 && (this.parent = e2, this.currentFunctionName = e2.currentFunctionName);
  }
  getVariable(e2) {
    var t2;
    return this.variables.has(e2) ? null !== (t2 = this.variables.get(e2)) && void 0 !== t2 ? t2 : null : this.parent ? this.parent.getVariable(e2) : null;
  }
  getFunction(e2) {
    var t2;
    return this.functions.has(e2) ? null !== (t2 = this.functions.get(e2)) && void 0 !== t2 ? t2 : null : this.parent ? this.parent.getFunction(e2) : null;
  }
  createVariable(e2, t2, n2) {
    this.variables.set(e2, new ot(e2, t2, null != n2 ? n2 : null));
  }
  setVariable(e2, t2, n2) {
    const s2 = this.getVariable(e2);
    null !== s2 ? s2.value = t2 : this.createVariable(e2, t2, n2);
  }
  getVariableValue(e2) {
    var t2;
    const n2 = this.getVariable(e2);
    return null !== (t2 = null == n2 ? void 0 : n2.value) && void 0 !== t2 ? t2 : null;
  }
  clone() {
    return new _lt(this);
  }
};
var ut = class {
  evalExpression(e2, t2) {
    return null;
  }
  getTypeInfo(e2) {
    return null;
  }
  getVariableName(e2, t2) {
    return "";
  }
};
var ht = class {
  constructor(e2) {
    this.exec = e2;
  }
  getTypeInfo(e2) {
    return this.exec.getTypeInfo(e2);
  }
  All(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    let s2 = true;
    if (n2 instanceof Me) return n2.data.forEach((e3) => {
      e3 || (s2 = false);
    }), new Be(s2 ? 1 : 0, this.getTypeInfo("bool"));
    throw new Error(`All() expects a vector argument. Line ${e2.line}`);
  }
  Any(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) {
      const e3 = n2.data.some((e4) => e4);
      return new Be(e3 ? 1 : 0, this.getTypeInfo("bool"));
    }
    throw new Error(`Any() expects a vector argument. Line ${e2.line}`);
  }
  Select(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[2], t2);
    if (!(n2 instanceof Be)) throw new Error(`Select() expects a bool condition. Line ${e2.line}`);
    return n2.value ? this.exec.evalExpression(e2.args[1], t2) : this.exec.evalExpression(e2.args[0], t2);
  }
  ArrayLength(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.evalExpression(n2, t2);
    if (s2 instanceof Pe && 0 === s2.typeInfo.size) {
      const e3 = s2.typeInfo, t3 = s2.buffer.byteLength / e3.stride;
      return new Be(t3, this.getTypeInfo("u32"));
    }
    return new Be(s2.typeInfo.size, this.getTypeInfo("u32"));
  }
  Abs(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.abs(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.abs(s2.value), s2.typeInfo);
  }
  Acos(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.acos(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.acos(s2.value), n2.typeInfo);
  }
  Acosh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.acosh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.acosh(s2.value), n2.typeInfo);
  }
  Asin(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.asin(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.asin(s2.value), n2.typeInfo);
  }
  Asinh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.asinh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.asinh(s2.value), n2.typeInfo);
  }
  Atan(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.atan(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.atan(s2.value), n2.typeInfo);
  }
  Atanh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.atanh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.atanh(s2.value), n2.typeInfo);
  }
  Atan2(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => Math.atan2(e3, s2.data[t3])), n2.typeInfo);
    const r2 = n2, a2 = s2;
    return new Be(Math.atan2(r2.value, a2.value), n2.typeInfo);
  }
  Ceil(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.ceil(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.ceil(s2.value), n2.typeInfo);
  }
  _clamp(e2, t2, n2) {
    return Math.min(Math.max(e2, t2), n2);
  }
  Clamp(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (n2 instanceof Me && s2 instanceof Me && r2 instanceof Me) return new Me(n2.data.map((e3, t3) => this._clamp(e3, s2.data[t3], r2.data[t3])), n2.typeInfo);
    const a2 = n2, i2 = s2, o2 = r2;
    return new Be(this._clamp(a2.value, i2.value, o2.value), n2.typeInfo);
  }
  Cos(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.cos(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.cos(s2.value), n2.typeInfo);
  }
  Cosh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.cosh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.cos(s2.value), n2.typeInfo);
  }
  CountLeadingZeros(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.clz32(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.clz32(s2.value), n2.typeInfo);
  }
  _countOneBits(e2) {
    let t2 = 0;
    for (; 0 !== e2; ) 1 & e2 && t2++, e2 >>= 1;
    return t2;
  }
  CountOneBits(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => this._countOneBits(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(this._countOneBits(s2.value), n2.typeInfo);
  }
  _countTrailingZeros(e2) {
    if (0 === e2) return 32;
    let t2 = 0;
    for (; !(1 & e2); ) e2 >>= 1, t2++;
    return t2;
  }
  CountTrailingZeros(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => this._countTrailingZeros(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(this._countTrailingZeros(s2.value), n2.typeInfo);
  }
  Cross(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) {
      if (3 !== n2.data.length || 3 !== s2.data.length) return console.error(`Cross() expects 3D vectors. Line ${e2.line}`), null;
      const t3 = n2.data, r2 = s2.data;
      return new Me([t3[1] * r2[2] - r2[1] * t3[2], t3[2] * r2[0] - r2[2] * t3[0], t3[0] * r2[1] - r2[0] * t3[1]], n2.typeInfo);
    }
    return console.error(`Cross() expects vector arguments. Line ${e2.line}`), null;
  }
  Degrees(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = 180 / Math.PI;
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => e3 * s2), n2.typeInfo);
    return new Be(n2.value * s2, this.getTypeInfo("f32"));
  }
  Determinant(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Ue) {
      const e3 = n2.data, t3 = n2.typeInfo.getTypeName(), s2 = t3.endsWith("h") ? this.getTypeInfo("f16") : this.getTypeInfo("f32");
      if ("mat2x2" === t3 || "mat2x2f" === t3 || "mat2x2h" === t3) return new Be(e3[0] * e3[3] - e3[1] * e3[2], s2);
      if ("mat2x3" === t3 || "mat2x3f" === t3 || "mat2x3h" === t3) return new Be(e3[0] * (e3[4] * e3[8] - e3[5] * e3[7]) - e3[1] * (e3[3] * e3[8] - e3[5] * e3[6]) + e3[2] * (e3[3] * e3[7] - e3[4] * e3[6]), s2);
      if ("mat2x4" === t3 || "mat2x4f" === t3 || "mat2x4h" === t3) console.error(`TODO: Determinant for ${t3}`);
      else if ("mat3x2" === t3 || "mat3x2f" === t3 || "mat3x2h" === t3) console.error(`TODO: Determinant for ${t3}`);
      else {
        if ("mat3x3" === t3 || "mat3x3f" === t3 || "mat3x3h" === t3) return new Be(e3[0] * (e3[4] * e3[8] - e3[5] * e3[7]) - e3[1] * (e3[3] * e3[8] - e3[5] * e3[6]) + e3[2] * (e3[3] * e3[7] - e3[4] * e3[6]), s2);
        "mat3x4" === t3 || "mat3x4f" === t3 || "mat3x4h" === t3 || "mat4x2" === t3 || "mat4x2f" === t3 || "mat4x2h" === t3 || "mat4x3" === t3 || "mat4x3f" === t3 || "mat4x3h" === t3 ? console.error(`TODO: Determinant for ${t3}`) : "mat4x4" !== t3 && "mat4x4f" !== t3 && "mat4x4h" !== t3 || console.error(`TODO: Determinant for ${t3}`);
      }
    }
    return console.error(`Determinant expects a matrix argument. Line ${e2.line}`), null;
  }
  Distance(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) {
      let e3 = 0;
      for (let t3 = 0; t3 < n2.data.length; ++t3) e3 += (n2.data[t3] - s2.data[t3]) * (n2.data[t3] - s2.data[t3]);
      return new Be(Math.sqrt(e3), this.getTypeInfo("f32"));
    }
    const r2 = n2, a2 = s2;
    return new Be(Math.abs(r2.value - a2.value), n2.typeInfo);
  }
  _dot(e2, t2) {
    let n2 = 0;
    for (let s2 = 0; s2 < e2.length; ++s2) n2 += t2[s2] * e2[s2];
    return n2;
  }
  Dot(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    return n2 instanceof Me && s2 instanceof Me ? new Be(this._dot(n2.data, s2.data), this.getTypeInfo("f32")) : (console.error(`Dot() expects vector arguments. Line ${e2.line}`), null);
  }
  Dot4U8Packed(e2, t2) {
    return console.error(`TODO: dot4U8Packed. Line ${e2.line}`), null;
  }
  Dot4I8Packed(e2, t2) {
    return console.error(`TODO: dot4I8Packed. Line ${e2.line}`), null;
  }
  Exp(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.exp(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.exp(s2.value), n2.typeInfo);
  }
  Exp2(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.pow(2, e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.pow(2, s2.value), n2.typeInfo);
  }
  ExtractBits(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if ("u32" !== s2.typeInfo.name && "x32" !== s2.typeInfo.name) return console.error(`ExtractBits() expects an i32 offset argument. Line ${e2.line}`), null;
    if ("u32" !== r2.typeInfo.name && "x32" !== r2.typeInfo.name) return console.error(`ExtractBits() expects an i32 count argument. Line ${e2.line}`), null;
    const a2 = s2.value, i2 = r2.value;
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => e3 >> a2 & (1 << i2) - 1), n2.typeInfo);
    if ("i32" !== n2.typeInfo.name && "x32" !== n2.typeInfo.name) return console.error(`ExtractBits() expects an i32 argument. Line ${e2.line}`), null;
    const o2 = n2.value;
    return new Be(o2 >> a2 & (1 << i2) - 1, this.getTypeInfo("i32"));
  }
  FaceForward(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (n2 instanceof Me && s2 instanceof Me && r2 instanceof Me) {
      const e3 = this._dot(s2.data, r2.data);
      return new Me(e3 < 0 ? Array.from(n2.data) : n2.data.map((e4) => -e4), n2.typeInfo);
    }
    return console.error(`FaceForward() expects vector arguments. Line ${e2.line}`), null;
  }
  _firstLeadingBit(e2) {
    return 0 === e2 ? -1 : 31 - Math.clz32(e2);
  }
  FirstLeadingBit(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => this._firstLeadingBit(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(this._firstLeadingBit(s2.value), n2.typeInfo);
  }
  _firstTrailingBit(e2) {
    return 0 === e2 ? -1 : Math.log2(e2 & -e2);
  }
  FirstTrailingBit(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => this._firstTrailingBit(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(this._firstTrailingBit(s2.value), n2.typeInfo);
  }
  Floor(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.floor(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.floor(s2.value), n2.typeInfo);
  }
  Fma(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (n2 instanceof Me && s2 instanceof Me && r2 instanceof Me) return n2.data.length !== s2.data.length || n2.data.length !== r2.data.length ? (console.error(`Fma() expects vectors of the same length. Line ${e2.line}`), null) : new Me(n2.data.map((e3, t3) => e3 * s2.data[t3] + r2.data[t3]), n2.typeInfo);
    const a2 = n2, i2 = s2, o2 = r2;
    return new Be(a2.value * i2.value + o2.value, a2.typeInfo);
  }
  Fract(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => e3 - Math.floor(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(s2.value - Math.floor(s2.value), n2.typeInfo);
  }
  Frexp(e2, t2) {
    return console.error(`TODO: frexp. Line ${e2.line}`), null;
  }
  InsertBits(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2), a2 = this.exec.evalExpression(e2.args[3], t2);
    if ("u32" !== r2.typeInfo.name && "x32" !== r2.typeInfo.name) return console.error(`InsertBits() expects an i32 offset argument. Line ${e2.line}`), null;
    const i2 = r2.value, o2 = (1 << a2.value) - 1 << i2, c2 = ~o2;
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => e3 & c2 | s2.data[t3] << i2 & o2), n2.typeInfo);
    const l2 = n2.value, u2 = s2.value;
    return new Be(l2 & c2 | u2 << i2 & o2, n2.typeInfo);
  }
  InverseSqrt(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => 1 / Math.sqrt(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(1 / Math.sqrt(s2.value), n2.typeInfo);
  }
  Ldexp(e2, t2) {
    return console.error(`TODO: ldexp. Line ${e2.line}`), null;
  }
  Length(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) {
      let e3 = 0;
      return n2.data.forEach((t3) => {
        e3 += t3 * t3;
      }), new Be(Math.sqrt(e3), this.getTypeInfo("f32"));
    }
    const s2 = n2;
    return new Be(Math.abs(s2.value), n2.typeInfo);
  }
  Log(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.log(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.log(s2.value), n2.typeInfo);
  }
  Log2(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.log2(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.log2(s2.value), n2.typeInfo);
  }
  Max(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => Math.max(e3, s2.data[t3])), n2.typeInfo);
    const r2 = n2, a2 = s2;
    return new Be(Math.max(r2.value, a2.value), n2.typeInfo);
  }
  Min(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => Math.min(e3, s2.data[t3])), n2.typeInfo);
    const r2 = n2, a2 = s2;
    return new Be(Math.min(r2.value, a2.value), n2.typeInfo);
  }
  Mix(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (n2 instanceof Me && s2 instanceof Me && r2 instanceof Me) return new Me(n2.data.map((e3, t3) => n2.data[t3] * (1 - r2.data[t3]) + s2.data[t3] * r2.data[t3]), n2.typeInfo);
    const a2 = s2, i2 = r2;
    return new Be(n2.value * (1 - i2.value) + a2.value * i2.value, n2.typeInfo);
  }
  Modf(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => e3 % s2.data[t3]), n2.typeInfo);
    const r2 = s2;
    return new Be(n2.value % r2.value, n2.typeInfo);
  }
  Normalize(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) {
      const s2 = this.Length(e2, t2).value;
      return new Me(n2.data.map((e3) => e3 / s2), n2.typeInfo);
    }
    return console.error(`Normalize() expects a vector argument. Line ${e2.line}`), null;
  }
  Pow(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) return new Me(n2.data.map((e3, t3) => Math.pow(e3, s2.data[t3])), n2.typeInfo);
    const r2 = n2, a2 = s2;
    return new Be(Math.pow(r2.value, a2.value), n2.typeInfo);
  }
  QuantizeToF16(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => e3), n2.typeInfo);
    return new Be(n2.value, n2.typeInfo);
  }
  Radians(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => e3 * Math.PI / 180), n2.typeInfo);
    return new Be(n2.value * Math.PI / 180, this.getTypeInfo("f32"));
  }
  Reflect(e2, t2) {
    let n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (n2 instanceof Me && s2 instanceof Me) {
      const e3 = this._dot(n2.data, s2.data);
      return new Me(n2.data.map((t3, n3) => t3 - 2 * e3 * s2.data[n3]), n2.typeInfo);
    }
    return console.error(`Reflect() expects vector arguments. Line ${e2.line}`), null;
  }
  Refract(e2, t2) {
    let n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (n2 instanceof Me && s2 instanceof Me && r2 instanceof Be) {
      const e3 = this._dot(s2.data, n2.data);
      return new Me(n2.data.map((t3, n3) => {
        const a2 = 1 - r2.value * r2.value * (1 - e3 * e3);
        if (a2 < 0) return 0;
        const i2 = Math.sqrt(a2);
        return r2.value * t3 - (r2.value * e3 + i2) * s2.data[n3];
      }), n2.typeInfo);
    }
    return console.error(`Refract() expects vector arguments and a scalar argument. Line ${e2.line}`), null;
  }
  ReverseBits(e2, t2) {
    return console.error(`TODO: reverseBits. Line ${e2.line}`), null;
  }
  Round(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.round(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.round(s2.value), n2.typeInfo);
  }
  Saturate(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.min(Math.max(e3, 0), 1)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.min(Math.max(s2.value, 0), 1), n2.typeInfo);
  }
  Sign(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.sign(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.sign(s2.value), n2.typeInfo);
  }
  Sin(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.sin(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.sin(s2.value), n2.typeInfo);
  }
  Sinh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.sinh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.sinh(s2.value), n2.typeInfo);
  }
  _smoothstep(e2, t2, n2) {
    const s2 = Math.min(Math.max((n2 - e2) / (t2 - e2), 0), 1);
    return s2 * s2 * (3 - 2 * s2);
  }
  SmoothStep(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2), r2 = this.exec.evalExpression(e2.args[2], t2);
    if (r2 instanceof Me && n2 instanceof Me && s2 instanceof Me) return new Me(r2.data.map((e3, t3) => this._smoothstep(n2.data[t3], s2.data[t3], e3)), r2.typeInfo);
    const a2 = n2, i2 = s2, o2 = r2;
    return new Be(this._smoothstep(a2.value, i2.value, o2.value), r2.typeInfo);
  }
  Sqrt(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.sqrt(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.sqrt(s2.value), n2.typeInfo);
  }
  Step(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2), s2 = this.exec.evalExpression(e2.args[1], t2);
    if (s2 instanceof Me && n2 instanceof Me) return new Me(s2.data.map((e3, t3) => e3 < n2.data[t3] ? 0 : 1), s2.typeInfo);
    const r2 = n2;
    return new Be(s2.value < r2.value ? 0 : 1, r2.typeInfo);
  }
  Tan(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.tan(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.tan(s2.value), n2.typeInfo);
  }
  Tanh(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.tanh(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.tanh(s2.value), n2.typeInfo);
  }
  _getTransposeType(e2) {
    const t2 = e2.getTypeName();
    return "mat2x2f" === t2 || "mat2x2h" === t2 ? e2 : "mat2x3f" === t2 ? this.getTypeInfo("mat3x2f") : "mat2x3h" === t2 ? this.getTypeInfo("mat3x2h") : "mat2x4f" === t2 ? this.getTypeInfo("mat4x2f") : "mat2x4h" === t2 ? this.getTypeInfo("mat4x2h") : "mat3x2f" === t2 ? this.getTypeInfo("mat2x3f") : "mat3x2h" === t2 ? this.getTypeInfo("mat2x3h") : "mat3x3f" === t2 || "mat3x3h" === t2 ? e2 : "mat3x4f" === t2 ? this.getTypeInfo("mat4x3f") : "mat3x4h" === t2 ? this.getTypeInfo("mat4x3h") : "mat4x2f" === t2 ? this.getTypeInfo("mat2x4f") : "mat4x2h" === t2 ? this.getTypeInfo("mat2x4h") : "mat4x3f" === t2 ? this.getTypeInfo("mat3x4f") : "mat4x3h" === t2 ? this.getTypeInfo("mat3x4h") : ("mat4x4f" === t2 || "mat4x4h" === t2 || console.error(`Invalid matrix type ${t2}`), e2);
  }
  Transpose(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (!(n2 instanceof Ue)) return console.error(`Transpose() expects a matrix argument. Line ${e2.line}`), null;
    const s2 = this._getTransposeType(n2.typeInfo);
    if ("mat2x2" === n2.typeInfo.name || "mat2x2f" === n2.typeInfo.name || "mat2x2h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[2], e3[1], e3[3]], s2);
    }
    if ("mat2x3" === n2.typeInfo.name || "mat2x3f" === n2.typeInfo.name || "mat2x3h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[3], e3[6], e3[1], e3[4], e3[7]], s2);
    }
    if ("mat2x4" === n2.typeInfo.name || "mat2x4f" === n2.typeInfo.name || "mat2x4h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[4], e3[8], e3[12], e3[1], e3[5], e3[9], e3[13]], s2);
    }
    if ("mat3x2" === n2.typeInfo.name || "mat3x2f" === n2.typeInfo.name || "mat3x2h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[3], e3[1], e3[4], e3[2], e3[5]], s2);
    }
    if ("mat3x3" === n2.typeInfo.name || "mat3x3f" === n2.typeInfo.name || "mat3x3h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[3], e3[6], e3[1], e3[4], e3[7], e3[2], e3[5], e3[8]], s2);
    }
    if ("mat3x4" === n2.typeInfo.name || "mat3x4f" === n2.typeInfo.name || "mat3x4h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[4], e3[8], e3[12], e3[1], e3[5], e3[9], e3[13], e3[2], e3[6], e3[10], e3[14]], s2);
    }
    if ("mat4x2" === n2.typeInfo.name || "mat4x2f" === n2.typeInfo.name || "mat4x2h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[4], e3[1], e3[5], e3[2], e3[6]], s2);
    }
    if ("mat4x3" === n2.typeInfo.name || "mat4x3f" === n2.typeInfo.name || "mat4x3h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[4], e3[8], e3[1], e3[5], e3[9], e3[2], e3[6], e3[10]], s2);
    }
    if ("mat4x4" === n2.typeInfo.name || "mat4x4f" === n2.typeInfo.name || "mat4x4h" === n2.typeInfo.name) {
      const e3 = n2.data;
      return new Ue([e3[0], e3[4], e3[8], e3[12], e3[1], e3[5], e3[9], e3[13], e3[2], e3[6], e3[10], e3[14], e3[3], e3[7], e3[11], e3[15]], s2);
    }
    return console.error(`Invalid matrix type ${n2.typeInfo.name}`), null;
  }
  Trunc(e2, t2) {
    const n2 = this.exec.evalExpression(e2.args[0], t2);
    if (n2 instanceof Me) return new Me(n2.data.map((e3) => Math.trunc(e3)), n2.typeInfo);
    const s2 = n2;
    return new Be(Math.trunc(s2.value), n2.typeInfo);
  }
  Dpdx(e2, t2) {
    return console.error(`TODO: dpdx. Line ${e2.line}`), null;
  }
  DpdxCoarse(e2, t2) {
    return console.error(`TODO: dpdxCoarse. Line ${e2.line}`), null;
  }
  DpdxFine(e2, t2) {
    return console.error("TODO: dpdxFine"), null;
  }
  Dpdy(e2, t2) {
    return console.error("TODO: dpdy"), null;
  }
  DpdyCoarse(e2, t2) {
    return console.error("TODO: dpdyCoarse"), null;
  }
  DpdyFine(e2, t2) {
    return console.error("TODO: dpdyFine"), null;
  }
  Fwidth(e2, t2) {
    return console.error("TODO: fwidth"), null;
  }
  FwidthCoarse(e2, t2) {
    return console.error("TODO: fwidthCoarse"), null;
  }
  FwidthFine(e2, t2) {
    return console.error("TODO: fwidthFine"), null;
  }
  TextureDimensions(e2, t2) {
    const n2 = e2.args[0], s2 = e2.args.length > 1 ? this.exec.evalExpression(e2.args[1], t2).value : 0;
    if (n2 instanceof ge) {
      const r2 = n2.name, a2 = t2.getVariableValue(r2);
      if (a2 instanceof We) {
        if (s2 < 0 || s2 >= a2.mipLevelCount) return console.error(`Invalid mip level for textureDimensions. Line ${e2.line}`), null;
        const t3 = a2.getMipLevelSize(s2), n3 = a2.dimension;
        return "1d" === n3 ? new Be(t3[0], this.getTypeInfo("u32")) : "3d" === n3 ? new Me(t3, this.getTypeInfo("vec3u")) : "2d" === n3 ? new Me(t3.slice(0, 2), this.getTypeInfo("vec2u")) : (console.error(`Invalid texture dimension ${n3} not found. Line ${e2.line}`), null);
      }
      return console.error(`Texture ${r2} not found. Line ${e2.line}`), null;
    }
    return console.error(`Invalid texture argument for textureDimensions. Line ${e2.line}`), null;
  }
  TextureGather(e2, t2) {
    return console.error("TODO: textureGather"), null;
  }
  TextureGatherCompare(e2, t2) {
    return console.error("TODO: textureGatherCompare"), null;
  }
  TextureLoad(e2, t2) {
    const n2 = e2.args[0], s2 = this.exec.evalExpression(e2.args[1], t2), r2 = e2.args.length > 2 ? this.exec.evalExpression(e2.args[2], t2).value : 0;
    if (!(s2 instanceof Me) || 2 !== s2.data.length) return console.error(`Invalid UV argument for textureLoad. Line ${e2.line}`), null;
    if (n2 instanceof ge) {
      const a2 = n2.name, i2 = t2.getVariableValue(a2);
      if (i2 instanceof We) {
        const t3 = Math.floor(s2.data[0]), n3 = Math.floor(s2.data[1]);
        if (t3 < 0 || t3 >= i2.width || n3 < 0 || n3 >= i2.height) return console.error(`Texture ${a2} out of bounds. Line ${e2.line}`), null;
        const o2 = i2.getPixel(t3, n3, 0, r2);
        return null === o2 ? (console.error(`Invalid texture format for textureLoad. Line ${e2.line}`), null) : new Me(o2, this.getTypeInfo("vec4f"));
      }
      return console.error(`Texture ${a2} not found. Line ${e2.line}`), null;
    }
    return console.error(`Invalid texture argument for textureLoad. Line ${e2.line}`), null;
  }
  TextureNumLayers(e2, t2) {
    const n2 = e2.args[0];
    if (n2 instanceof ge) {
      const s2 = n2.name, r2 = t2.getVariableValue(s2);
      return r2 instanceof We ? new Be(r2.depthOrArrayLayers, this.getTypeInfo("u32")) : (console.error(`Texture ${s2} not found. Line ${e2.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumLayers. Line ${e2.line}`), null;
  }
  TextureNumLevels(e2, t2) {
    const n2 = e2.args[0];
    if (n2 instanceof ge) {
      const s2 = n2.name, r2 = t2.getVariableValue(s2);
      return r2 instanceof We ? new Be(r2.mipLevelCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s2} not found. Line ${e2.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumLevels. Line ${e2.line}`), null;
  }
  TextureNumSamples(e2, t2) {
    const n2 = e2.args[0];
    if (n2 instanceof ge) {
      const s2 = n2.name, r2 = t2.getVariableValue(s2);
      return r2 instanceof We ? new Be(r2.sampleCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s2} not found. Line ${e2.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumSamples. Line ${e2.line}`), null;
  }
  TextureSample(e2, t2) {
    return console.error("TODO: textureSample"), null;
  }
  TextureSampleBias(e2, t2) {
    return console.error("TODO: textureSampleBias"), null;
  }
  TextureSampleCompare(e2, t2) {
    return console.error("TODO: textureSampleCompare"), null;
  }
  TextureSampleCompareLevel(e2, t2) {
    return console.error("TODO: textureSampleCompareLevel"), null;
  }
  TextureSampleGrad(e2, t2) {
    return console.error("TODO: textureSampleGrad"), null;
  }
  TextureSampleLevel(e2, t2) {
    return console.error("TODO: textureSampleLevel"), null;
  }
  TextureSampleBaseClampToEdge(e2, t2) {
    return console.error("TODO: textureSampleBaseClampToEdge"), null;
  }
  TextureStore(e2, t2) {
    const n2 = e2.args[0], s2 = this.exec.evalExpression(e2.args[1], t2), r2 = 4 === e2.args.length ? this.exec.evalExpression(e2.args[2], t2).value : 0, a2 = 4 === e2.args.length ? this.exec.evalExpression(e2.args[3], t2).data : this.exec.evalExpression(e2.args[2], t2).data;
    if (4 !== a2.length) return console.error(`Invalid value argument for textureStore. Line ${e2.line}`), null;
    if (!(s2 instanceof Me) || 2 !== s2.data.length) return console.error(`Invalid UV argument for textureStore. Line ${e2.line}`), null;
    if (n2 instanceof ge) {
      const i2 = n2.name, o2 = t2.getVariableValue(i2);
      if (o2 instanceof We) {
        const t3 = o2.getMipLevelSize(0), n3 = Math.floor(s2.data[0]), c2 = Math.floor(s2.data[1]);
        return n3 < 0 || n3 >= t3[0] || c2 < 0 || c2 >= t3[1] ? (console.error(`Texture ${i2} out of bounds. Line ${e2.line}`), null) : (o2.setPixel(n3, c2, 0, r2, Array.from(a2)), null);
      }
      return console.error(`Texture ${i2} not found. Line ${e2.line}`), null;
    }
    return console.error(`Invalid texture argument for textureStore. Line ${e2.line}`), null;
  }
  AtomicLoad(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2);
    return t2.getVariable(s2).value.getSubData(this.exec, n2.postfix, t2);
  }
  AtomicStore(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), null;
  }
  AtomicAdd(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value += i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicSub(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value -= i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicMax(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = Math.max(o2.value, i2.value)), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicMin(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = Math.min(o2.value, i2.value)), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicAnd(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = o2.value & i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicOr(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = o2.value | i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicXor(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = o2.value ^ i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicExchange(e2, t2) {
    let n2 = e2.args[0];
    n2 instanceof ke && (n2 = n2.right);
    const s2 = this.exec.getVariableName(n2, t2), r2 = t2.getVariable(s2);
    let a2 = e2.args[1];
    const i2 = this.exec.evalExpression(a2, t2), o2 = r2.value.getSubData(this.exec, n2.postfix, t2), c2 = new Be(o2.value, o2.typeInfo);
    return o2 instanceof Be && i2 instanceof Be && (o2.value = i2.value), r2.value instanceof Pe && r2.value.setDataValue(this.exec, o2, n2.postfix, t2), c2;
  }
  AtomicCompareExchangeWeak(e2, t2) {
    return console.error("TODO: atomicCompareExchangeWeak"), null;
  }
  Pack4x8snorm(e2, t2) {
    return console.error("TODO: pack4x8snorm"), null;
  }
  Pack4x8unorm(e2, t2) {
    return console.error("TODO: pack4x8unorm"), null;
  }
  Pack4xI8(e2, t2) {
    return console.error("TODO: pack4xI8"), null;
  }
  Pack4xU8(e2, t2) {
    return console.error("TODO: pack4xU8"), null;
  }
  Pack4x8Clamp(e2, t2) {
    return console.error("TODO: pack4x8Clamp"), null;
  }
  Pack4xU8Clamp(e2, t2) {
    return console.error("TODO: pack4xU8Clamp"), null;
  }
  Pack2x16snorm(e2, t2) {
    return console.error("TODO: pack2x16snorm"), null;
  }
  Pack2x16unorm(e2, t2) {
    return console.error("TODO: pack2x16unorm"), null;
  }
  Pack2x16float(e2, t2) {
    return console.error("TODO: pack2x16float"), null;
  }
  Unpack4x8snorm(e2, t2) {
    return console.error("TODO: unpack4x8snorm"), null;
  }
  Unpack4x8unorm(e2, t2) {
    return console.error("TODO: unpack4x8unorm"), null;
  }
  Unpack4xI8(e2, t2) {
    return console.error("TODO: unpack4xI8"), null;
  }
  Unpack4xU8(e2, t2) {
    return console.error("TODO: unpack4xU8"), null;
  }
  Unpack2x16snorm(e2, t2) {
    return console.error("TODO: unpack2x16snorm"), null;
  }
  Unpack2x16unorm(e2, t2) {
    return console.error("TODO: unpack2x16unorm"), null;
  }
  Unpack2x16float(e2, t2) {
    return console.error("TODO: unpack2x16float"), null;
  }
  StorageBarrier(e2, t2) {
    return null;
  }
  TextureBarrier(e2, t2) {
    return null;
  }
  WorkgroupBarrier(e2, t2) {
    return null;
  }
  WorkgroupUniformLoad(e2, t2) {
    return null;
  }
  SubgroupAdd(e2, t2) {
    return console.error("TODO: subgroupAdd"), null;
  }
  SubgroupExclusiveAdd(e2, t2) {
    return console.error("TODO: subgroupExclusiveAdd"), null;
  }
  SubgroupInclusiveAdd(e2, t2) {
    return console.error("TODO: subgroupInclusiveAdd"), null;
  }
  SubgroupAll(e2, t2) {
    return console.error("TODO: subgroupAll"), null;
  }
  SubgroupAnd(e2, t2) {
    return console.error("TODO: subgroupAnd"), null;
  }
  SubgroupAny(e2, t2) {
    return console.error("TODO: subgroupAny"), null;
  }
  SubgroupBallot(e2, t2) {
    return console.error("TODO: subgroupBallot"), null;
  }
  SubgroupBroadcast(e2, t2) {
    return console.error("TODO: subgroupBroadcast"), null;
  }
  SubgroupBroadcastFirst(e2, t2) {
    return console.error("TODO: subgroupBroadcastFirst"), null;
  }
  SubgroupElect(e2, t2) {
    return console.error("TODO: subgroupElect"), null;
  }
  SubgroupMax(e2, t2) {
    return console.error("TODO: subgroupMax"), null;
  }
  SubgroupMin(e2, t2) {
    return console.error("TODO: subgroupMin"), null;
  }
  SubgroupMul(e2, t2) {
    return console.error("TODO: subgroupMul"), null;
  }
  SubgroupExclusiveMul(e2, t2) {
    return console.error("TODO: subgroupExclusiveMul"), null;
  }
  SubgroupInclusiveMul(e2, t2) {
    return console.error("TODO: subgroupInclusiveMul"), null;
  }
  SubgroupOr(e2, t2) {
    return console.error("TODO: subgroupOr"), null;
  }
  SubgroupShuffle(e2, t2) {
    return console.error("TODO: subgroupShuffle"), null;
  }
  SubgroupShuffleDown(e2, t2) {
    return console.error("TODO: subgroupShuffleDown"), null;
  }
  SubgroupShuffleUp(e2, t2) {
    return console.error("TODO: subgroupShuffleUp"), null;
  }
  SubgroupShuffleXor(e2, t2) {
    return console.error("TODO: subgroupShuffleXor"), null;
  }
  SubgroupXor(e2, t2) {
    return console.error("TODO: subgroupXor"), null;
  }
  QuadBroadcast(e2, t2) {
    return console.error("TODO: quadBroadcast"), null;
  }
  QuadSwapDiagonal(e2, t2) {
    return console.error("TODO: quadSwapDiagonal"), null;
  }
  QuadSwapX(e2, t2) {
    return console.error("TODO: quadSwapX"), null;
  }
  QuadSwapY(e2, t2) {
    return console.error("TODO: quadSwapY"), null;
  }
};
var ft = { vec2: 2, vec2f: 2, vec2i: 2, vec2u: 2, vec2b: 2, vec2h: 2, vec3: 3, vec3f: 3, vec3i: 3, vec3u: 3, vec3b: 3, vec3h: 3, vec4: 4, vec4f: 4, vec4i: 4, vec4u: 4, vec4b: 4, vec4h: 4 };
var pt = { mat2x2: [2, 2, 4], mat2x2f: [2, 2, 4], mat2x2h: [2, 2, 4], mat2x3: [2, 3, 6], mat2x3f: [2, 3, 6], mat2x3h: [2, 3, 6], mat2x4: [2, 4, 8], mat2x4f: [2, 4, 8], mat2x4h: [2, 4, 8], mat3x2: [3, 2, 6], mat3x2f: [3, 2, 6], mat3x2h: [3, 2, 6], mat3x3: [3, 3, 9], mat3x3f: [3, 3, 9], mat3x3h: [3, 3, 9], mat3x4: [3, 4, 12], mat3x4f: [3, 4, 12], mat3x4h: [3, 4, 12], mat4x2: [4, 2, 8], mat4x2f: [4, 2, 8], mat4x2h: [4, 2, 8], mat4x3: [4, 3, 12], mat4x3f: [4, 3, 12], mat4x3h: [4, 3, 12], mat4x4: [4, 4, 16], mat4x4f: [4, 4, 16], mat4x4h: [4, 4, 16] };
var dt = class _dt extends ut {
  constructor(e2, t2) {
    var n2;
    super(), this.ast = null != e2 ? e2 : [], this.reflection = new at(), this.reflection.updateAST(this.ast), this.context = null !== (n2 = null == t2 ? void 0 : t2.clone()) && void 0 !== n2 ? n2 : new lt(), this.builtins = new ht(this), this.typeInfo = { bool: this.getTypeInfo(ae.bool), i32: this.getTypeInfo(ae.i32), u32: this.getTypeInfo(ae.u32), f32: this.getTypeInfo(ae.f32), f16: this.getTypeInfo(ae.f16), vec2f: this.getTypeInfo(ce.vec2f), vec2u: this.getTypeInfo(ce.vec2u), vec2i: this.getTypeInfo(ce.vec2i), vec2h: this.getTypeInfo(ce.vec2h), vec3f: this.getTypeInfo(ce.vec3f), vec3u: this.getTypeInfo(ce.vec3u), vec3i: this.getTypeInfo(ce.vec3i), vec3h: this.getTypeInfo(ce.vec3h), vec4f: this.getTypeInfo(ce.vec4f), vec4u: this.getTypeInfo(ce.vec4u), vec4i: this.getTypeInfo(ce.vec4i), vec4h: this.getTypeInfo(ce.vec4h), mat2x2f: this.getTypeInfo(ce.mat2x2f), mat2x3f: this.getTypeInfo(ce.mat2x3f), mat2x4f: this.getTypeInfo(ce.mat2x4f), mat3x2f: this.getTypeInfo(ce.mat3x2f), mat3x3f: this.getTypeInfo(ce.mat3x3f), mat3x4f: this.getTypeInfo(ce.mat3x4f), mat4x2f: this.getTypeInfo(ce.mat4x2f), mat4x3f: this.getTypeInfo(ce.mat4x3f), mat4x4f: this.getTypeInfo(ce.mat4x4f) };
  }
  getVariableValue(e2) {
    var t2, n2;
    const r2 = null !== (n2 = null === (t2 = this.context.getVariable(e2)) || void 0 === t2 ? void 0 : t2.value) && void 0 !== n2 ? n2 : null;
    if (null === r2) return null;
    if (r2 instanceof Be) return r2.value;
    if (r2 instanceof Me) return Array.from(r2.data);
    if (r2 instanceof Ue) return Array.from(r2.data);
    if (r2 instanceof Pe && r2.typeInfo instanceof s) {
      if ("u32" === r2.typeInfo.format.name) return Array.from(new Uint32Array(r2.buffer, r2.offset, r2.typeInfo.count));
      if ("i32" === r2.typeInfo.format.name) return Array.from(new Int32Array(r2.buffer, r2.offset, r2.typeInfo.count));
      if ("f32" === r2.typeInfo.format.name) return Array.from(new Float32Array(r2.buffer, r2.offset, r2.typeInfo.count));
    }
    return console.error(`Unsupported return variable type ${r2.typeInfo.name}`), null;
  }
  execute(e2) {
    (e2 = null != e2 ? e2 : {}).constants && this._setOverrides(e2.constants, this.context), this._execStatements(this.ast, this.context);
  }
  dispatchWorkgroups(e2, t2, n2, s2) {
    const r2 = this.context.clone();
    (s2 = null != s2 ? s2 : {}).constants && this._setOverrides(s2.constants, r2), this._execStatements(this.ast, r2);
    const a2 = r2.getFunction(e2);
    if (!a2) return void console.error(`Function ${e2} not found`);
    if ("number" == typeof t2) t2 = [t2, 1, 1];
    else {
      if (0 === t2.length) return void console.error("Invalid dispatch count");
      1 === t2.length ? t2 = [t2[0], 1, 1] : 2 === t2.length ? t2 = [t2[0], t2[1], 1] : t2.length > 3 && (t2 = [t2[0], t2[1], t2[2]]);
    }
    const i2 = t2[0], o2 = t2[1], c2 = t2[2], l2 = this.getTypeInfo("vec3u");
    r2.setVariable("@num_workgroups", new Me(t2, l2));
    const u2 = this.reflection.getFunctionInfo(e2);
    null === u2 && console.error(`Function ${e2} not found in reflection data`);
    for (const e3 in n2) for (const t3 in n2[e3]) {
      const s3 = n2[e3][t3];
      r2.variables.forEach((n3) => {
        var r3;
        const a3 = n3.node;
        if (null == a3 ? void 0 : a3.attributes) {
          let i3 = null, o3 = null;
          for (const e4 of a3.attributes) "binding" === e4.name ? i3 = e4.value : "group" === e4.name && (o3 = e4.value);
          if (t3 == i3 && e3 == o3) {
            let i4 = false;
            for (const s4 of u2.resources) if (s4.name === n3.name && s4.group === parseInt(e3) && s4.binding === parseInt(t3)) {
              i4 = true;
              break;
            }
            if (i4) if (void 0 !== s3.texture && void 0 !== s3.descriptor) {
              const e4 = new We(s3.texture, this.getTypeInfo(a3.type), s3.descriptor, null !== (r3 = s3.texture.view) && void 0 !== r3 ? r3 : null);
              n3.value = e4;
            } else void 0 !== s3.uniform ? n3.value = new Pe(s3.uniform, this.getTypeInfo(a3.type)) : n3.value = new Pe(s3, this.getTypeInfo(a3.type));
          }
        }
      });
    }
    for (let e3 = 0; e3 < c2; ++e3) for (let t3 = 0; t3 < o2; ++t3) for (let n3 = 0; n3 < i2; ++n3) r2.setVariable("@workgroup_id", new Me([n3, t3, e3], this.getTypeInfo("vec3u"))), this._dispatchWorkgroup(a2, [n3, t3, e3], r2);
  }
  execStatement(e2, t2) {
    if (e2 instanceof Y) return this.evalExpression(e2.value, t2);
    if (e2 instanceof se) {
      if (e2.condition) {
        const n2 = this.evalExpression(e2.condition, t2);
        if (!(n2 instanceof Be)) throw new Error("Invalid break-if condition");
        if (!n2.value) return null;
      }
      return _dt._breakObj;
    }
    if (e2 instanceof re) return _dt._continueObj;
    if (e2 instanceof U) this._let(e2, t2);
    else if (e2 instanceof F) this._var(e2, t2);
    else if (e2 instanceof P) this._const(e2, t2);
    else if (e2 instanceof D) this._function(e2, t2);
    else {
      if (e2 instanceof Q) return this._if(e2, t2);
      if (e2 instanceof Z) return this._switch(e2, t2);
      if (e2 instanceof B) return this._for(e2, t2);
      if (e2 instanceof V) return this._while(e2, t2);
      if (e2 instanceof j) return this._loop(e2, t2);
      if (e2 instanceof O) {
        const n2 = t2.clone();
        return n2.currentFunctionName = t2.currentFunctionName, this._execStatements(e2.body, n2);
      }
      if (e2 instanceof G) this._assign(e2, t2);
      else if (e2 instanceof R) this._increment(e2, t2);
      else {
        if (e2 instanceof oe) return null;
        if (e2 instanceof M) {
          const n2 = e2.name;
          null === t2.getVariable(n2) && t2.setVariable(n2, new Be(0, this.getTypeInfo("u32")));
        } else if (e2 instanceof X) this._call(e2, t2);
        else {
          if (e2 instanceof ee) return null;
          if (e2 instanceof te) return null;
          console.error("Invalid statement type.", e2, `Line ${e2.line}`);
        }
      }
    }
    return null;
  }
  evalExpression(e2, t2) {
    return e2 instanceof Ie ? this._evalBinaryOp(e2, t2) : e2 instanceof xe ? this._evalLiteral(e2, t2) : e2 instanceof ge ? this._evalVariable(e2, t2) : e2 instanceof me ? this._evalCall(e2, t2) : e2 instanceof de ? this._evalCreate(e2, t2) : e2 instanceof _e ? this._evalConst(e2, t2) : e2 instanceof ye ? this._evalBitcast(e2, t2) : e2 instanceof ke ? this._evalUnaryOp(e2, t2) : (console.error("Invalid expression type", e2, `Line ${e2.line}`), null);
  }
  getTypeInfo(e2) {
    var t2;
    if (e2 instanceof ae) {
      const t3 = this.reflection.getTypeInfo(e2);
      if (null !== t3) return t3;
    }
    let n2 = null !== (t2 = this.typeInfo[e2]) && void 0 !== t2 ? t2 : null;
    return null !== n2 || (n2 = this.reflection.getTypeInfoByName(e2)), n2;
  }
  _setOverrides(e2, t2) {
    for (const n2 in e2) {
      const s2 = e2[n2], r2 = this.reflection.getOverrideInfo(n2);
      null !== r2 ? (null === r2.type && (r2.type = this.getTypeInfo("u32")), "u32" === r2.type.name || "i32" === r2.type.name || "f32" === r2.type.name || "f16" === r2.type.name ? t2.setVariable(n2, new Be(s2, r2.type)) : "bool" === r2.type.name ? t2.setVariable(n2, new Be(s2 ? 1 : 0, r2.type)) : "vec2" === r2.type.name || "vec3" === r2.type.name || "vec4" === r2.type.name || "vec2f" === r2.type.name || "vec3f" === r2.type.name || "vec4f" === r2.type.name || "vec2i" === r2.type.name || "vec3i" === r2.type.name || "vec4i" === r2.type.name || "vec2u" === r2.type.name || "vec3u" === r2.type.name || "vec4u" === r2.type.name || "vec2h" === r2.type.name || "vec3h" === r2.type.name || "vec4h" === r2.type.name ? t2.setVariable(n2, new Me(s2, r2.type)) : console.error(`Invalid constant type for ${n2}`)) : console.error(`Override ${n2} does not exist in the shader.`);
    }
  }
  _dispatchWorkgroup(e2, t2, n2) {
    const s2 = [1, 1, 1];
    for (const t3 of e2.node.attributes) if ("workgroup_size" === t3.name) {
      if (t3.value.length > 0) {
        const e3 = n2.getVariableValue(t3.value[0]);
        s2[0] = e3 instanceof Be ? e3.value : parseInt(t3.value[0]);
      }
      if (t3.value.length > 1) {
        const e3 = n2.getVariableValue(t3.value[1]);
        s2[1] = e3 instanceof Be ? e3.value : parseInt(t3.value[1]);
      }
      if (t3.value.length > 2) {
        const e3 = n2.getVariableValue(t3.value[2]);
        s2[2] = e3 instanceof Be ? e3.value : parseInt(t3.value[2]);
      }
    }
    const r2 = this.getTypeInfo("vec3u"), a2 = this.getTypeInfo("u32");
    n2.setVariable("@workgroup_size", new Me(s2, r2));
    const i2 = s2[0], o2 = s2[1], c2 = s2[2];
    for (let l2 = 0, u2 = 0; l2 < c2; ++l2) for (let c3 = 0; c3 < o2; ++c3) for (let o3 = 0; o3 < i2; ++o3, ++u2) {
      const i3 = [o3, c3, l2], h2 = [o3 + t2[0] * s2[0], c3 + t2[1] * s2[1], l2 + t2[2] * s2[2]];
      n2.setVariable("@local_invocation_id", new Me(i3, r2)), n2.setVariable("@global_invocation_id", new Me(h2, r2)), n2.setVariable("@local_invocation_index", new Be(u2, a2)), this._dispatchExec(e2, n2);
    }
  }
  _dispatchExec(e2, t2) {
    for (const n2 of e2.node.args) for (const e3 of n2.attributes) if ("builtin" === e3.name) {
      const s2 = `@${e3.value}`, r2 = t2.getVariable(s2);
      void 0 !== r2 && t2.variables.set(n2.name, r2);
    }
    this._execStatements(e2.node.body, t2);
  }
  getVariableName(e2, t2) {
    for (; e2 instanceof ke; ) e2 = e2.right;
    return e2 instanceof ge ? e2.name : (console.error("Unknown variable type", e2, "Line", e2.line), null);
  }
  _execStatements(e2, t2) {
    for (const n2 of e2) {
      if (n2 instanceof Array) {
        const e4 = t2.clone(), s2 = this._execStatements(n2, e4);
        if (s2) return s2;
        continue;
      }
      const e3 = this.execStatement(n2, t2);
      if (e3) return e3;
    }
    return null;
  }
  _call(e2, t2) {
    const n2 = t2.clone();
    n2.currentFunctionName = e2.name;
    const s2 = t2.getFunction(e2.name);
    if (s2) {
      for (let t3 = 0; t3 < s2.node.args.length; ++t3) {
        const r2 = s2.node.args[t3], a2 = this.evalExpression(e2.args[t3], n2);
        n2.setVariable(r2.name, a2, r2);
      }
      this._execStatements(s2.node.body, n2);
    } else if (e2.isBuiltin) this._callBuiltinFunction(e2, n2);
    else {
      this.getTypeInfo(e2.name) && this._evalCreate(e2, t2);
    }
  }
  _increment(e2, t2) {
    const n2 = this.getVariableName(e2.variable, t2), s2 = t2.getVariable(n2);
    s2 ? "++" === e2.operator ? s2.value instanceof Be ? s2.value.value++ : console.error(`Variable ${n2} is not a scalar. Line ${e2.line}`) : "--" === e2.operator ? s2.value instanceof Be ? s2.value.value-- : console.error(`Variable ${n2} is not a scalar. Line ${e2.line}`) : console.error(`Unknown increment operator ${e2.operator}. Line ${e2.line}`) : console.error(`Variable ${n2} not found. Line ${e2.line}`);
  }
  _getVariableData(e2, t2) {
    if (e2 instanceof ge) {
      const n2 = this.getVariableName(e2, t2), s2 = t2.getVariable(n2);
      return null === s2 ? (console.error(`Variable ${n2} not found. Line ${e2.line}`), null) : s2.value.getSubData(this, e2.postfix, t2);
    }
    if (e2 instanceof ke) {
      if ("*" === e2.operator) {
        const n2 = this._getVariableData(e2.right, t2);
        return n2 instanceof Oe ? n2.reference.getSubData(this, e2.postfix, t2) : (console.error(`Variable ${e2.right} is not a pointer. Line ${e2.line}`), null);
      }
      if ("&" === e2.operator) {
        const n2 = this._getVariableData(e2.right, t2);
        return new Oe(n2);
      }
    }
    return null;
  }
  _assign(e2, t2) {
    let n2 = null, s2 = "<var>", r2 = null;
    if (e2.variable instanceof ke) {
      const n3 = this._getVariableData(e2.variable, t2), s3 = this.evalExpression(e2.value, t2), r3 = e2.operator;
      if ("=" === r3) {
        if (n3 instanceof Be || n3 instanceof Me || n3 instanceof Ue) {
          if (s3 instanceof Be || s3 instanceof Me || s3 instanceof Ue && n3.data.length === s3.data.length) return void n3.data.set(s3.data);
          console.error(`Invalid assignment. Line ${e2.line}`);
        } else if (n3 instanceof Pe && s3 instanceof Pe && n3.buffer.byteLength - n3.offset >= s3.buffer.byteLength - s3.offset) return void (n3.buffer.byteLength % 4 == 0 ? new Uint32Array(n3.buffer, n3.offset, n3.typeInfo.size / 4).set(new Uint32Array(s3.buffer, s3.offset, s3.typeInfo.size / 4)) : new Uint8Array(n3.buffer, n3.offset, n3.typeInfo.size).set(new Uint8Array(s3.buffer, s3.offset, s3.typeInfo.size)));
        return console.error(`Invalid assignment. Line ${e2.line}`), null;
      }
      if ("+=" === r3) return n3 instanceof Be || n3 instanceof Me || n3 instanceof Ue ? s3 instanceof Be || s3 instanceof Me || s3 instanceof Ue ? void n3.data.set(s3.data.map((e3, t3) => n3.data[t3] + e3)) : void console.error(`Invalid assignment . Line ${e2.line}`) : void console.error(`Invalid assignment. Line ${e2.line}`);
      if ("-=" === r3) return (n3 instanceof Be || n3 instanceof Me || n3 instanceof Ue) && (s3 instanceof Be || s3 instanceof Me || s3 instanceof Ue) ? void n3.data.set(s3.data.map((e3, t3) => n3.data[t3] - e3)) : void console.error(`Invalid assignment. Line ${e2.line}`);
    }
    if (e2.variable instanceof ke) {
      if ("*" === e2.variable.operator) {
        s2 = this.getVariableName(e2.variable.right, t2);
        const r3 = t2.getVariable(s2);
        if (!(r3 && r3.value instanceof Oe)) return void console.error(`Variable ${s2} is not a pointer. Line ${e2.line}`);
        n2 = r3.value.reference;
        let a3 = e2.variable.postfix;
        if (!a3) {
          let t3 = e2.variable.right;
          for (; t3 instanceof ke; ) {
            if (t3.postfix) {
              a3 = t3.postfix;
              break;
            }
            t3 = t3.right;
          }
        }
        a3 && (n2 = n2.getSubData(this, a3, t2));
      }
    } else {
      r2 = e2.variable.postfix, s2 = this.getVariableName(e2.variable, t2);
      const a3 = t2.getVariable(s2);
      if (null === a3) return void console.error(`Variable ${s2} not found. Line ${e2.line}`);
      n2 = a3.value;
    }
    if (n2 instanceof Oe && (n2 = n2.reference), null === n2) return void console.error(`Variable ${s2} not found. Line ${e2.line}`);
    const a2 = this.evalExpression(e2.value, t2), i2 = e2.operator;
    if ("=" !== i2) {
      const s3 = n2.getSubData(this, r2, t2);
      if (s3 instanceof Me && a2 instanceof Be) {
        const t3 = s3.data, n3 = a2.value;
        if ("+=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] += n3;
        else if ("-=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] -= n3;
        else if ("*=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] *= n3;
        else if ("/=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] /= n3;
        else if ("%=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] %= n3;
        else if ("&=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] &= n3;
        else if ("|=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] |= n3;
        else if ("^=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] ^= n3;
        else if ("<<=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] <<= n3;
        else if (">>=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] >>= n3;
        else console.error(`Invalid operator ${i2}. Line ${e2.line}`);
      } else if (s3 instanceof Me && a2 instanceof Me) {
        const t3 = s3.data, n3 = a2.data;
        if (t3.length !== n3.length) return void console.error(`Vector length mismatch. Line ${e2.line}`);
        if ("+=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] += n3[e3];
        else if ("-=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] -= n3[e3];
        else if ("*=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] *= n3[e3];
        else if ("/=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] /= n3[e3];
        else if ("%=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] %= n3[e3];
        else if ("&=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] &= n3[e3];
        else if ("|=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] |= n3[e3];
        else if ("^=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] ^= n3[e3];
        else if ("<<=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] <<= n3[e3];
        else if (">>=" === i2) for (let e3 = 0; e3 < t3.length; ++e3) t3[e3] >>= n3[e3];
        else console.error(`Invalid operator ${i2}. Line ${e2.line}`);
      } else {
        if (!(s3 instanceof Be && a2 instanceof Be)) return void console.error(`Invalid type for ${e2.operator} operator. Line ${e2.line}`);
        "+=" === i2 ? s3.value += a2.value : "-=" === i2 ? s3.value -= a2.value : "*=" === i2 ? s3.value *= a2.value : "/=" === i2 ? s3.value /= a2.value : "%=" === i2 ? s3.value %= a2.value : "&=" === i2 ? s3.value &= a2.value : "|=" === i2 ? s3.value |= a2.value : "^=" === i2 ? s3.value ^= a2.value : "<<=" === i2 ? s3.value <<= a2.value : ">>=" === i2 ? s3.value >>= a2.value : console.error(`Invalid operator ${i2}. Line ${e2.line}`);
      }
      return void (n2 instanceof Pe && n2.setDataValue(this, s3, r2, t2));
    }
    if (n2 instanceof Pe) n2.setDataValue(this, a2, r2, t2);
    else if (r2) {
      if (!(n2 instanceof Me || n2 instanceof Ue)) return void console.error(`Variable ${s2} is not a vector or matrix. Line ${e2.line}`);
      if (r2 instanceof ve) {
        const i3 = this.evalExpression(r2.index, t2).value;
        if (n2 instanceof Me) {
          if (!(a2 instanceof Be)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
          n2.data[i3] = a2.value;
        } else {
          if (!(n2 instanceof Ue)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
          {
            const i4 = this.evalExpression(r2.index, t2).value;
            if (i4 < 0) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
            if (!(a2 instanceof Me)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
            {
              const t3 = n2.typeInfo.getTypeName();
              if ("mat2x2" === t3 || "mat2x2f" === t3 || "mat2x2h" === t3) {
                if (!(i4 < 2 && 2 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[2 * i4] = a2.data[0], n2.data[2 * i4 + 1] = a2.data[1];
              } else if ("mat2x3" === t3 || "mat2x3f" === t3 || "mat2x3h" === t3) {
                if (!(i4 < 2 && 3 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[3 * i4] = a2.data[0], n2.data[3 * i4 + 1] = a2.data[1], n2.data[3 * i4 + 2] = a2.data[2];
              } else if ("mat2x4" === t3 || "mat2x4f" === t3 || "mat2x4h" === t3) {
                if (!(i4 < 2 && 4 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[4 * i4] = a2.data[0], n2.data[4 * i4 + 1] = a2.data[1], n2.data[4 * i4 + 2] = a2.data[2], n2.data[4 * i4 + 3] = a2.data[3];
              } else if ("mat3x2" === t3 || "mat3x2f" === t3 || "mat3x2h" === t3) {
                if (!(i4 < 3 && 2 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[2 * i4] = a2.data[0], n2.data[2 * i4 + 1] = a2.data[1];
              } else if ("mat3x3" === t3 || "mat3x3f" === t3 || "mat3x3h" === t3) {
                if (!(i4 < 3 && 3 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[3 * i4] = a2.data[0], n2.data[3 * i4 + 1] = a2.data[1], n2.data[3 * i4 + 2] = a2.data[2];
              } else if ("mat3x4" === t3 || "mat3x4f" === t3 || "mat3x4h" === t3) {
                if (!(i4 < 3 && 4 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[4 * i4] = a2.data[0], n2.data[4 * i4 + 1] = a2.data[1], n2.data[4 * i4 + 2] = a2.data[2], n2.data[4 * i4 + 3] = a2.data[3];
              } else if ("mat4x2" === t3 || "mat4x2f" === t3 || "mat4x2h" === t3) {
                if (!(i4 < 4 && 2 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[2 * i4] = a2.data[0], n2.data[2 * i4 + 1] = a2.data[1];
              } else if ("mat4x3" === t3 || "mat4x3f" === t3 || "mat4x3h" === t3) {
                if (!(i4 < 4 && 3 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[3 * i4] = a2.data[0], n2.data[3 * i4 + 1] = a2.data[1], n2.data[3 * i4 + 2] = a2.data[2];
              } else {
                if ("mat4x4" !== t3 && "mat4x4f" !== t3 && "mat4x4h" !== t3) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                if (!(i4 < 4 && 4 === a2.data.length)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
                n2.data[4 * i4] = a2.data[0], n2.data[4 * i4 + 1] = a2.data[1], n2.data[4 * i4 + 2] = a2.data[2], n2.data[4 * i4 + 3] = a2.data[3];
              }
            }
          }
        }
      } else if (r2 instanceof pe) {
        const t3 = r2.value;
        if (!(n2 instanceof Me)) return void console.error(`Invalid assignment to ${t3}. Variable ${s2} is not a vector. Line ${e2.line}`);
        if (a2 instanceof Be) {
          if (t3.length > 1) return void console.error(`Invalid assignment to ${t3} for variable ${s2}. Line ${e2.line}`);
          if ("x" === t3) n2.data[0] = a2.value;
          else if ("y" === t3) {
            if (n2.data.length < 2) return void console.error(`Invalid assignment to ${t3} for variable ${s2}. Line ${e2.line}`);
            n2.data[1] = a2.value;
          } else if ("z" === t3) {
            if (n2.data.length < 3) return void console.error(`Invalid assignment to ${t3} for variable ${s2}. Line ${e2.line}`);
            n2.data[2] = a2.value;
          } else if ("w" === t3) {
            if (n2.data.length < 4) return void console.error(`Invalid assignment to ${t3} for variable ${s2}. Line ${e2.line}`);
            n2.data[3] = a2.value;
          }
        } else {
          if (!(a2 instanceof Me)) return void console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
          if (t3.length !== a2.data.length) return void console.error(`Invalid assignment to ${t3} for variable ${s2}. Line ${e2.line}`);
          for (let r3 = 0; r3 < t3.length; ++r3) {
            const i3 = t3[r3];
            if ("x" === i3 || "r" === i3) n2.data[0] = a2.data[r3];
            else if ("y" === i3 || "g" === i3) {
              if (a2.data.length < 2) return void console.error(`Invalid assignment to ${i3} for variable ${s2}. Line ${e2.line}`);
              n2.data[1] = a2.data[r3];
            } else if ("z" === i3 || "b" === i3) {
              if (a2.data.length < 3) return void console.error(`Invalid assignment to ${i3} for variable ${s2}. Line ${e2.line}`);
              n2.data[2] = a2.data[r3];
            } else {
              if ("w" !== i3 && "a" !== i3) return void console.error(`Invalid assignment to ${i3} for variable ${s2}. Line ${e2.line}`);
              if (a2.data.length < 4) return void console.error(`Invalid assignment to ${i3} for variable ${s2}. Line ${e2.line}`);
              n2.data[3] = a2.data[r3];
            }
          }
        }
      }
    } else n2 instanceof Be && a2 instanceof Be ? n2.value = a2.value : n2 instanceof Me && a2 instanceof Me || n2 instanceof Ue && a2 instanceof Ue ? n2.data.set(a2.data) : console.error(`Invalid assignment to ${s2}. Line ${e2.line}`);
  }
  _function(e2, t2) {
    const n2 = new ct(e2);
    t2.functions.set(e2.name, n2);
  }
  _const(e2, t2) {
    let n2 = null;
    null !== e2.value && (n2 = this.evalExpression(e2.value, t2)), t2.createVariable(e2.name, n2, e2);
  }
  _let(e2, t2) {
    let n2 = null;
    if (null !== e2.value) {
      if (n2 = this.evalExpression(e2.value, t2), null === n2) return void console.error(`Invalid value for variable ${e2.name}. Line ${e2.line}`);
      e2.value instanceof ke || (n2 = n2.clone());
    } else {
      const s2 = e2.type.name;
      if ("f32" === s2 || "i32" === s2 || "u32" === s2 || "bool" === s2 || "f16" === s2 || "vec2" === s2 || "vec3" === s2 || "vec4" === s2 || "vec2f" === s2 || "vec3f" === s2 || "vec4f" === s2 || "vec2i" === s2 || "vec3i" === s2 || "vec4i" === s2 || "vec2u" === s2 || "vec3u" === s2 || "vec4u" === s2 || "vec2h" === s2 || "vec3h" === s2 || "vec4h" === s2 || "vec2b" === s2 || "vec3b" === s2 || "vec4b" === s2 || "mat2x2" === s2 || "mat2x3" === s2 || "mat2x4" === s2 || "mat3x2" === s2 || "mat3x3" === s2 || "mat3x4" === s2 || "mat4x2" === s2 || "mat4x3" === s2 || "mat4x4" === s2 || "mat2x2f" === s2 || "mat2x3f" === s2 || "mat2x4f" === s2 || "mat3x2f" === s2 || "mat3x3f" === s2 || "mat3x4f" === s2 || "mat4x2f" === s2 || "mat4x3f" === s2 || "mat4x4f" === s2 || "mat2x2h" === s2 || "mat2x3h" === s2 || "mat2x4h" === s2 || "mat3x2h" === s2 || "mat3x3h" === s2 || "mat3x4h" === s2 || "mat4x2h" === s2 || "mat4x3h" === s2 || "mat4x4h" === s2 || "array" === s2) {
        const s3 = new de(e2.type, []);
        n2 = this._evalCreate(s3, t2);
      }
    }
    t2.createVariable(e2.name, n2, e2);
  }
  _var(e2, t2) {
    let n2 = null;
    if (null !== e2.value) {
      if (n2 = this.evalExpression(e2.value, t2), null === n2) return void console.error(`Invalid value for variable ${e2.name}. Line ${e2.line}`);
      e2.value instanceof ke || (n2 = n2.clone());
    } else {
      if (null === e2.type) return void console.error(`Variable ${e2.name} has no type. Line ${e2.line}`);
      const s2 = e2.type.name;
      if ("f32" === s2 || "i32" === s2 || "u32" === s2 || "bool" === s2 || "f16" === s2 || "vec2" === s2 || "vec3" === s2 || "vec4" === s2 || "vec2f" === s2 || "vec3f" === s2 || "vec4f" === s2 || "vec2i" === s2 || "vec3i" === s2 || "vec4i" === s2 || "vec2u" === s2 || "vec3u" === s2 || "vec4u" === s2 || "vec2h" === s2 || "vec3h" === s2 || "vec4h" === s2 || "vec2b" === s2 || "vec3b" === s2 || "vec4b" === s2 || "mat2x2" === s2 || "mat2x3" === s2 || "mat2x4" === s2 || "mat3x2" === s2 || "mat3x3" === s2 || "mat3x4" === s2 || "mat4x2" === s2 || "mat4x3" === s2 || "mat4x4" === s2 || "mat2x2f" === s2 || "mat2x3f" === s2 || "mat2x4f" === s2 || "mat3x2f" === s2 || "mat3x3f" === s2 || "mat3x4f" === s2 || "mat4x2f" === s2 || "mat4x3f" === s2 || "mat4x4f" === s2 || "mat2x2h" === s2 || "mat2x3h" === s2 || "mat2x4h" === s2 || "mat3x2h" === s2 || "mat3x3h" === s2 || "mat3x4h" === s2 || "mat4x2h" === s2 || "mat4x3h" === s2 || "mat4x4h" === s2 || e2.type instanceof ue || e2.type instanceof oe || e2.type instanceof ce) {
        const s3 = new de(e2.type, []);
        n2 = this._evalCreate(s3, t2);
      }
    }
    t2.createVariable(e2.name, n2, e2);
  }
  _switch(e2, t2) {
    t2 = t2.clone();
    const n2 = this.evalExpression(e2.condition, t2);
    if (!(n2 instanceof Be)) return console.error(`Invalid if condition. Line ${e2.line}`), null;
    let s2 = null;
    for (const r2 of e2.cases) if (r2 instanceof Ae) for (const a2 of r2.selectors) {
      if (a2 instanceof Se) {
        s2 = r2;
        continue;
      }
      const i2 = this.evalExpression(a2, t2);
      if (!(i2 instanceof Be)) return console.error(`Invalid case selector. Line ${e2.line}`), null;
      if (i2.value === n2.value) return this._execStatements(r2.body, t2);
    }
    else r2 instanceof Ee && (s2 = r2);
    return s2 ? this._execStatements(s2.body, t2) : null;
  }
  _if(e2, t2) {
    t2 = t2.clone();
    const n2 = this.evalExpression(e2.condition, t2);
    if (!(n2 instanceof Be)) return console.error(`Invalid if condition. Line ${e2.line}`), null;
    if (n2.value) return this._execStatements(e2.body, t2);
    for (const n3 of e2.elseif) {
      const s2 = this.evalExpression(n3.condition, t2);
      if (!(s2 instanceof Be)) return console.error(`Invalid if condition. Line ${e2.line}`), null;
      if (s2.value) return this._execStatements(n3.body, t2);
    }
    return e2.else ? this._execStatements(e2.else, t2) : null;
  }
  _getScalarValue(e2) {
    return e2 instanceof Be ? e2.value : (console.error("Expected scalar value.", e2), 0);
  }
  _for(e2, t2) {
    for (t2 = t2.clone(), this.execStatement(e2.init, t2); this._getScalarValue(this.evalExpression(e2.condition, t2)); ) {
      const n2 = this._execStatements(e2.body, t2);
      if (n2 === _dt._breakObj) break;
      if (null !== n2 && n2 !== _dt._continueObj) return n2;
      this.execStatement(e2.increment, t2);
    }
    return null;
  }
  _loop(e2, t2) {
    for (t2 = t2.clone(); ; ) {
      const n2 = this._execStatements(e2.body, t2);
      if (n2 === _dt._breakObj) break;
      if (n2 === _dt._continueObj) {
        if (e2.continuing) {
          if (this._execStatements(e2.continuing.body, t2) === _dt._breakObj) break;
        }
      } else if (null !== n2) return n2;
    }
    return null;
  }
  _while(e2, t2) {
    for (t2 = t2.clone(); this._getScalarValue(this.evalExpression(e2.condition, t2)); ) {
      const n2 = this._execStatements(e2.body, t2);
      if (n2 === _dt._breakObj) break;
      if (n2 !== _dt._continueObj && null !== n2) return n2;
    }
    return null;
  }
  _evalBitcast(e2, t2) {
    const n2 = this.evalExpression(e2.value, t2), s2 = e2.type;
    if (n2 instanceof Be) {
      const e3 = nt(n2.value, n2.typeInfo.name, s2.name);
      return new Be(e3, this.getTypeInfo(s2));
    }
    if (n2 instanceof Me) {
      const t3 = n2.typeInfo.getTypeName();
      let r2 = "";
      if (t3.endsWith("f")) r2 = "f32";
      else if (t3.endsWith("i")) r2 = "i32";
      else if (t3.endsWith("u")) r2 = "u32";
      else if (t3.endsWith("b")) r2 = "bool";
      else {
        if (!t3.endsWith("h")) return console.error(`Unknown vector type ${t3}. Line ${e2.line}`), null;
        r2 = "f16";
      }
      const a2 = s2.getTypeName();
      let i2 = "";
      if (a2.endsWith("f")) i2 = "f32";
      else if (a2.endsWith("i")) i2 = "i32";
      else if (a2.endsWith("u")) i2 = "u32";
      else if (a2.endsWith("b")) i2 = "bool";
      else {
        if (!a2.endsWith("h")) return console.error(`Unknown vector type ${i2}. Line ${e2.line}`), null;
        i2 = "f16";
      }
      const o2 = function(e3, t4, n3) {
        if (t4 === n3) return e3;
        const s3 = new Array(e3.length);
        for (let r3 = 0; r3 < e3.length; r3++) s3[r3] = nt(e3[r3], t4, n3);
        return s3;
      }(Array.from(n2.data), r2, i2);
      return new Me(o2, this.getTypeInfo(s2));
    }
    return console.error(`TODO: bitcast for ${n2.typeInfo.name}. Line ${e2.line}`), null;
  }
  _evalConst(e2, t2) {
    return t2.getVariableValue(e2.name).clone().getSubData(this, e2.postfix, t2);
  }
  _evalCreate(e2, t2) {
    var r2;
    if (e2 instanceof de) {
      if (null === e2.type) return Ve.void;
      switch (e2.type.getTypeName()) {
        case "bool":
        case "i32":
        case "u32":
        case "f32":
        case "f16":
          return this._callConstructorValue(e2, t2);
        case "vec2":
        case "vec3":
        case "vec4":
        case "vec2f":
        case "vec3f":
        case "vec4f":
        case "vec2h":
        case "vec3h":
        case "vec4h":
        case "vec2i":
        case "vec3i":
        case "vec4i":
        case "vec2u":
        case "vec3u":
        case "vec4u":
        case "vec2b":
        case "vec3b":
        case "vec4b":
          return this._callConstructorVec(e2, t2);
        case "mat2x2":
        case "mat2x2f":
        case "mat2x2h":
        case "mat2x3":
        case "mat2x3f":
        case "mat2x3h":
        case "mat2x4":
        case "mat2x4f":
        case "mat2x4h":
        case "mat3x2":
        case "mat3x2f":
        case "mat3x2h":
        case "mat3x3":
        case "mat3x3f":
        case "mat3x3h":
        case "mat3x4":
        case "mat3x4f":
        case "mat3x4h":
        case "mat4x2":
        case "mat4x2f":
        case "mat4x2h":
        case "mat4x3":
        case "mat4x3f":
        case "mat4x3h":
        case "mat4x4":
        case "mat4x4f":
        case "mat4x4h":
          return this._callConstructorMatrix(e2, t2);
      }
    }
    const a2 = e2 instanceof de ? e2.type.name : e2.name, i2 = e2 instanceof de ? this.getTypeInfo(e2.type) : this.getTypeInfo(e2.name);
    if (null === i2) return console.error(`Unknown type ${a2}. Line ${e2.line}`), null;
    if (0 === i2.size) return null;
    const o2 = new Pe(new ArrayBuffer(i2.size), i2, 0);
    if (i2 instanceof n) {
      if (e2.args) for (let n2 = 0; n2 < e2.args.length; ++n2) {
        const s2 = i2.members[n2], r3 = e2.args[n2], a3 = this.evalExpression(r3, t2);
        o2.setData(this, a3, s2.type, s2.offset, t2);
      }
    } else if (i2 instanceof s) {
      let n2 = 0;
      if (e2.args) for (let s2 = 0; s2 < e2.args.length; ++s2) {
        const a3 = e2.args[s2], c2 = this.evalExpression(a3, t2);
        null === i2.format && ("x32" === (null === (r2 = c2.typeInfo) || void 0 === r2 ? void 0 : r2.name) ? i2.format = this.getTypeInfo("i32") : i2.format = c2.typeInfo), o2.setData(this, c2, i2.format, n2, t2), n2 += i2.stride;
      }
    } else console.error(`Unknown type "${a2}". Line ${e2.line}`);
    return e2 instanceof de ? o2.getSubData(this, e2.postfix, t2) : o2;
  }
  _evalLiteral(e2, t2) {
    const n2 = this.getTypeInfo(e2.type), s2 = n2.name;
    if ("x32" === s2 || "u32" === s2 || "f32" === s2 || "f16" === s2 || "i32" === s2 || "bool" === s2) {
      return new Be(e2.scalarValue, n2);
    }
    return "vec2" === s2 || "vec3" === s2 || "vec4" === s2 || "vec2f" === s2 || "vec3f" === s2 || "vec4f" === s2 || "vec2h" === s2 || "vec3h" === s2 || "vec4h" === s2 || "vec2i" === s2 || "vec3i" === s2 || "vec4i" === s2 || "vec2u" === s2 || "vec3u" === s2 || "vec4u" === s2 ? this._callConstructorVec(e2, t2) : "mat2x2" === s2 || "mat2x3" === s2 || "mat2x4" === s2 || "mat3x2" === s2 || "mat3x3" === s2 || "mat3x4" === s2 || "mat4x2" === s2 || "mat4x3" === s2 || "mat4x4" === s2 || "mat2x2f" === s2 || "mat2x3f" === s2 || "mat2x4f" === s2 || "mat3x2f" === s2 || "mat3x3f" === s2 || "mat3x4f" === s2 || "mat4x2f" === s2 || "mat4x3f" === s2 || "mat4x4f" === s2 || "mat2x2h" === s2 || "mat2x3h" === s2 || "mat2x4h" === s2 || "mat3x2h" === s2 || "mat3x3h" === s2 || "mat3x4h" === s2 || "mat4x2h" === s2 || "mat4x3h" === s2 || "mat4x4h" === s2 ? this._callConstructorMatrix(e2, t2) : e2.value;
  }
  _evalVariable(e2, t2) {
    const n2 = t2.getVariableValue(e2.name);
    return null === n2 ? n2 : n2.getSubData(this, e2.postfix, t2);
  }
  _maxFormatTypeInfo(e2) {
    let t2 = e2[0];
    if ("f32" === t2.name) return t2;
    for (let n2 = 1; n2 < e2.length; ++n2) {
      const s2 = _dt._priority.get(t2.name);
      _dt._priority.get(e2[n2].name) < s2 && (t2 = e2[n2]);
    }
    return "x32" === t2.name ? this.getTypeInfo("i32") : t2;
  }
  _evalUnaryOp(e2, t2) {
    const n2 = this.evalExpression(e2.right, t2);
    if ("&" === e2.operator) return new Oe(n2);
    if ("*" === e2.operator) return n2 instanceof Oe ? n2.reference.getSubData(this, e2.postfix, t2) : (console.error(`Invalid dereference. Line ${e2.line}`), null);
    const s2 = n2 instanceof Be ? n2.value : n2 instanceof Me ? Array.from(n2.data) : null;
    switch (e2.operator) {
      case "+": {
        if (Ge(s2)) {
          const e4 = s2.map((e5, t4) => +e5);
          return new Me(e4, n2.typeInfo);
        }
        const e3 = s2, t3 = this._maxFormatTypeInfo([n2.typeInfo, n2.typeInfo]);
        return new Be(+e3, t3);
      }
      case "-": {
        if (Ge(s2)) {
          const e4 = s2.map((e5, t4) => -e5);
          return new Me(e4, n2.typeInfo);
        }
        const e3 = s2, t3 = this._maxFormatTypeInfo([n2.typeInfo, n2.typeInfo]);
        return new Be(-e3, t3);
      }
      case "!": {
        if (Ge(s2)) {
          const e4 = s2.map((e5, t4) => e5 ? 0 : 1);
          return new Me(e4, n2.typeInfo);
        }
        const e3 = s2, t3 = this._maxFormatTypeInfo([n2.typeInfo, n2.typeInfo]);
        return new Be(e3 ? 0 : 1, t3);
      }
      case "~": {
        if (Ge(s2)) {
          const e4 = s2.map((e5, t4) => ~e5);
          return new Me(e4, n2.typeInfo);
        }
        const e3 = s2, t3 = this._maxFormatTypeInfo([n2.typeInfo, n2.typeInfo]);
        return new Be(~e3, t3);
      }
    }
    return console.error(`Invalid unary operator ${e2.operator}. Line ${e2.line}`), null;
  }
  _evalBinaryOp(e2, t2) {
    const n2 = this.evalExpression(e2.left, t2), s2 = this.evalExpression(e2.right, t2), r2 = n2 instanceof Be ? n2.value : n2 instanceof Me || n2 instanceof Ue ? Array.from(n2.data) : null, a2 = s2 instanceof Be ? s2.value : s2 instanceof Me || s2 instanceof Ue ? Array.from(s2.data) : null;
    switch (e2.operator) {
      case "+": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 + s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 + e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 + t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 + i2, o2);
      }
      case "-": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 - s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 - e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 - t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 - i2, o2);
      }
      case "*": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, i3 = a2;
          if (n2 instanceof Ue && s2 instanceof Ue) {
            const r3 = function(e3, t5, n3, s3) {
              if (void 0 === pt[t5.name] || void 0 === pt[s3.name]) return null;
              const r4 = pt[t5.name][0], a4 = pt[t5.name][1], i4 = pt[s3.name][0];
              if (r4 !== pt[s3.name][1]) return null;
              const o4 = new Array(i4 * a4);
              for (let t6 = 0; t6 < a4; t6++) for (let s4 = 0; s4 < i4; s4++) {
                let c3 = 0;
                for (let i5 = 0; i5 < r4; i5++) c3 += e3[i5 * a4 + t6] * n3[s4 * r4 + i5];
                o4[t6 * i4 + s4] = c3;
              }
              return o4;
            }(t4, n2.typeInfo, i3, s2.typeInfo);
            if (null === r3) return console.error(`Matrix multiplication failed. Line ${e2.line}.`), null;
            const a3 = pt[s2.typeInfo.name][0], o3 = pt[n2.typeInfo.name][1], c2 = this.getTypeInfo(`mat${a3}x${o3}f`);
            return new Ue(r3, c2);
          }
          if (n2 instanceof Ue && s2 instanceof Me) {
            const r3 = function(e3, t5, n3, s3) {
              if (void 0 === pt[t5.name] || void 0 === ft[s3.name]) return null;
              const r4 = pt[t5.name][0], a3 = pt[t5.name][1];
              if (r4 !== n3.length) return null;
              const i4 = new Array(a3);
              for (let t6 = 0; t6 < a3; t6++) {
                let s4 = 0;
                for (let i5 = 0; i5 < r4; i5++) s4 += e3[i5 * a3 + t6] * n3[i5];
                i4[t6] = s4;
              }
              return i4;
            }(t4, n2.typeInfo, i3, s2.typeInfo);
            return null === r3 ? (console.error(`Matrix vector multiplication failed. Line ${e2.line}.`), null) : new Me(r3, s2.typeInfo);
          }
          if (n2 instanceof Me && s2 instanceof Ue) {
            const r3 = function(e3, t5, n3, s3) {
              if (void 0 === ft[t5.name] || void 0 === pt[s3.name]) return null;
              const r4 = pt[s3.name][0], a3 = pt[s3.name][1];
              if (a3 !== e3.length) return null;
              const i4 = [];
              for (let t6 = 0; t6 < r4; t6++) {
                let s4 = 0;
                for (let i5 = 0; i5 < a3; i5++) s4 += e3[i5] * n3[i5 * r4 + t6];
                i4[t6] = s4;
              }
              return i4;
            }(t4, n2.typeInfo, i3, s2.typeInfo);
            return null === r3 ? (console.error(`Matrix vector multiplication failed. Line ${e2.line}.`), null) : new Me(r3, n2.typeInfo);
          }
          {
            if (t4.length !== i3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
            const s3 = t4.map((e3, t5) => e3 * i3[t5]);
            return new Me(s3, n2.typeInfo);
          }
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 * e3);
          return n2 instanceof Ue ? new Ue(t4, n2.typeInfo) : new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 * t5);
          return s2 instanceof Ue ? new Ue(t4, s2.typeInfo) : new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 * i2, o2);
      }
      case "%": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 % s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 % e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 % t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 % i2, o2);
      }
      case "/": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 / s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 / e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 / t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 / i2, o2);
      }
      case "&": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 & s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 & e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 & t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 & i2, o2);
      }
      case "|": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 | s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 | e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 | t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 | i2, o2);
      }
      case "^": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 ^ s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 ^ e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 ^ t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 ^ i2, o2);
      }
      case "<<": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 << s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 << e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 << t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 << i2, o2);
      }
      case ">>": {
        if (Ge(r2) && Ge(a2)) {
          const t4 = r2, s3 = a2;
          if (t4.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i3 = t4.map((e3, t5) => e3 >> s3[t5]);
          return new Me(i3, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t4 = r2.map((t5, n3) => t5 >> e3);
          return new Me(t4, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t4 = a2.map((t5, n3) => e3 >> t5);
          return new Me(t4, s2.typeInfo);
        }
        const t3 = r2, i2 = a2, o2 = this._maxFormatTypeInfo([n2.typeInfo, s2.typeInfo]);
        return new Be(t3 >> i2, o2);
      }
      case ">":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 > s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 > e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 > t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 > a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "<":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 < s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 < e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 < t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 < a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "==":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 === s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 == e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 == t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 === a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "!=":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 !== s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 !== e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 !== t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 !== a2 ? 1 : 0, this.getTypeInfo("bool"));
      case ">=":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 >= s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 >= e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 >= t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 >= a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "<=":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 <= s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 <= e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 <= t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 <= a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "&&":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 && s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 && e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 && t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 && a2 ? 1 : 0, this.getTypeInfo("bool"));
      case "||":
        if (Ge(r2) && Ge(a2)) {
          const t3 = r2, s3 = a2;
          if (t3.length !== s3.length) return console.error(`Vector length mismatch. Line ${e2.line}.`), null;
          const i2 = t3.map((e3, t4) => e3 || s3[t4] ? 1 : 0);
          return new Me(i2, n2.typeInfo);
        }
        if (Ge(r2)) {
          const e3 = a2, t3 = r2.map((t4, n3) => t4 || e3 ? 1 : 0);
          return new Me(t3, n2.typeInfo);
        }
        if (Ge(a2)) {
          const e3 = r2, t3 = a2.map((t4, n3) => e3 || t4 ? 1 : 0);
          return new Me(t3, s2.typeInfo);
        }
        return new Be(r2 || a2 ? 1 : 0, this.getTypeInfo("bool"));
    }
    return console.error(`Unknown operator ${e2.operator}. Line ${e2.line}`), null;
  }
  _evalCall(e2, t2) {
    if (null !== e2.cachedReturnValue) return e2.cachedReturnValue;
    const n2 = t2.clone();
    n2.currentFunctionName = e2.name;
    const s2 = t2.getFunction(e2.name);
    if (!s2) {
      if (e2.isBuiltin) return this._callBuiltinFunction(e2, n2);
      return this.getTypeInfo(e2.name) ? this._evalCreate(e2, t2) : (console.error(`Unknown function "${e2.name}". Line ${e2.line}`), null);
    }
    for (let t3 = 0; t3 < s2.node.args.length; ++t3) {
      const r2 = s2.node.args[t3], a2 = this.evalExpression(e2.args[t3], n2);
      n2.createVariable(r2.name, a2, r2);
    }
    return this._execStatements(s2.node.body, n2);
  }
  _callBuiltinFunction(e2, t2) {
    switch (e2.name) {
      case "all":
        return this.builtins.All(e2, t2);
      case "any":
        return this.builtins.Any(e2, t2);
      case "select":
        return this.builtins.Select(e2, t2);
      case "arrayLength":
        return this.builtins.ArrayLength(e2, t2);
      case "abs":
        return this.builtins.Abs(e2, t2);
      case "acos":
        return this.builtins.Acos(e2, t2);
      case "acosh":
        return this.builtins.Acosh(e2, t2);
      case "asin":
        return this.builtins.Asin(e2, t2);
      case "asinh":
        return this.builtins.Asinh(e2, t2);
      case "atan":
        return this.builtins.Atan(e2, t2);
      case "atanh":
        return this.builtins.Atanh(e2, t2);
      case "atan2":
        return this.builtins.Atan2(e2, t2);
      case "ceil":
        return this.builtins.Ceil(e2, t2);
      case "clamp":
        return this.builtins.Clamp(e2, t2);
      case "cos":
        return this.builtins.Cos(e2, t2);
      case "cosh":
        return this.builtins.Cosh(e2, t2);
      case "countLeadingZeros":
        return this.builtins.CountLeadingZeros(e2, t2);
      case "countOneBits":
        return this.builtins.CountOneBits(e2, t2);
      case "countTrailingZeros":
        return this.builtins.CountTrailingZeros(e2, t2);
      case "cross":
        return this.builtins.Cross(e2, t2);
      case "degrees":
        return this.builtins.Degrees(e2, t2);
      case "determinant":
        return this.builtins.Determinant(e2, t2);
      case "distance":
        return this.builtins.Distance(e2, t2);
      case "dot":
        return this.builtins.Dot(e2, t2);
      case "dot4U8Packed":
        return this.builtins.Dot4U8Packed(e2, t2);
      case "dot4I8Packed":
        return this.builtins.Dot4I8Packed(e2, t2);
      case "exp":
        return this.builtins.Exp(e2, t2);
      case "exp2":
        return this.builtins.Exp2(e2, t2);
      case "extractBits":
        return this.builtins.ExtractBits(e2, t2);
      case "faceForward":
        return this.builtins.FaceForward(e2, t2);
      case "firstLeadingBit":
        return this.builtins.FirstLeadingBit(e2, t2);
      case "firstTrailingBit":
        return this.builtins.FirstTrailingBit(e2, t2);
      case "floor":
        return this.builtins.Floor(e2, t2);
      case "fma":
        return this.builtins.Fma(e2, t2);
      case "fract":
        return this.builtins.Fract(e2, t2);
      case "frexp":
        return this.builtins.Frexp(e2, t2);
      case "insertBits":
        return this.builtins.InsertBits(e2, t2);
      case "inverseSqrt":
        return this.builtins.InverseSqrt(e2, t2);
      case "ldexp":
        return this.builtins.Ldexp(e2, t2);
      case "length":
        return this.builtins.Length(e2, t2);
      case "log":
        return this.builtins.Log(e2, t2);
      case "log2":
        return this.builtins.Log2(e2, t2);
      case "max":
        return this.builtins.Max(e2, t2);
      case "min":
        return this.builtins.Min(e2, t2);
      case "mix":
        return this.builtins.Mix(e2, t2);
      case "modf":
        return this.builtins.Modf(e2, t2);
      case "normalize":
        return this.builtins.Normalize(e2, t2);
      case "pow":
        return this.builtins.Pow(e2, t2);
      case "quantizeToF16":
        return this.builtins.QuantizeToF16(e2, t2);
      case "radians":
        return this.builtins.Radians(e2, t2);
      case "reflect":
        return this.builtins.Reflect(e2, t2);
      case "refract":
        return this.builtins.Refract(e2, t2);
      case "reverseBits":
        return this.builtins.ReverseBits(e2, t2);
      case "round":
        return this.builtins.Round(e2, t2);
      case "saturate":
        return this.builtins.Saturate(e2, t2);
      case "sign":
        return this.builtins.Sign(e2, t2);
      case "sin":
        return this.builtins.Sin(e2, t2);
      case "sinh":
        return this.builtins.Sinh(e2, t2);
      case "smoothstep":
        return this.builtins.SmoothStep(e2, t2);
      case "sqrt":
        return this.builtins.Sqrt(e2, t2);
      case "step":
        return this.builtins.Step(e2, t2);
      case "tan":
        return this.builtins.Tan(e2, t2);
      case "tanh":
        return this.builtins.Tanh(e2, t2);
      case "transpose":
        return this.builtins.Transpose(e2, t2);
      case "trunc":
        return this.builtins.Trunc(e2, t2);
      case "dpdx":
        return this.builtins.Dpdx(e2, t2);
      case "dpdxCoarse":
        return this.builtins.DpdxCoarse(e2, t2);
      case "dpdxFine":
        return this.builtins.DpdxFine(e2, t2);
      case "dpdy":
        return this.builtins.Dpdy(e2, t2);
      case "dpdyCoarse":
        return this.builtins.DpdyCoarse(e2, t2);
      case "dpdyFine":
        return this.builtins.DpdyFine(e2, t2);
      case "fwidth":
        return this.builtins.Fwidth(e2, t2);
      case "fwidthCoarse":
        return this.builtins.FwidthCoarse(e2, t2);
      case "fwidthFine":
        return this.builtins.FwidthFine(e2, t2);
      case "textureDimensions":
        return this.builtins.TextureDimensions(e2, t2);
      case "textureGather":
        return this.builtins.TextureGather(e2, t2);
      case "textureGatherCompare":
        return this.builtins.TextureGatherCompare(e2, t2);
      case "textureLoad":
        return this.builtins.TextureLoad(e2, t2);
      case "textureNumLayers":
        return this.builtins.TextureNumLayers(e2, t2);
      case "textureNumLevels":
        return this.builtins.TextureNumLevels(e2, t2);
      case "textureNumSamples":
        return this.builtins.TextureNumSamples(e2, t2);
      case "textureSample":
        return this.builtins.TextureSample(e2, t2);
      case "textureSampleBias":
        return this.builtins.TextureSampleBias(e2, t2);
      case "textureSampleCompare":
        return this.builtins.TextureSampleCompare(e2, t2);
      case "textureSampleCompareLevel":
        return this.builtins.TextureSampleCompareLevel(e2, t2);
      case "textureSampleGrad":
        return this.builtins.TextureSampleGrad(e2, t2);
      case "textureSampleLevel":
        return this.builtins.TextureSampleLevel(e2, t2);
      case "textureSampleBaseClampToEdge":
        return this.builtins.TextureSampleBaseClampToEdge(e2, t2);
      case "textureStore":
        return this.builtins.TextureStore(e2, t2);
      case "atomicLoad":
        return this.builtins.AtomicLoad(e2, t2);
      case "atomicStore":
        return this.builtins.AtomicStore(e2, t2);
      case "atomicAdd":
        return this.builtins.AtomicAdd(e2, t2);
      case "atomicSub":
        return this.builtins.AtomicSub(e2, t2);
      case "atomicMax":
        return this.builtins.AtomicMax(e2, t2);
      case "atomicMin":
        return this.builtins.AtomicMin(e2, t2);
      case "atomicAnd":
        return this.builtins.AtomicAnd(e2, t2);
      case "atomicOr":
        return this.builtins.AtomicOr(e2, t2);
      case "atomicXor":
        return this.builtins.AtomicXor(e2, t2);
      case "atomicExchange":
        return this.builtins.AtomicExchange(e2, t2);
      case "atomicCompareExchangeWeak":
        return this.builtins.AtomicCompareExchangeWeak(e2, t2);
      case "pack4x8snorm":
        return this.builtins.Pack4x8snorm(e2, t2);
      case "pack4x8unorm":
        return this.builtins.Pack4x8unorm(e2, t2);
      case "pack4xI8":
        return this.builtins.Pack4xI8(e2, t2);
      case "pack4xU8":
        return this.builtins.Pack4xU8(e2, t2);
      case "pack4x8Clamp":
        return this.builtins.Pack4x8Clamp(e2, t2);
      case "pack4xU8Clamp":
        return this.builtins.Pack4xU8Clamp(e2, t2);
      case "pack2x16snorm":
        return this.builtins.Pack2x16snorm(e2, t2);
      case "pack2x16unorm":
        return this.builtins.Pack2x16unorm(e2, t2);
      case "pack2x16float":
        return this.builtins.Pack2x16float(e2, t2);
      case "unpack4x8snorm":
        return this.builtins.Unpack4x8snorm(e2, t2);
      case "unpack4x8unorm":
        return this.builtins.Unpack4x8unorm(e2, t2);
      case "unpack4xI8":
        return this.builtins.Unpack4xI8(e2, t2);
      case "unpack4xU8":
        return this.builtins.Unpack4xU8(e2, t2);
      case "unpack2x16snorm":
        return this.builtins.Unpack2x16snorm(e2, t2);
      case "unpack2x16unorm":
        return this.builtins.Unpack2x16unorm(e2, t2);
      case "unpack2x16float":
        return this.builtins.Unpack2x16float(e2, t2);
      case "storageBarrier":
        return this.builtins.StorageBarrier(e2, t2);
      case "textureBarrier":
        return this.builtins.TextureBarrier(e2, t2);
      case "workgroupBarrier":
        return this.builtins.WorkgroupBarrier(e2, t2);
      case "workgroupUniformLoad":
        return this.builtins.WorkgroupUniformLoad(e2, t2);
      case "subgroupAdd":
        return this.builtins.SubgroupAdd(e2, t2);
      case "subgroupExclusiveAdd":
        return this.builtins.SubgroupExclusiveAdd(e2, t2);
      case "subgroupInclusiveAdd":
        return this.builtins.SubgroupInclusiveAdd(e2, t2);
      case "subgroupAll":
        return this.builtins.SubgroupAll(e2, t2);
      case "subgroupAnd":
        return this.builtins.SubgroupAnd(e2, t2);
      case "subgroupAny":
        return this.builtins.SubgroupAny(e2, t2);
      case "subgroupBallot":
        return this.builtins.SubgroupBallot(e2, t2);
      case "subgroupBroadcast":
        return this.builtins.SubgroupBroadcast(e2, t2);
      case "subgroupBroadcastFirst":
        return this.builtins.SubgroupBroadcastFirst(e2, t2);
      case "subgroupElect":
        return this.builtins.SubgroupElect(e2, t2);
      case "subgroupMax":
        return this.builtins.SubgroupMax(e2, t2);
      case "subgroupMin":
        return this.builtins.SubgroupMin(e2, t2);
      case "subgroupMul":
        return this.builtins.SubgroupMul(e2, t2);
      case "subgroupExclusiveMul":
        return this.builtins.SubgroupExclusiveMul(e2, t2);
      case "subgroupInclusiveMul":
        return this.builtins.SubgroupInclusiveMul(e2, t2);
      case "subgroupOr":
        return this.builtins.SubgroupOr(e2, t2);
      case "subgroupShuffle":
        return this.builtins.SubgroupShuffle(e2, t2);
      case "subgroupShuffleDown":
        return this.builtins.SubgroupShuffleDown(e2, t2);
      case "subgroupShuffleUp":
        return this.builtins.SubgroupShuffleUp(e2, t2);
      case "subgroupShuffleXor":
        return this.builtins.SubgroupShuffleXor(e2, t2);
      case "subgroupXor":
        return this.builtins.SubgroupXor(e2, t2);
      case "quadBroadcast":
        return this.builtins.QuadBroadcast(e2, t2);
      case "quadSwapDiagonal":
        return this.builtins.QuadSwapDiagonal(e2, t2);
      case "quadSwapX":
        return this.builtins.QuadSwapX(e2, t2);
      case "quadSwapY":
        return this.builtins.QuadSwapY(e2, t2);
    }
    const n2 = t2.getFunction(e2.name);
    if (n2) {
      const s2 = t2.clone();
      for (let t3 = 0; t3 < n2.node.args.length; ++t3) {
        const r2 = n2.node.args[t3], a2 = this.evalExpression(e2.args[t3], s2);
        s2.setVariable(r2.name, a2, r2);
      }
      return this._execStatements(n2.node.body, s2);
    }
    return null;
  }
  _callConstructorValue(e2, t2) {
    if (!e2.args || 0 === e2.args.length) return new Be(0, this.getTypeInfo(e2.type));
    const n2 = this.evalExpression(e2.args[0], t2);
    return n2.typeInfo = this.getTypeInfo(e2.type), n2.getSubData(this, e2.postfix, t2).clone();
  }
  _callConstructorVec(e2, t2) {
    const n2 = this.getTypeInfo(e2.type), s2 = e2.type.getTypeName(), r2 = ft[s2];
    if (void 0 === r2) return console.error(`Invalid vec constructor ${s2}. Line ${e2.line}`), null;
    const a2 = [];
    if (e2 instanceof xe) if (e2.isVector) {
      const t3 = e2.vectorValue;
      for (const e3 of t3) a2.push(e3);
    } else a2.push(e2.scalarValue);
    else if (e2.args) for (const n3 of e2.args) {
      const e3 = this.evalExpression(n3, t2);
      if (e3 instanceof Me) {
        const t3 = e3.data;
        for (let e4 = 0; e4 < t3.length; ++e4) {
          let n4 = t3[e4];
          a2.push(n4);
        }
      } else if (e3 instanceof Be) {
        let t3 = e3.value;
        a2.push(t3);
      }
    }
    if (e2.type instanceof ce && null === e2.type.format && (e2.type.format = ce.f32), 0 === a2.length) {
      const s3 = new Array(r2).fill(0);
      return new Me(s3, n2).getSubData(this, e2.postfix, t2);
    }
    if (1 === a2.length) for (; a2.length < r2; ) a2.push(a2[0]);
    if (a2.length < r2) return console.error(`Invalid vec constructor. Line ${e2.line}`), null;
    return new Me(a2.length > r2 ? a2.slice(0, r2) : a2, n2).getSubData(this, e2.postfix, t2);
  }
  _callConstructorMatrix(e2, t2) {
    const n2 = this.getTypeInfo(e2.type), s2 = e2.type.getTypeName(), r2 = pt[s2];
    if (void 0 === r2) return console.error(`Invalid matrix constructor ${s2}. Line ${e2.line}`), null;
    const i2 = [];
    if (e2 instanceof xe) if (e2.isVector) {
      const t3 = e2.vectorValue;
      for (const e3 of t3) i2.push(e3);
    } else i2.push(e2.scalarValue);
    else if (e2.args) for (const n3 of e2.args) {
      const e3 = this.evalExpression(n3, t2);
      e3 instanceof Me ? i2.push(...e3.data) : e3 instanceof Be ? i2.push(e3.value) : e3 instanceof Ue && i2.push(...e3.data);
    }
    if (n2 instanceof a && null === n2.format && (n2.format = this.getTypeInfo("f32")), 0 === i2.length) {
      const s3 = new Array(r2[2]).fill(0);
      return new Ue(s3, n2).getSubData(this, e2.postfix, t2);
    }
    return i2.length !== r2[2] ? (console.error(`Invalid matrix constructor. Line ${e2.line}`), null) : new Ue(i2, n2).getSubData(this, e2.postfix, t2);
  }
};
dt._breakObj = new Ne(new e("BREAK", null), null), dt._continueObj = new Ne(new e("CONTINUE", null), null), dt._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
var mt = class {
  constructor() {
    this.constants = /* @__PURE__ */ new Map(), this.aliases = /* @__PURE__ */ new Map(), this.structs = /* @__PURE__ */ new Map();
  }
};
var gt = class {
  constructor() {
    this._tokens = [], this._current = 0, this._currentLine = 1, this._deferArrayCountEval = [], this._currentLoop = [], this._context = new mt(), this._exec = new dt(), this._forwardTypeCount = 0;
  }
  parse(e2) {
    this._initialize(e2), this._deferArrayCountEval.length = 0;
    const t2 = [];
    for (; !this._isAtEnd(); ) {
      const e3 = this._global_decl_or_directive();
      if (!e3) break;
      t2.push(e3);
    }
    if (this._deferArrayCountEval.length > 0) {
      for (const e3 of this._deferArrayCountEval) {
        const t3 = e3.arrayType, n2 = e3.countNode;
        if (n2 instanceof ge) {
          const e4 = n2.name, s2 = this._context.constants.get(e4);
          if (s2) try {
            const e5 = s2.constEvaluate(this._exec);
            t3.count = e5;
          } catch (e5) {
          }
        }
      }
      this._deferArrayCountEval.length = 0;
    }
    if (this._forwardTypeCount > 0) for (const e3 of t2) e3.search((e4) => {
      e4 instanceof Ce || e4 instanceof le ? e4.type = this._forwardType(e4.type) : e4 instanceof ue ? e4.format = this._forwardType(e4.format) : e4 instanceof F || e4 instanceof U || e4 instanceof P ? e4.type = this._forwardType(e4.type) : e4 instanceof D ? e4.returnType = this._forwardType(e4.returnType) : e4 instanceof $e && (e4.type = this._forwardType(e4.type));
    });
    return t2;
  }
  _forwardType(e2) {
    if (e2 instanceof ie) {
      const t2 = this._getType(e2.name);
      if (t2) return t2;
    } else e2 instanceof le ? e2.type = this._forwardType(e2.type) : e2 instanceof ue && (e2.format = this._forwardType(e2.format));
    return e2;
  }
  _initialize(e2) {
    if (e2) if ("string" == typeof e2) {
      const t2 = new Re(e2);
      this._tokens = t2.scanTokens();
    } else this._tokens = e2;
    else this._tokens = [];
    this._current = 0;
  }
  _updateNode(e2, t2) {
    return e2.line = null != t2 ? t2 : this._currentLine, e2;
  }
  _error(e2, t2) {
    return { token: e2, message: t2, toString: () => `${t2}` };
  }
  _isAtEnd() {
    return this._current >= this._tokens.length || this._peek().type == He.eof;
  }
  _match(e2) {
    if (e2 instanceof qe) return !!this._check(e2) && (this._advance(), true);
    for (let t2 = 0, n2 = e2.length; t2 < n2; ++t2) {
      const n3 = e2[t2];
      if (this._check(n3)) return this._advance(), true;
    }
    return false;
  }
  _consume(e2, t2) {
    if (this._check(e2)) return this._advance();
    throw this._error(this._peek(), `${t2}. Line:${this._currentLine}`);
  }
  _check(e2) {
    if (this._isAtEnd()) return false;
    const t2 = this._peek();
    if (e2 instanceof Array) {
      const n2 = t2.type;
      let s2 = false;
      for (const t3 of e2) {
        if (n2 === t3) return true;
        t3 === He.tokens.name && (s2 = true);
      }
      if (s2) {
        const e3 = He.tokens.name.rule.exec(t2.lexeme);
        if (e3 && 0 == e3.index && e3[0] == t2.lexeme) return true;
      }
      return false;
    }
    if (t2.type === e2) return true;
    if (e2 === He.tokens.name) {
      const e3 = He.tokens.name.rule.exec(t2.lexeme);
      return e3 && 0 == e3.index && e3[0] == t2.lexeme;
    }
    return false;
  }
  _advance() {
    var e2, t2;
    return this._currentLine = null !== (t2 = null === (e2 = this._peek()) || void 0 === e2 ? void 0 : e2.line) && void 0 !== t2 ? t2 : -1, this._isAtEnd() || this._current++, this._previous();
  }
  _peek() {
    return this._tokens[this._current];
  }
  _previous() {
    return this._tokens[this._current - 1];
  }
  _global_decl_or_directive() {
    for (; this._match(He.tokens.semicolon) && !this._isAtEnd(); ) ;
    if (this._match(He.keywords.alias)) {
      const e3 = this._type_alias();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e3]), e3;
    }
    if (this._match(He.keywords.diagnostic)) {
      const e3 = this._diagnostic();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e3]), e3;
    }
    if (this._match(He.keywords.requires)) {
      const e3 = this._requires_directive();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e3]), e3;
    }
    if (this._match(He.keywords.enable)) {
      const e3 = this._enable_directive();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e3]), e3;
    }
    const e2 = this._attribute();
    if (this._check(He.keywords.var)) {
      const t2 = this._global_variable_decl();
      return null != t2 && (t2.attributes = e2), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t2]), t2;
    }
    if (this._check(He.keywords.override)) {
      const t2 = this._override_variable_decl();
      return null != t2 && (t2.attributes = e2), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t2]), t2;
    }
    if (this._check(He.keywords.let)) {
      const t2 = this._global_let_decl();
      return null != t2 && (t2.attributes = e2), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t2]), t2;
    }
    if (this._check(He.keywords.const)) {
      const t2 = this._global_const_decl();
      return null != t2 && (t2.attributes = e2), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t2]), t2;
    }
    if (this._check(He.keywords.struct)) {
      const t2 = this._struct_decl();
      return null != t2 && (t2.attributes = e2), this._exec.reflection.updateAST([t2]), t2;
    }
    if (this._check(He.keywords.fn)) {
      const t2 = this._function_decl();
      return null != t2 && (t2.attributes = e2), this._exec.reflection.updateAST([t2]), t2;
    }
    return null;
  }
  _function_decl() {
    if (!this._match(He.keywords.fn)) return null;
    const e2 = this._currentLine, t2 = this._consume(He.tokens.ident, "Expected function name.").toString();
    this._consume(He.tokens.paren_left, "Expected '(' for function arguments.");
    const n2 = [];
    if (!this._check(He.tokens.paren_right)) do {
      if (this._check(He.tokens.paren_right)) break;
      const e3 = this._attribute(), t3 = this._consume(He.tokens.name, "Expected argument name.").toString();
      this._consume(He.tokens.colon, "Expected ':' for argument type.");
      const s3 = this._attribute(), r3 = this._type_decl();
      null != r3 && (r3.attributes = s3, n2.push(this._updateNode(new $e(t3, r3, e3))));
    } while (this._match(He.tokens.comma));
    this._consume(He.tokens.paren_right, "Expected ')' after function arguments.");
    let s2 = null;
    if (this._match(He.tokens.arrow)) {
      const e3 = this._attribute();
      s2 = this._type_decl(), null != s2 && (s2.attributes = e3);
    }
    const r2 = this._compound_statement(), a2 = this._currentLine;
    return this._updateNode(new D(t2, n2, s2, r2, e2, a2), e2);
  }
  _compound_statement() {
    const e2 = [];
    for (this._consume(He.tokens.brace_left, "Expected '{' for block."); !this._check(He.tokens.brace_right); ) {
      const t2 = this._statement();
      null !== t2 && e2.push(t2);
    }
    return this._consume(He.tokens.brace_right, "Expected '}' for block."), e2;
  }
  _statement() {
    for (; this._match(He.tokens.semicolon) && !this._isAtEnd(); ) ;
    if (this._check(He.tokens.attr) && this._attribute(), this._check(He.keywords.if)) return this._if_statement();
    if (this._check(He.keywords.switch)) return this._switch_statement();
    if (this._check(He.keywords.loop)) return this._loop_statement();
    if (this._check(He.keywords.for)) return this._for_statement();
    if (this._check(He.keywords.while)) return this._while_statement();
    if (this._check(He.keywords.continuing)) return this._continuing_statement();
    if (this._check(He.keywords.static_assert)) return this._static_assert_statement();
    if (this._check(He.tokens.brace_left)) return this._compound_statement();
    let e2 = null;
    if (this._check(He.keywords.return)) e2 = this._return_statement();
    else if (this._check([He.keywords.var, He.keywords.let, He.keywords.const])) e2 = this._variable_statement();
    else if (this._match(He.keywords.discard)) e2 = this._updateNode(new ne());
    else if (this._match(He.keywords.break)) {
      const t2 = this._updateNode(new se());
      if (this._currentLoop.length > 0) {
        const e3 = this._currentLoop[this._currentLoop.length - 1];
        t2.loopId = e3.id;
      }
      e2 = t2, this._check(He.keywords.if) && (this._advance(), t2.condition = this._optional_paren_expression());
    } else if (this._match(He.keywords.continue)) {
      const t2 = this._updateNode(new re());
      if (!(this._currentLoop.length > 0)) throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${t2.line}`);
      {
        const e3 = this._currentLoop[this._currentLoop.length - 1];
        t2.loopId = e3.id;
      }
      e2 = t2;
    } else e2 = this._increment_decrement_statement() || this._func_call_statement() || this._assignment_statement();
    return null != e2 && this._consume(He.tokens.semicolon, "Expected ';' after statement."), e2;
  }
  _static_assert_statement() {
    if (!this._match(He.keywords.static_assert)) return null;
    const e2 = this._currentLine, t2 = this._optional_paren_expression();
    return this._updateNode(new N(t2), e2);
  }
  _while_statement() {
    if (!this._match(He.keywords.while)) return null;
    const e2 = this._updateNode(new V(null, null));
    return this._currentLoop.push(e2), e2.condition = this._optional_paren_expression(), this._check(He.tokens.attr) && this._attribute(), e2.body = this._compound_statement(), this._currentLoop.pop(), e2;
  }
  _continuing_statement() {
    const e2 = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;
    if (!this._match(He.keywords.continuing)) return null;
    const t2 = this._currentLine, n2 = this._compound_statement();
    return this._updateNode(new O(n2, e2), t2);
  }
  _for_statement() {
    if (!this._match(He.keywords.for)) return null;
    this._consume(He.tokens.paren_left, "Expected '('.");
    const e2 = this._updateNode(new B(null, null, null, null));
    return this._currentLoop.push(e2), e2.init = this._check(He.tokens.semicolon) ? null : this._for_init(), this._consume(He.tokens.semicolon, "Expected ';'."), e2.condition = this._check(He.tokens.semicolon) ? null : this._short_circuit_or_expression(), this._consume(He.tokens.semicolon, "Expected ';'."), e2.increment = this._check(He.tokens.paren_right) ? null : this._for_increment(), this._consume(He.tokens.paren_right, "Expected ')'."), this._check(He.tokens.attr) && this._attribute(), e2.body = this._compound_statement(), this._currentLoop.pop(), e2;
  }
  _for_init() {
    return this._variable_statement() || this._func_call_statement() || this._assignment_statement();
  }
  _for_increment() {
    return this._func_call_statement() || this._increment_decrement_statement() || this._assignment_statement();
  }
  _variable_statement() {
    if (this._check(He.keywords.var)) {
      const e2 = this._variable_decl();
      if (null === e2) throw this._error(this._peek(), "Variable declaration expected.");
      let t2 = null;
      return this._match(He.tokens.equal) && (t2 = this._short_circuit_or_expression()), this._updateNode(new F(e2.name, e2.type, e2.storage, e2.access, t2), e2.line);
    }
    if (this._match(He.keywords.let)) {
      const e2 = this._currentLine, t2 = this._consume(He.tokens.name, "Expected name for let.").toString();
      let n2 = null;
      if (this._match(He.tokens.colon)) {
        const e3 = this._attribute();
        n2 = this._type_decl(), null != n2 && (n2.attributes = e3);
      }
      this._consume(He.tokens.equal, "Expected '=' for let.");
      const s2 = this._short_circuit_or_expression();
      return this._updateNode(new U(t2, n2, null, null, s2), e2);
    }
    if (this._match(He.keywords.const)) {
      const e2 = this._currentLine, t2 = this._consume(He.tokens.name, "Expected name for const.").toString();
      let n2 = null;
      if (this._match(He.tokens.colon)) {
        const e3 = this._attribute();
        n2 = this._type_decl(), null != n2 && (n2.attributes = e3);
      }
      this._consume(He.tokens.equal, "Expected '=' for const.");
      const s2 = this._short_circuit_or_expression();
      return null === n2 && s2 instanceof xe && (n2 = s2.type), this._updateNode(new P(t2, n2, null, null, s2), e2);
    }
    return null;
  }
  _increment_decrement_statement() {
    const e2 = this._current, t2 = this._unary_expression();
    if (null == t2) return null;
    if (!this._check(He.increment_operators)) return this._current = e2, null;
    const n2 = this._consume(He.increment_operators, "Expected increment operator");
    return this._updateNode(new R(n2.type === He.tokens.plus_plus ? W.increment : W.decrement, t2));
  }
  _assignment_statement() {
    let e2 = null;
    const t2 = this._currentLine;
    if (this._check(He.tokens.brace_right)) return null;
    let n2 = this._match(He.tokens.underscore);
    if (n2 || (e2 = this._unary_expression()), !n2 && null == e2) return null;
    const s2 = this._consume(He.assignment_operators, "Expected assignment operator."), r2 = this._short_circuit_or_expression();
    return this._updateNode(new G(q.parse(s2.lexeme), e2, r2), t2);
  }
  _func_call_statement() {
    if (!this._check(He.tokens.ident)) return null;
    const e2 = this._currentLine, t2 = this._current, n2 = this._consume(He.tokens.ident, "Expected function name."), s2 = this._argument_expression_list();
    return null === s2 ? (this._current = t2, null) : this._updateNode(new X(n2.lexeme, s2), e2);
  }
  _loop_statement() {
    if (!this._match(He.keywords.loop)) return null;
    this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Expected '{' for loop.");
    const e2 = this._updateNode(new j([], null));
    this._currentLoop.push(e2);
    let t2 = this._statement();
    for (; null !== t2; ) {
      if (Array.isArray(t2)) for (let n2 of t2) e2.body.push(n2);
      else e2.body.push(t2);
      if (t2 instanceof O) {
        e2.continuing = t2;
        break;
      }
      t2 = this._statement();
    }
    return this._currentLoop.pop(), this._consume(He.tokens.brace_right, "Expected '}' for loop."), e2;
  }
  _switch_statement() {
    if (!this._match(He.keywords.switch)) return null;
    const e2 = this._updateNode(new Z(null, []));
    if (this._currentLoop.push(e2), e2.condition = this._optional_paren_expression(), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Expected '{' for switch."), e2.cases = this._switch_body(), null == e2.cases || 0 == e2.cases.length) throw this._error(this._previous(), "Expected 'case' or 'default'.");
    return this._consume(He.tokens.brace_right, "Expected '}' for switch."), this._currentLoop.pop(), e2;
  }
  _switch_body() {
    const e2 = [];
    let t2 = false;
    for (; this._check([He.keywords.default, He.keywords.case]); ) {
      if (this._match(He.keywords.case)) {
        const n2 = this._case_selectors();
        for (const e3 of n2) if (e3 instanceof Se) {
          if (t2) throw this._error(this._previous(), "Multiple default cases in switch statement.");
          t2 = true;
          break;
        }
        this._match(He.tokens.colon), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Exected '{' for switch case.");
        const s2 = this._case_body();
        this._consume(He.tokens.brace_right, "Exected '}' for switch case."), e2.push(this._updateNode(new Ae(n2, s2)));
      }
      if (this._match(He.keywords.default)) {
        if (t2) throw this._error(this._previous(), "Multiple default cases in switch statement.");
        this._match(He.tokens.colon), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Exected '{' for switch default.");
        const n2 = this._case_body();
        this._consume(He.tokens.brace_right, "Exected '}' for switch default."), e2.push(this._updateNode(new Ee(n2)));
      }
    }
    return e2;
  }
  _case_selectors() {
    const e2 = [];
    for (this._match(He.keywords.default) ? e2.push(this._updateNode(new Se())) : e2.push(this._shift_expression()); this._match(He.tokens.comma); ) this._match(He.keywords.default) ? e2.push(this._updateNode(new Se())) : e2.push(this._shift_expression());
    return e2;
  }
  _case_body() {
    if (this._match(He.keywords.fallthrough)) return this._consume(He.tokens.semicolon, "Expected ';'"), [];
    let e2 = this._statement();
    if (null == e2) return [];
    e2 instanceof Array || (e2 = [e2]);
    const t2 = this._case_body();
    return 0 == t2.length ? e2 : [...e2, t2[0]];
  }
  _if_statement() {
    if (!this._match(He.keywords.if)) return null;
    const e2 = this._currentLine, t2 = this._optional_paren_expression();
    this._check(He.tokens.attr) && this._attribute();
    const n2 = this._compound_statement();
    let s2 = [];
    this._match_elseif() && (this._check(He.tokens.attr) && this._attribute(), s2 = this._elseif_statement(s2));
    let r2 = null;
    return this._match(He.keywords.else) && (this._check(He.tokens.attr) && this._attribute(), r2 = this._compound_statement()), this._updateNode(new Q(t2, n2, s2, r2), e2);
  }
  _match_elseif() {
    return this._tokens[this._current].type === He.keywords.else && this._tokens[this._current + 1].type === He.keywords.if && (this._advance(), this._advance(), true);
  }
  _elseif_statement(e2 = []) {
    const t2 = this._optional_paren_expression(), n2 = this._compound_statement();
    return e2.push(this._updateNode(new Le(t2, n2))), this._match_elseif() && (this._check(He.tokens.attr) && this._attribute(), this._elseif_statement(e2)), e2;
  }
  _return_statement() {
    if (!this._match(He.keywords.return)) return null;
    const e2 = this._short_circuit_or_expression();
    return this._updateNode(new Y(e2));
  }
  _short_circuit_or_expression() {
    let e2 = this._short_circuit_and_expr();
    for (; this._match(He.tokens.or_or); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._short_circuit_and_expr()));
    return e2;
  }
  _short_circuit_and_expr() {
    let e2 = this._inclusive_or_expression();
    for (; this._match(He.tokens.and_and); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._inclusive_or_expression()));
    return e2;
  }
  _inclusive_or_expression() {
    let e2 = this._exclusive_or_expression();
    for (; this._match(He.tokens.or); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._exclusive_or_expression()));
    return e2;
  }
  _exclusive_or_expression() {
    let e2 = this._and_expression();
    for (; this._match(He.tokens.xor); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._and_expression()));
    return e2;
  }
  _and_expression() {
    let e2 = this._equality_expression();
    for (; this._match(He.tokens.and); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._equality_expression()));
    return e2;
  }
  _equality_expression() {
    const e2 = this._relational_expression();
    return this._match([He.tokens.equal_equal, He.tokens.not_equal]) ? this._updateNode(new Ie(this._previous().toString(), e2, this._relational_expression())) : e2;
  }
  _relational_expression() {
    let e2 = this._shift_expression();
    for (; this._match([He.tokens.less_than, He.tokens.greater_than, He.tokens.less_than_equal, He.tokens.greater_than_equal]); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._shift_expression()));
    return e2;
  }
  _shift_expression() {
    let e2 = this._additive_expression();
    for (; this._match([He.tokens.shift_left, He.tokens.shift_right]); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._additive_expression()));
    return e2;
  }
  _additive_expression() {
    let e2 = this._multiplicative_expression();
    for (; this._match([He.tokens.plus, He.tokens.minus]); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._multiplicative_expression()));
    return e2;
  }
  _multiplicative_expression() {
    let e2 = this._unary_expression();
    for (; this._match([He.tokens.star, He.tokens.forward_slash, He.tokens.modulo]); ) e2 = this._updateNode(new Ie(this._previous().toString(), e2, this._unary_expression()));
    return e2;
  }
  _unary_expression() {
    return this._match([He.tokens.minus, He.tokens.bang, He.tokens.tilde, He.tokens.star, He.tokens.and]) ? this._updateNode(new ke(this._previous().toString(), this._unary_expression())) : this._singular_expression();
  }
  _singular_expression() {
    const e2 = this._primary_expression(), t2 = this._postfix_expression();
    return t2 && (e2.postfix = t2), e2;
  }
  _postfix_expression() {
    if (this._match(He.tokens.bracket_left)) {
      const e2 = this._short_circuit_or_expression();
      this._consume(He.tokens.bracket_right, "Expected ']'.");
      const t2 = this._updateNode(new ve(e2)), n2 = this._postfix_expression();
      return n2 && (t2.postfix = n2), t2;
    }
    if (this._match(He.tokens.period)) {
      const e2 = this._consume(He.tokens.name, "Expected member name."), t2 = this._postfix_expression(), n2 = this._updateNode(new pe(e2.lexeme));
      return t2 && (n2.postfix = t2), n2;
    }
    return null;
  }
  _getStruct(e2) {
    if (this._context.aliases.has(e2)) {
      return this._context.aliases.get(e2).type;
    }
    if (this._context.structs.has(e2)) {
      return this._context.structs.get(e2);
    }
    return null;
  }
  _getType(e2) {
    const t2 = this._getStruct(e2);
    if (null !== t2) return t2;
    switch (e2) {
      case "void":
        return ae.void;
      case "bool":
        return ae.bool;
      case "i32":
        return ae.i32;
      case "u32":
        return ae.u32;
      case "f32":
        return ae.f32;
      case "f16":
        return ae.f16;
      case "vec2f":
        return ce.vec2f;
      case "vec3f":
        return ce.vec3f;
      case "vec4f":
        return ce.vec4f;
      case "vec2i":
        return ce.vec2i;
      case "vec3i":
        return ce.vec3i;
      case "vec4i":
        return ce.vec4i;
      case "vec2u":
        return ce.vec2u;
      case "vec3u":
        return ce.vec3u;
      case "vec4u":
        return ce.vec4u;
      case "vec2h":
        return ce.vec2h;
      case "vec3h":
        return ce.vec3h;
      case "vec4h":
        return ce.vec4h;
      case "mat2x2f":
        return ce.mat2x2f;
      case "mat2x3f":
        return ce.mat2x3f;
      case "mat2x4f":
        return ce.mat2x4f;
      case "mat3x2f":
        return ce.mat3x2f;
      case "mat3x3f":
        return ce.mat3x3f;
      case "mat3x4f":
        return ce.mat3x4f;
      case "mat4x2f":
        return ce.mat4x2f;
      case "mat4x3f":
        return ce.mat4x3f;
      case "mat4x4f":
        return ce.mat4x4f;
      case "mat2x2h":
        return ce.mat2x2h;
      case "mat2x3h":
        return ce.mat2x3h;
      case "mat2x4h":
        return ce.mat2x4h;
      case "mat3x2h":
        return ce.mat3x2h;
      case "mat3x3h":
        return ce.mat3x3h;
      case "mat3x4h":
        return ce.mat3x4h;
      case "mat4x2h":
        return ce.mat4x2h;
      case "mat4x3h":
        return ce.mat4x3h;
      case "mat4x4h":
        return ce.mat4x4h;
      case "mat2x2i":
        return ce.mat2x2i;
      case "mat2x3i":
        return ce.mat2x3i;
      case "mat2x4i":
        return ce.mat2x4i;
      case "mat3x2i":
        return ce.mat3x2i;
      case "mat3x3i":
        return ce.mat3x3i;
      case "mat3x4i":
        return ce.mat3x4i;
      case "mat4x2i":
        return ce.mat4x2i;
      case "mat4x3i":
        return ce.mat4x3i;
      case "mat4x4i":
        return ce.mat4x4i;
      case "mat2x2u":
        return ce.mat2x2u;
      case "mat2x3u":
        return ce.mat2x3u;
      case "mat2x4u":
        return ce.mat2x4u;
      case "mat3x2u":
        return ce.mat3x2u;
      case "mat3x3u":
        return ce.mat3x3u;
      case "mat3x4u":
        return ce.mat3x4u;
      case "mat4x2u":
        return ce.mat4x2u;
      case "mat4x3u":
        return ce.mat4x3u;
      case "mat4x4u":
        return ce.mat4x4u;
    }
    return null;
  }
  _validateTypeRange(e2, t2) {
    if ("i32" === t2.name) {
      if (e2 < -2147483648 || e2 > 2147483647) throw this._error(this._previous(), `Value out of range for i32: ${e2}. Line: ${this._currentLine}.`);
    } else if ("u32" === t2.name && (e2 < 0 || e2 > 4294967295)) throw this._error(this._previous(), `Value out of range for u32: ${e2}. Line: ${this._currentLine}.`);
  }
  _primary_expression() {
    if (this._match(He.tokens.ident)) {
      const e3 = this._previous().toString();
      if (this._check(He.tokens.paren_left)) {
        const t3 = this._argument_expression_list(), n2 = this._getType(e3);
        return null !== n2 ? this._updateNode(new de(n2, t3)) : this._updateNode(new me(e3, t3));
      }
      if (this._context.constants.has(e3)) {
        const t3 = this._context.constants.get(e3);
        return this._updateNode(new _e(e3, t3.value));
      }
      return this._updateNode(new ge(e3));
    }
    if (this._match(He.tokens.int_literal)) {
      const e3 = this._previous().toString();
      let t3 = e3.endsWith("i") || e3.endsWith("i") ? ae.i32 : e3.endsWith("u") || e3.endsWith("U") ? ae.u32 : ae.x32;
      const n2 = parseInt(e3);
      return this._validateTypeRange(n2, t3), this._updateNode(new xe(new Be(n2, this._exec.getTypeInfo(t3)), t3));
    }
    if (this._match(He.tokens.uint_literal)) {
      const e3 = parseInt(this._previous().toString());
      return this._validateTypeRange(e3, ae.u32), this._updateNode(new xe(new Be(e3, this._exec.getTypeInfo(ae.u32)), ae.u32));
    }
    if (this._match([He.tokens.decimal_float_literal, He.tokens.hex_float_literal])) {
      let e3 = this._previous().toString(), t3 = e3.endsWith("h");
      t3 && (e3 = e3.substring(0, e3.length - 1));
      const n2 = parseFloat(e3);
      this._validateTypeRange(n2, t3 ? ae.f16 : ae.f32);
      const s2 = t3 ? ae.f16 : ae.f32;
      return this._updateNode(new xe(new Be(n2, this._exec.getTypeInfo(s2)), s2));
    }
    if (this._match([He.keywords.true, He.keywords.false])) {
      let e3 = this._previous().toString() === He.keywords.true.rule;
      return this._updateNode(new xe(new Be(e3 ? 1 : 0, this._exec.getTypeInfo(ae.bool)), ae.bool));
    }
    if (this._check(He.tokens.paren_left)) return this._paren_expression();
    if (this._match(He.keywords.bitcast)) {
      this._consume(He.tokens.less_than, "Expected '<'.");
      const e3 = this._type_decl();
      this._consume(He.tokens.greater_than, "Expected '>'.");
      const t3 = this._paren_expression();
      return this._updateNode(new ye(e3, t3));
    }
    const e2 = this._type_decl(), t2 = this._argument_expression_list();
    return this._updateNode(new de(e2, t2));
  }
  _argument_expression_list() {
    if (!this._match(He.tokens.paren_left)) return null;
    const e2 = [];
    do {
      if (this._check(He.tokens.paren_right)) break;
      const t2 = this._short_circuit_or_expression();
      e2.push(t2);
    } while (this._match(He.tokens.comma));
    return this._consume(He.tokens.paren_right, "Expected ')' for agument list"), e2;
  }
  _optional_paren_expression() {
    this._match(He.tokens.paren_left);
    const e2 = this._short_circuit_or_expression();
    return this._match(He.tokens.paren_right), e2;
  }
  _paren_expression() {
    this._consume(He.tokens.paren_left, "Expected '('.");
    const e2 = this._short_circuit_or_expression();
    return this._consume(He.tokens.paren_right, "Expected ')'."), e2;
  }
  _struct_decl() {
    if (!this._match(He.keywords.struct)) return null;
    const e2 = this._currentLine, t2 = this._consume(He.tokens.ident, "Expected name for struct.").toString();
    this._consume(He.tokens.brace_left, "Expected '{' for struct body.");
    const n2 = [];
    for (; !this._check(He.tokens.brace_right); ) {
      const e3 = this._attribute(), t3 = this._consume(He.tokens.name, "Expected variable name.").toString();
      this._consume(He.tokens.colon, "Expected ':' for struct member type.");
      const s3 = this._attribute(), r3 = this._type_decl();
      null != r3 && (r3.attributes = s3), this._check(He.tokens.brace_right) ? this._match(He.tokens.comma) : this._consume(He.tokens.comma, "Expected ',' for struct member."), n2.push(this._updateNode(new Ce(t3, r3, e3)));
    }
    this._consume(He.tokens.brace_right, "Expected '}' after struct body.");
    const s2 = this._currentLine, r2 = this._updateNode(new oe(t2, n2, e2, s2), e2);
    return this._context.structs.set(t2, r2), r2;
  }
  _global_variable_decl() {
    const e2 = this._variable_decl();
    if (!e2) return null;
    if (this._match(He.tokens.equal)) {
      const t2 = this._const_expression();
      e2.value = t2;
    }
    if (null !== e2.type && e2.value instanceof xe) {
      if ("x32" !== e2.value.type.name) {
        if (e2.type.getTypeName() !== e2.value.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${e2.value.type.name} to ${e2.type.name}. Line:${this._currentLine}`);
      }
      e2.value.isScalar && this._validateTypeRange(e2.value.scalarValue, e2.type), e2.value.type = e2.type;
    } else null === e2.type && e2.value instanceof xe && (e2.type = "x32" === e2.value.type.name ? ae.i32 : e2.value.type, e2.value.isScalar && this._validateTypeRange(e2.value.scalarValue, e2.type));
    return e2;
  }
  _override_variable_decl() {
    const e2 = this._override_decl();
    return e2 && this._match(He.tokens.equal) && (e2.value = this._const_expression()), e2;
  }
  _global_const_decl() {
    var e2;
    if (!this._match(He.keywords.const)) return null;
    const t2 = this._consume(He.tokens.name, "Expected variable name"), n2 = this._currentLine;
    let s2 = null;
    if (this._match(He.tokens.colon)) {
      const e3 = this._attribute();
      s2 = this._type_decl(), null != s2 && (s2.attributes = e3);
    }
    let r2 = null;
    this._consume(He.tokens.equal, "const declarations require an assignment");
    const i2 = this._short_circuit_or_expression();
    try {
      let e3 = [ae.f32], n3 = i2.constEvaluate(this._exec, e3);
      n3 instanceof Be && this._validateTypeRange(n3.value, e3[0]), e3[0] instanceof ce && null === e3[0].format && n3.typeInfo instanceof a && null !== n3.typeInfo.format && ("f16" === n3.typeInfo.format.name ? e3[0].format = ae.f16 : "f32" === n3.typeInfo.format.name ? e3[0].format = ae.f32 : "i32" === n3.typeInfo.format.name ? e3[0].format = ae.i32 : "u32" === n3.typeInfo.format.name ? e3[0].format = ae.u32 : "bool" === n3.typeInfo.format.name ? e3[0].format = ae.bool : console.error(`TODO: impelement template format type ${n3.typeInfo.format.name}`)), r2 = this._updateNode(new xe(n3, e3[0])), this._exec.context.setVariable(t2.toString(), n3);
    } catch (e3) {
      r2 = i2;
    }
    if (null !== s2 && r2 instanceof xe) {
      if ("x32" !== r2.type.name) {
        if (s2.getTypeName() !== r2.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${r2.type.name} to ${s2.name}. Line:${this._currentLine}`);
      }
      r2.type = s2, r2.isScalar && this._validateTypeRange(r2.scalarValue, r2.type);
    } else null === s2 && r2 instanceof xe && (s2 = null !== (e2 = null == r2 ? void 0 : r2.type) && void 0 !== e2 ? e2 : ae.f32, s2 === ae.x32 && (s2 = ae.i32));
    const o2 = this._updateNode(new P(t2.toString(), s2, "", "", r2), n2);
    return this._context.constants.set(o2.name, o2), o2;
  }
  _global_let_decl() {
    if (!this._match(He.keywords.let)) return null;
    const e2 = this._currentLine, t2 = this._consume(He.tokens.name, "Expected variable name");
    let n2 = null;
    if (this._match(He.tokens.colon)) {
      const e3 = this._attribute();
      n2 = this._type_decl(), null != n2 && (n2.attributes = e3);
    }
    let s2 = null;
    if (this._match(He.tokens.equal) && (s2 = this._const_expression()), null !== n2 && s2 instanceof xe) {
      if ("x32" !== s2.type.name) {
        if (n2.getTypeName() !== s2.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${s2.type.name} to ${n2.name}. Line:${this._currentLine}`);
      }
      s2.type = n2;
    } else null === n2 && s2 instanceof xe && (n2 = "x32" === s2.type.name ? ae.i32 : s2.type);
    return s2 instanceof xe && s2.isScalar && this._validateTypeRange(s2.scalarValue, n2), this._updateNode(new U(t2.toString(), n2, "", "", s2), e2);
  }
  _const_expression() {
    return this._short_circuit_or_expression();
  }
  _variable_decl() {
    if (!this._match(He.keywords.var)) return null;
    const e2 = this._currentLine;
    let t2 = "", n2 = "";
    this._match(He.tokens.less_than) && (t2 = this._consume(He.storage_class, "Expected storage_class.").toString(), this._match(He.tokens.comma) && (n2 = this._consume(He.access_mode, "Expected access_mode.").toString()), this._consume(He.tokens.greater_than, "Expected '>'."));
    const s2 = this._consume(He.tokens.name, "Expected variable name");
    let r2 = null;
    if (this._match(He.tokens.colon)) {
      const e3 = this._attribute();
      r2 = this._type_decl(), null != r2 && (r2.attributes = e3);
    }
    return this._updateNode(new F(s2.toString(), r2, t2, n2, null), e2);
  }
  _override_decl() {
    if (!this._match(He.keywords.override)) return null;
    const e2 = this._consume(He.tokens.name, "Expected variable name");
    let t2 = null;
    if (this._match(He.tokens.colon)) {
      const e3 = this._attribute();
      t2 = this._type_decl(), null != t2 && (t2.attributes = e3);
    }
    return this._updateNode(new M(e2.toString(), t2, null));
  }
  _diagnostic() {
    this._consume(He.tokens.paren_left, "Expected '('");
    const e2 = this._consume(He.tokens.ident, "Expected severity control name.");
    this._consume(He.tokens.comma, "Expected ','");
    let t2 = this._consume(He.tokens.ident, "Expected diagnostic rule name.").toString();
    if (this._match(He.tokens.period)) {
      t2 += `.${this._consume(He.tokens.ident, "Expected diagnostic message.").toString()}`;
    }
    return this._consume(He.tokens.paren_right, "Expected ')'"), this._updateNode(new ee(e2.toString(), t2));
  }
  _enable_directive() {
    const e2 = this._consume(He.tokens.ident, "identity expected.");
    return this._updateNode(new K(e2.toString()));
  }
  _requires_directive() {
    const e2 = [this._consume(He.tokens.ident, "identity expected.").toString()];
    for (; this._match(He.tokens.comma); ) {
      const t2 = this._consume(He.tokens.ident, "identity expected.");
      e2.push(t2.toString());
    }
    return this._updateNode(new J(e2));
  }
  _type_alias() {
    const e2 = this._consume(He.tokens.ident, "identity expected.");
    this._consume(He.tokens.equal, "Expected '=' for type alias.");
    let t2 = this._type_decl();
    if (null === t2) throw this._error(this._peek(), "Expected Type for Alias.");
    this._context.aliases.has(t2.name) && (t2 = this._context.aliases.get(t2.name).type);
    const n2 = this._updateNode(new te(e2.toString(), t2));
    return this._context.aliases.set(n2.name, n2), n2;
  }
  _type_decl() {
    if (this._check([He.tokens.ident, ...He.texel_format, He.keywords.bool, He.keywords.f32, He.keywords.i32, He.keywords.u32])) {
      const e3 = this._advance().toString();
      if (this._context.structs.has(e3)) return this._context.structs.get(e3);
      if (this._context.aliases.has(e3)) return this._context.aliases.get(e3).type;
      if (!this._getType(e3)) {
        const t3 = this._updateNode(new ie(e3));
        return this._forwardTypeCount++, t3;
      }
      return this._updateNode(new ae(e3));
    }
    let e2 = this._texture_sampler_types();
    if (e2) return e2;
    if (this._check(He.template_types)) {
      let e3 = this._advance().toString(), t3 = null, n2 = null;
      this._match(He.tokens.less_than) && (t3 = this._type_decl(), n2 = null, this._match(He.tokens.comma) && (n2 = this._consume(He.access_mode, "Expected access_mode for pointer").toString()), this._consume(He.tokens.greater_than, "Expected '>' for type."));
      return this._updateNode(new ce(e3, t3, n2));
    }
    if (this._match(He.keywords.ptr)) {
      let e3 = this._previous().toString();
      this._consume(He.tokens.less_than, "Expected '<' for pointer.");
      const t3 = this._consume(He.storage_class, "Expected storage_class for pointer");
      this._consume(He.tokens.comma, "Expected ',' for pointer.");
      const n2 = this._type_decl();
      let s2 = null;
      this._match(He.tokens.comma) && (s2 = this._consume(He.access_mode, "Expected access_mode for pointer").toString()), this._consume(He.tokens.greater_than, "Expected '>' for pointer.");
      return this._updateNode(new le(e3, t3.toString(), n2, s2));
    }
    const t2 = this._attribute();
    if (this._match(He.keywords.array)) {
      let e3 = null, n2 = -1;
      const s2 = this._previous();
      let r2 = null;
      if (this._match(He.tokens.less_than)) {
        e3 = this._type_decl(), this._context.aliases.has(e3.name) && (e3 = this._context.aliases.get(e3.name).type);
        let t3 = "";
        if (this._match(He.tokens.comma)) {
          r2 = this._shift_expression();
          try {
            t3 = r2.constEvaluate(this._exec).toString(), r2 = null;
          } catch (e4) {
            t3 = "1";
          }
        }
        this._consume(He.tokens.greater_than, "Expected '>' for array."), n2 = t3 ? parseInt(t3) : 0;
      }
      const a2 = this._updateNode(new ue(s2.toString(), t2, e3, n2));
      return r2 && this._deferArrayCountEval.push({ arrayType: a2, countNode: r2 }), a2;
    }
    return null;
  }
  _texture_sampler_types() {
    if (this._match(He.sampler_type)) return this._updateNode(new he(this._previous().toString(), null, null));
    if (this._match(He.depth_texture_type)) return this._updateNode(new he(this._previous().toString(), null, null));
    if (this._match(He.sampled_texture_type) || this._match(He.multisampled_texture_type)) {
      const e2 = this._previous();
      this._consume(He.tokens.less_than, "Expected '<' for sampler type.");
      const t2 = this._type_decl();
      return this._consume(He.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new he(e2.toString(), t2, null));
    }
    if (this._match(He.storage_texture_type)) {
      const e2 = this._previous();
      this._consume(He.tokens.less_than, "Expected '<' for sampler type.");
      const t2 = this._consume(He.texel_format, "Invalid texel format.").toString();
      this._consume(He.tokens.comma, "Expected ',' after texel format.");
      const n2 = this._consume(He.access_mode, "Expected access mode for storage texture type.").toString();
      return this._consume(He.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new he(e2.toString(), t2, n2));
    }
    return null;
  }
  _attribute() {
    let e2 = [];
    for (; this._match(He.tokens.attr); ) {
      const t2 = this._consume(He.attribute_name, "Expected attribute name"), n2 = this._updateNode(new De(t2.toString(), null));
      if (this._match(He.tokens.paren_left)) {
        if (n2.value = this._consume(He.literal_or_ident, "Expected attribute value").toString(), this._check(He.tokens.comma)) {
          this._advance();
          do {
            const e3 = this._consume(He.literal_or_ident, "Expected attribute value").toString();
            n2.value instanceof Array || (n2.value = [n2.value]), n2.value.push(e3);
          } while (this._match(He.tokens.comma));
        }
        this._consume(He.tokens.paren_right, "Expected ')'");
      }
      e2.push(n2);
    }
    return 0 == e2.length ? null : e2;
  }
};
var _t = class extends at {
  constructor(e2) {
    super(), e2 && this.update(e2);
  }
  update(e2) {
    const t2 = new gt().parse(e2);
    this.updateAST(t2);
  }
};

// node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js
function getShaderLayoutFromWGSL(source3) {
  var _a;
  const shaderLayout = { attributes: [], bindings: [] };
  let parsedWGSL;
  try {
    parsedWGSL = parseWGSL(source3);
  } catch (error) {
    log.error(error.message)();
    return shaderLayout;
  }
  for (const uniform of parsedWGSL.uniforms) {
    const members = [];
    for (const attribute of ((_a = uniform.type) == null ? void 0 : _a.members) || []) {
      members.push({
        name: attribute.name,
        type: getType(attribute.type)
      });
    }
    shaderLayout.bindings.push({
      type: "uniform",
      name: uniform.name,
      group: uniform.group,
      location: uniform.binding,
      // @ts-expect-error TODO - unused for now but needs fixing
      members
    });
  }
  for (const texture of parsedWGSL.textures) {
    shaderLayout.bindings.push({
      type: "texture",
      name: texture.name,
      group: texture.group,
      location: texture.binding
    });
  }
  for (const sampler of parsedWGSL.samplers) {
    shaderLayout.bindings.push({
      type: "sampler",
      name: sampler.name,
      group: sampler.group,
      location: sampler.binding
    });
  }
  const vertex = parsedWGSL.entry.vertex[0];
  const attributeCount = (vertex == null ? void 0 : vertex.inputs.length) || 0;
  for (let i2 = 0; i2 < attributeCount; i2++) {
    const wgslAttribute = vertex.inputs[i2];
    if (wgslAttribute.locationType === "location") {
      const type = getType(wgslAttribute.type);
      shaderLayout.attributes.push({
        name: wgslAttribute.name,
        location: Number(wgslAttribute.location),
        type
      });
    }
  }
  return shaderLayout;
}
function getType(type) {
  return type.format ? `${type.name}<${type.format.name}>` : type.name;
}
function parseWGSL(source3) {
  try {
    return new _t(source3);
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    let message = "WGSL parse error";
    if (typeof error === "object" && (error == null ? void 0 : error.message)) {
      message += `: ${error.message} `;
    }
    if (typeof error === "object" && (error == null ? void 0 : error.token)) {
      message += error.token.line || "";
    }
    throw new Error(message, { cause: error });
  }
}

// node_modules/@luma.gl/shadertools/dist/modules/math/fp16/fp16-utils.js
var buffer = new ArrayBuffer(4);
var floatView = new Float32Array(buffer);
var uint32View = new Uint32Array(buffer);

// node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-utils.js
function fp64ify(a2, out = [], startIndex = 0) {
  const hiPart = Math.fround(a2);
  const loPart = a2 - hiPart;
  out[startIndex] = hiPart;
  out[startIndex + 1] = loPart;
  return out;
}
function fp64LowPart(a2) {
  return a2 - Math.fround(a2);
}
function fp64ifyMatrix4(matrix) {
  const matrixFP64 = new Float32Array(32);
  for (let i2 = 0; i2 < 4; ++i2) {
    for (let j2 = 0; j2 < 4; ++j2) {
      const index = i2 * 4 + j2;
      fp64ify(matrix[j2 * 4 + i2], matrixFP64, index * 2);
    }
  }
  return matrixFP64;
}

// node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js
var fp32shader = (
  /* glsl */
  `#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND

// All these functions are for substituting tan() function from Intel GPU only
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;

const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;

const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;

const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!

float sin_taylor_fp32(float a) {
  float r, s, t, x;

  if (a == 0.0) {
    return 0.0;
  }

  x = -a * a;
  s = a;
  r = a;

  r = r * x;
  t = r * INVERSE_FACTORIAL_3;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_5;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_7;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_9;
  s = s + t;

  return s;
}

void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
  if (a == 0.0) {
    sin_t = 0.0;
    cos_t = 1.0;
  }
  sin_t = sin_taylor_fp32(a);
  cos_t = sqrt(1.0 - sin_t * sin_t);
}

float tan_taylor_fp32(float a) {
    float sin_a;
    float cos_a;

    if (a == 0.0) {
        return 0.0;
    }

    // 2pi range reduction
    float z = floor(a / TWO_PI);
    float r = a - TWO_PI * z;

    float t;
    float q = floor(r / PI_2 + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return 1.0 / 0.0;
    }

    t = r - PI_2 * q;

    q = floor(t / PI_16 + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return 1.0 / 0.0;
    } else {
        t = t - PI_16 * q;
    }

    float u = 0.0;
    float v = 0.0;

    float sin_t, cos_t;
    float s, c;
    sincos_taylor_fp32(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0;
            v = SIN_TABLE_0;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1;
            v = SIN_TABLE_1;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2;
            v = SIN_TABLE_2;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3;
            v = SIN_TABLE_3;
        }
        if (k > 0) {
            s = u * sin_t + v * cos_t;
            c = u * cos_t - v * sin_t;
        } else {
            s = u * sin_t - v * cos_t;
            c = u * cos_t + v * sin_t;
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return sin_a / cos_a;
}
#endif

float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
  return tan_taylor_fp32(a);
#else
  return tan(a);
#endif
}
`
);
var fp32 = {
  name: "fp32",
  vs: fp32shader
};

// node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-arithmetic-glsl.js
var fp64arithmeticShader = (
  /* glsl */
  `
uniform fp64arithmeticUniforms {
  uniform float ONE;
} fp64;

/*
About LUMA_FP64_CODE_ELIMINATION_WORKAROUND

The purpose of this workaround is to prevent shader compilers from
optimizing away necessary arithmetic operations by swapping their sequences
or transform the equation to some 'equivalent' form.

The method is to multiply an artifical variable, ONE, which will be known to
the compiler to be 1 only at runtime. The whole expression is then represented
as a polynomial with respective to ONE. In the coefficients of all terms, only one a
and one b should appear

err = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE
*/

// Divide float number to high and low floats to extend fraction bits
vec2 split(float a) {
  const float SPLIT = 4097.0;
  float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float a_hi = t * fp64.ONE - (t - a);
  float a_lo = a * fp64.ONE - a_hi;
#else
  float a_hi = t - (t - a);
  float a_lo = a - a_hi;
#endif
  return vec2(a_hi, a_lo);
}

// Divide float number again when high float uses too many fraction bits
vec2 split2(vec2 a) {
  vec2 b = split(a.x);
  b.y += a.y;
  return b;
}

// Special sum operation when a > b
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float sum = (a + b) * fp64.ONE;
  float err = b - (sum - a) * fp64.ONE;
#else
  float sum = a + b;
  float err = b - (sum - a);
#endif
  return vec2(sum, err);
}

// General sum operation
vec2 twoSum(float a, float b) {
  float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE + (b - v);
#else
  float v = s - a;
  float err = (a - (s - v)) + (b - v);
#endif
  return vec2(s, err);
}

vec2 twoSub(float a, float b) {
  float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE - (b + v);
#else
  float v = s - a;
  float err = (a - (s - v)) - (b + v);
#endif
  return vec2(s, err);
}

vec2 twoSqr(float a) {
  float prod = a * a;
  vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float err = ((a_fp64.x * a_fp64.x - prod) * fp64.ONE + 2.0 * a_fp64.x *
    a_fp64.y * fp64.ONE * fp64.ONE) + a_fp64.y * a_fp64.y * fp64.ONE * fp64.ONE * fp64.ONE;
#else
  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
  return vec2(prod, err);
}

vec2 twoProd(float a, float b) {
  float prod = a * b;
  vec2 a_fp64 = split(a);
  vec2 b_fp64 = split(b);
  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
  return vec2(prod, err);
}

vec2 sum_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSum(a.x, b.x);
  t = twoSum(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 sub_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSub(a.x, b.x);
  t = twoSub(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 mul_fp64(vec2 a, vec2 b) {
  vec2 prod = twoProd(a.x, b.x);
  // y component is for the error
  prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  return prod;
}

vec2 div_fp64(vec2 a, vec2 b) {
  float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
  vec2 yn = a * xn;
#endif
  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
  vec2 prod = twoProd(xn, diff);
  return sum_fp64(yn, prod);
}

vec2 sqrt_fp64(vec2 a) {
  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);

  float x = 1.0 / sqrt(a.x);
  float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  vec2 yn_sqr = twoSqr(yn) * fp64.ONE;
#else
  vec2 yn_sqr = twoSqr(yn);
#endif
  float diff = sub_fp64(a, yn_sqr).x;
  vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  return sum_fp64(split(yn), prod);
#else
  return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64.js
var defaultUniforms = {
  // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND
  ONE: 1
};
var fp64arithmetic = {
  name: "fp64arithmetic",
  vs: fp64arithmeticShader,
  defaultUniforms,
  uniformTypes: { ONE: "f32" },
  // Additional Functions
  fp64ify,
  fp64LowPart,
  fp64ifyMatrix4
};

// node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js
var DEFAULT_HIGHLIGHT_COLOR = [0, 1, 1, 1];
var vs = (
  /* glsl */
  `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    if (!bool(picking.isAttribute)) {
      // Stores the picking color so that the fragment shader can render it during picking
      picking_vRGBcolor_Avalid.rgb = pickingColor;
    }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`
);
var fs = (
  /* glsl */
  `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`
);
var picking = {
  props: {},
  uniforms: {},
  name: "picking",
  uniformTypes: {
    isActive: "f32",
    isAttribute: "f32",
    isHighlightActive: "f32",
    useFloatColors: "f32",
    highlightedObjectColor: "vec3<f32>",
    highlightColor: "vec4<f32>"
  },
  defaultUniforms: {
    isActive: false,
    isAttribute: false,
    isHighlightActive: false,
    useFloatColors: true,
    highlightedObjectColor: [0, 0, 0],
    highlightColor: DEFAULT_HIGHLIGHT_COLOR
  },
  vs,
  fs,
  getUniforms
};
function getUniforms(opts = {}, prevUniforms) {
  const uniforms = {};
  if (opts.highlightedObjectColor === void 0) {
  } else if (opts.highlightedObjectColor === null) {
    uniforms.isHighlightActive = false;
  } else {
    uniforms.isHighlightActive = true;
    const highlightedObjectColor = opts.highlightedObjectColor.slice(0, 3);
    uniforms.highlightedObjectColor = highlightedObjectColor;
  }
  if (opts.highlightColor) {
    const color = Array.from(opts.highlightColor, (x2) => x2 / 255);
    if (!Number.isFinite(color[3])) {
      color[3] = 1;
    }
    uniforms.highlightColor = color;
  }
  if (opts.isActive !== void 0) {
    uniforms.isActive = Boolean(opts.isActive);
    uniforms.isAttribute = Boolean(opts.isAttribute);
  }
  if (opts.useFloatColors !== void 0) {
    uniforms.useFloatColors = Boolean(opts.useFloatColors);
  }
  return uniforms;
}

// node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-uniforms-glsl.js
var lightingUniformsGLSL = (
  /* glsl */
  `precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int lightType;

  int directionalLightCount;
  int pointLightCount;

  vec3 ambientColor;

  vec3 lightColor0;
  vec3 lightPosition0;
  vec3 lightDirection0;
  vec3 lightAttenuation0;

  vec3 lightColor1;
  vec3 lightPosition1;
  vec3 lightDirection1;
  vec3 lightAttenuation1;

  vec3 lightColor2;
  vec3 lightPosition2;
  vec3 lightDirection2;
  vec3 lightAttenuation2;
} lighting;

PointLight lighting_getPointLight(int index) {
  switch (index) {
    case 0:
      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);
    case 1:
      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);
    case 2:
    default:  
      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);
  }
}

DirectionalLight lighting_getDirectionalLight(int index) {
  switch (index) {
    case 0:
      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);
    case 1:
      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);
    case 2:
    default:   
      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);
  }
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-uniforms-wgsl.js
var lightingUniformsWGSL = (
  /* wgsl */
  `// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  color: vec3<f32>,
};

struct PointLight {
  color: vec3<f32>,
  position: vec3<f32>,
  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  color: vec3<f32>,
  direction: vec3<f32>,
};

struct lightingUniforms {
  enabled: i32,
  pointLightCount: i32,
  directionalLightCount: i32,

  ambientColor: vec3<f32>,

  // TODO - support multiple lights by uncommenting arrays below
  lightType: i32,
  lightColor: vec3<f32>,
  lightDirection: vec3<f32>,
  lightPosition: vec3<f32>,
  lightAttenuation: vec3<f32>,

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
};

// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)
@binding(1) @group(0) var<uniform> lighting : lightingUniforms;

fn lighting_getPointLight(index: i32) -> PointLight {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

fn lighting_getDirectionalLight(index: i32) -> DirectionalLight {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

fn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting.js
var MAX_LIGHTS = 3;
var COLOR_FACTOR = 255;
var LIGHT_TYPE;
(function(LIGHT_TYPE2) {
  LIGHT_TYPE2[LIGHT_TYPE2["POINT"] = 0] = "POINT";
  LIGHT_TYPE2[LIGHT_TYPE2["DIRECTIONAL"] = 1] = "DIRECTIONAL";
})(LIGHT_TYPE || (LIGHT_TYPE = {}));
var lighting = {
  props: {},
  uniforms: {},
  name: "lighting",
  defines: {
    MAX_LIGHTS
  },
  uniformTypes: {
    enabled: "i32",
    lightType: "i32",
    directionalLightCount: "i32",
    pointLightCount: "i32",
    ambientLightColor: "vec3<f32>",
    // TODO define as arrays once we have appropriate uniformTypes
    lightColor0: "vec3<f32>",
    lightPosition0: "vec3<f32>",
    // TODO - could combine direction and attenuation
    lightDirection0: "vec3<f32>",
    lightAttenuation0: "vec3<f32>",
    lightColor1: "vec3<f32>",
    lightPosition1: "vec3<f32>",
    lightDirection1: "vec3<f32>",
    lightAttenuation1: "vec3<f32>",
    lightColor2: "vec3<f32>",
    lightPosition2: "vec3<f32>",
    lightDirection2: "vec3<f32>",
    lightAttenuation2: "vec3<f32>"
  },
  defaultUniforms: {
    enabled: 1,
    lightType: LIGHT_TYPE.POINT,
    directionalLightCount: 0,
    pointLightCount: 0,
    ambientLightColor: [0.1, 0.1, 0.1],
    lightColor0: [1, 1, 1],
    lightPosition0: [1, 1, 2],
    // TODO - could combine direction and attenuation
    lightDirection0: [1, 1, 1],
    lightAttenuation0: [1, 0, 0],
    lightColor1: [1, 1, 1],
    lightPosition1: [1, 1, 2],
    lightDirection1: [1, 1, 1],
    lightAttenuation1: [1, 0, 0],
    lightColor2: [1, 1, 1],
    lightPosition2: [1, 1, 2],
    lightDirection2: [1, 1, 1],
    lightAttenuation2: [1, 0, 0]
  },
  source: lightingUniformsWGSL,
  vs: lightingUniformsGLSL,
  fs: lightingUniformsGLSL,
  getUniforms: getUniforms2
};
function getUniforms2(props, prevUniforms = {}) {
  props = props ? { ...props } : props;
  if (!props) {
    return { ...lighting.defaultUniforms };
  }
  if (props.lights) {
    props = { ...props, ...extractLightTypes(props.lights), lights: void 0 };
  }
  const { ambientLight, pointLights, directionalLights } = props || {};
  const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;
  if (!hasLights) {
    return { ...lighting.defaultUniforms, enabled: 0 };
  }
  const uniforms = {
    ...lighting.defaultUniforms,
    ...prevUniforms,
    ...getLightSourceUniforms({ ambientLight, pointLights, directionalLights })
  };
  if (props.enabled !== void 0) {
    uniforms.enabled = props.enabled ? 1 : 0;
  }
  return uniforms;
}
function getLightSourceUniforms({ ambientLight, pointLights = [], directionalLights = [] }) {
  const lightSourceUniforms = {};
  lightSourceUniforms.ambientLightColor = convertColor(ambientLight);
  let currentLight = 0;
  for (const pointLight of pointLights) {
    lightSourceUniforms.lightType = LIGHT_TYPE.POINT;
    const i2 = currentLight;
    lightSourceUniforms[`lightColor${i2}`] = convertColor(pointLight);
    lightSourceUniforms[`lightPosition${i2}`] = pointLight.position;
    lightSourceUniforms[`lightAttenuation${i2}`] = pointLight.attenuation || [1, 0, 0];
    currentLight++;
  }
  for (const directionalLight of directionalLights) {
    lightSourceUniforms.lightType = LIGHT_TYPE.DIRECTIONAL;
    const i2 = currentLight;
    lightSourceUniforms[`lightColor${i2}`] = convertColor(directionalLight);
    lightSourceUniforms[`lightDirection${i2}`] = directionalLight.direction;
    currentLight++;
  }
  if (currentLight > MAX_LIGHTS) {
    log.warn("MAX_LIGHTS exceeded")();
  }
  lightSourceUniforms.directionalLightCount = directionalLights.length;
  lightSourceUniforms.pointLightCount = pointLights.length;
  return lightSourceUniforms;
}
function extractLightTypes(lights2) {
  var _a, _b;
  const lightSources = { pointLights: [], directionalLights: [] };
  for (const light of lights2 || []) {
    switch (light.type) {
      case "ambient":
        lightSources.ambientLight = light;
        break;
      case "directional":
        (_a = lightSources.directionalLights) == null ? void 0 : _a.push(light);
        break;
      case "point":
        (_b = lightSources.pointLights) == null ? void 0 : _b.push(light);
        break;
      default:
    }
  }
  return lightSources;
}
function convertColor(colorDef = {}) {
  const { color = [0, 0, 0], intensity = 1 } = colorDef;
  return color.map((component) => component * intensity / COLOR_FACTOR);
}

// node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-glsl.js
var PHONG_VS = (
  /* glsl */
  `uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`
);
var PHONG_FS = (
  /* glsl */
  `uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  for (int i = 0; i < lighting.pointLightCount; i++) {
    PointLight pointLight = lighting_getPointLight(i);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);
  }

  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);
  for (int i = lighting.pointLightCount; i < totalLights; i++) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(i);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-wgsl.js
var PHONG_WGSL = (
  /* wgsl */
  `struct phongMaterialUniforms {
  ambient: f32,
  diffuse: f32,
  shininess: f32,
  specularColor: vec3<f32>,
};

@binding(2) @group(0) var<uniform> phongMaterial : phongMaterialUniforms;

fn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {
  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);
  var lambertian: f32 = dot(light_direction, normal_worldspace);
  var specular: f32 = 0.0;
  if (lambertian > 0.0) {
    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, phongMaterial.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * phongMaterial.diffuse * surfaceColor + specular * phongMaterial.specularColor) * color;
}

fn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {
  var lightColor: vec3<f32> = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);
  lightColor = phongMaterial.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    let pointLight: PointLight  = lighting_getPointLight(0);
    let light_position_worldspace: vec3<f32> = pointLight.position;
    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
}

fn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{
  var lightColor = vec3<f32>(0, 0, 0);
  let surfaceColor = vec3<f32>(0, 0, 0);

  if (lighting.enabled == 0) {
    let view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0, default: {
        let pointLight: PointLight = lighting_getPointLight(0);
        let light_position_worldspace: vec3<f32> = pointLight.position;
        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
      }
      case 1: {
        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
      }
    }
  }
  return lightColor;
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/gouraud-material/gouraud-material.js
var gouraudMaterial = {
  props: {},
  name: "gouraudMaterial",
  // Note these are switched between phong and gouraud
  vs: PHONG_FS.replace("phongMaterial", "gouraudMaterial"),
  fs: PHONG_VS.replace("phongMaterial", "gouraudMaterial"),
  source: PHONG_WGSL.replaceAll("phongMaterial", "gouraudMaterial"),
  defines: {
    LIGHTING_VERTEX: 1
  },
  dependencies: [lighting],
  uniformTypes: {
    ambient: "f32",
    diffuse: "f32",
    shininess: "f32",
    specularColor: "vec3<f32>"
  },
  defaultUniforms: {
    ambient: 0.35,
    diffuse: 0.6,
    shininess: 32,
    specularColor: [0.15, 0.15, 0.15]
  },
  getUniforms(props) {
    const uniforms = { ...props };
    if (uniforms.specularColor) {
      uniforms.specularColor = uniforms.specularColor.map((x2) => x2 / 255);
    }
    return { ...gouraudMaterial.defaultUniforms, ...uniforms };
  }
};

// node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-material.js
var phongMaterial = {
  name: "phongMaterial",
  dependencies: [lighting],
  // Note these are switched between phong and gouraud
  source: PHONG_WGSL,
  vs: PHONG_VS,
  fs: PHONG_FS,
  defines: {
    LIGHTING_FRAGMENT: 1
  },
  uniformTypes: {
    ambient: "f32",
    diffuse: "f32",
    shininess: "f32",
    specularColor: "vec3<f32>"
  },
  defaultUniforms: {
    ambient: 0.35,
    diffuse: 0.6,
    shininess: 32,
    specularColor: [0.15, 0.15, 0.15]
  },
  getUniforms(props) {
    const uniforms = { ...props };
    if (uniforms.specularColor) {
      uniforms.specularColor = uniforms.specularColor.map((x2) => x2 / 255);
    }
    return { ...phongMaterial.defaultUniforms, ...uniforms };
  }
};

// node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-vertex-glsl.js
var vs2 = (
  /* glsl */
  `out vec3 pbr_vPosition;
out vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
out mat3 pbr_vTBN;
# else
out vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = pbrProjection.modelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(pbrProjection.normalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(pbrProjection.modelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(pbrProjection.modelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-fragment-glsl.js
var fs2 = (
  /* glsl */
  `precision highp float;

uniform pbrMaterialUniforms {
  // Material is unlit
  bool unlit;

  // Base color map
  bool baseColorMapEnabled;
  vec4 baseColorFactor;

  bool normalMapEnabled;  
  float normalScale; // #ifdef HAS_NORMALMAP

  bool emissiveMapEnabled;
  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP

  vec2 metallicRoughnessValues;
  bool metallicRoughnessMapEnabled;

  bool occlusionMapEnabled;
  float occlusionStrength; // #ifdef HAS_OCCLUSIONMAP
  
  bool alphaCutoffEnabled;
  float alphaCutoff; // #ifdef ALPHA_CUTOFF
  
  // IBL
  bool IBLenabled;
  vec2 scaleIBLAmbient; // #ifdef USE_IBL
  
  // debugging flags used for shader output of intermediate PBR variables
  // #ifdef PBR_DEBUG
  vec4 scaleDiffBaseMR;
  vec4 scaleFGDSpec;
  // #endif
} pbrMaterial;

// Samplers
#ifdef HAS_BASECOLORMAP
uniform sampler2D pbr_baseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D pbr_normalSampler;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D pbr_emissiveSampler;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D pbr_metallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D pbr_occlusionSampler;
#endif
#ifdef USE_IBL
uniform samplerCube pbr_diffuseEnvSampler;
uniform samplerCube pbr_specularEnvSampler;
uniform sampler2D pbr_brdfLUT;
#endif

// Inputs from vertex shader

in vec3 pbr_vPosition;
in vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
in mat3 pbr_vTBN;
#else
in vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo {
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else // SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture(pbr_normalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(pbrMaterial.normalScale, pbrMaterial.normalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInfo.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture(pbr_brdfLUT,
    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(texture(pbr_diffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;
  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= pbrMaterial.scaleIBLAmbient.x;
  specular *= pbrMaterial.scaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInfo)
{
  return pbrInfo.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInfo)
{
  return pbrInfo.reflectance0 +
    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *
    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInfo)
{
  float NdotL = pbrInfo.NdotL;
  float NdotV = pbrInfo.NdotV;
  float r = pbrInfo.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInfo)
{
  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;
  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInfo) {
  pbrInfo.NdotL = 1.0;
  pbrInfo.NdotH = 0.0;
  pbrInfo.LdotH = 0.0;
  pbrInfo.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {
  vec3 n = pbrInfo.n;
  vec3 v = pbrInfo.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInfo, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInfo, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInfo, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInfo);
  float G = geometricOcclusion(pbrInfo);
  float D = microfacetDistribution(pbrInfo);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInfo);
  vec3 specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture(pbr_baseColorSampler, pbr_vUV)) * pbrMaterial.baseColorFactor;
#else
  vec4 baseColor = pbrMaterial.baseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < pbrMaterial.alphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(pbrMaterial.unlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = pbrMaterial.metallicRoughnessValues.y;
    float metallic = pbrMaterial.metallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture(pbr_metallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(pbrProjection.camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInfo = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );


#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInfo);
    color += calculateFinalColor(pbrInfo, lighting.ambientColor);

    // Apply directional light
    for(int i = 0; i < lighting.directionalLightCount; i++) {
      if (i < lighting.directionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInfo, lighting_getDirectionalLight(i).direction);
        color += calculateFinalColor(pbrInfo, lighting_getDirectionalLight(i).color);
      }
    }

    // Apply point light
    for(int i = 0; i < lighting.pointLightCount; i++) {
      if (i < lighting.pointLightCount) {
        PBRInfo_setPointLight(pbrInfo, lighting_getPointLight(i));
        float attenuation = getPointLightAttenuation(lighting_getPointLight(i), distance(lighting_getPointLight(i).position, pbr_vPosition));
        color += calculateFinalColor(pbrInfo, lighting_getPointLight(i).color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    if (pbrMaterial.IBLenabled) {
      color += getIBLContribution(pbrInfo, n, reflection);
    }
#endif

 // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    if (pbrMaterial.occlusionMapEnabled) {
      float ao = texture(pbr_occlusionSampler, pbr_vUV).r;
      color = mix(color, color * ao, pbrMaterial.occlusionStrength);
    }
#endif

#ifdef HAS_EMISSIVEMAP
    if (pbrMaterial.emissiveMapEnabled) {
      vec3 emissive = SRGBtoLINEAR(texture(pbr_emissiveSampler, pbr_vUV)).rgb * pbrMaterial.emissiveFactor;
      color += emissive;
    }
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, pbr_scaleFGDSpec.x);
    // color = mix(color, vec3(G), pbr_scaleFGDSpec.y);
    // color = mix(color, vec3(D), pbr_scaleFGDSpec.z);
    // color = mix(color, specContrib, pbr_scaleFGDSpec.w);

    // color = mix(color, diffuseContrib, pbr_scaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, pbrMaterial.scaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), pbrMaterial.scaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), pbrMaterial.scaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`
);

// node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-projection.js
var uniformBlock = (
  /* glsl */
  `uniform pbrProjectionUniforms {
  mat4 modelViewProjectionMatrix;
  mat4 modelMatrix;
  mat4 normalMatrix;
  vec3 camera;
} pbrProjection;
`
);
var pbrProjection = {
  name: "pbrProjection",
  vs: uniformBlock,
  fs: uniformBlock,
  // TODO why is this needed?
  getUniforms: (props) => props,
  uniformTypes: {
    modelViewProjectionMatrix: "mat4x4<f32>",
    modelMatrix: "mat4x4<f32>",
    normalMatrix: "mat4x4<f32>",
    camera: "vec3<i32>"
  }
};

// node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-material.js
var pbrMaterial = {
  props: {},
  uniforms: {},
  name: "pbrMaterial",
  dependencies: [lighting, pbrProjection],
  vs: vs2,
  fs: fs2,
  defines: {
    LIGHTING_FRAGMENT: 1
    // TODO defining these as 0 breaks shader
    // HAS_NORMALMAP: 0
    // HAS_EMISSIVEMAP: 0,
    // HAS_OCCLUSIONMAP: 0,
    // HAS_BASECOLORMAP: 0,
    // HAS_METALROUGHNESSMAP: 0,
    // ALPHA_CUTOFF: 0
    // USE_IBL: 0
    // PBR_DEBUG: 0
  },
  getUniforms: (props) => props,
  uniformTypes: {
    // Material is unlit
    unlit: "i32",
    // Base color map
    baseColorMapEnabled: "i32",
    baseColorFactor: "vec4<f32>",
    normalMapEnabled: "i32",
    normalScale: "f32",
    // #ifdef HAS_NORMALMAP
    emissiveMapEnabled: "i32",
    emissiveFactor: "vec3<f32>",
    // #ifdef HAS_EMISSIVEMAP
    metallicRoughnessValues: "vec2<f32>",
    metallicRoughnessMapEnabled: "i32",
    occlusionMapEnabled: "i32",
    occlusionStrength: "f32",
    // #ifdef HAS_OCCLUSIONMAP
    alphaCutoffEnabled: "i32",
    alphaCutoff: "f32",
    // #ifdef ALPHA_CUTOFF
    // IBL
    IBLenabled: "i32",
    scaleIBLAmbient: "vec2<f32>",
    // #ifdef USE_IBL
    // debugging flags used for shader output of intermediate PBR variables
    // #ifdef PBR_DEBUG
    scaleDiffBaseMR: "vec4<f32>",
    scaleFGDSpec: "vec4<f32>"
  }
};

// node_modules/@luma.gl/shadertools/dist/modules-webgl1/project/project.js
var common = (
  /* glsl */
  `varying vec4 project_vPositionWorld;
varying vec3 project_vNormalWorld;

vec4 project_getPosition_World() {
  return project_vPositionWorld;
}

vec3 project_getNormal_World() {
  return project_vNormalWorld;
}
`
);
var vs3 = `${common}

// Unprefixed uniforms
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewProjectionMatrix;
uniform vec3 cameraPositionWorld;

struct World {
  vec3 position;
  vec3 normal;
};

World world;

void project_setPosition(vec4 position) {
  project_vPositionWorld = position;
}

void project_setNormal(vec3 normal) {
  project_vNormalWorld = normal;
}

void project_setPositionAndNormal_World(vec3 position, vec3 normal) {
  world.position = position;
  world.normal = normal;
}

void project_setPositionAndNormal_Model(vec3 position, vec3 normal) {
  world.position = (modelMatrix * vec4(position, 1.)).xyz;
  world.normal = mat3(modelMatrix) * normal;
}

vec4 project_model_to_clipspace(vec4 position) {
  return viewProjectionMatrix * modelMatrix * position;
}

vec4 project_model_to_clipspace(vec3 position) {
  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);
}

vec4 project_world_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}

vec4 project_view_to_clipspace(vec3 position) {
  return projectionMatrix * vec4(position, 1.);
}

vec4 project_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}
`;
var fs3 = `
${common}`;

// node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/dirlight/dirlight.js
var DEFAULT_MODULE_OPTIONS = {
  lightDirection: new Float32Array([1, 1, 2])
};

// node_modules/@luma.gl/engine/dist/utils/uid.js
var uidCounters2 = {};
function uid2(id = "id") {
  uidCounters2[id] = uidCounters2[id] || 1;
  const count = uidCounters2[id]++;
  return `${id}-${count}`;
}

// node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js
var GPUGeometry = class {
  constructor(props) {
    __publicField(this, "id");
    __publicField(this, "userData", {});
    /** Determines how vertices are read from the 'vertex' attributes */
    __publicField(this, "topology");
    __publicField(this, "bufferLayout", []);
    __publicField(this, "vertexCount");
    __publicField(this, "indices");
    __publicField(this, "attributes");
    this.id = props.id || uid2("geometry");
    this.topology = props.topology;
    this.indices = props.indices || null;
    this.attributes = props.attributes;
    this.vertexCount = props.vertexCount;
    this.bufferLayout = props.bufferLayout || [];
    if (this.indices) {
      if (!(this.indices.usage & Buffer.INDEX)) {
        throw new Error("Index buffer must have INDEX usage");
      }
    }
  }
  destroy() {
    var _a;
    (_a = this.indices) == null ? void 0 : _a.destroy();
    for (const attribute of Object.values(this.attributes)) {
      attribute.destroy();
    }
  }
  getVertexCount() {
    return this.vertexCount;
  }
  getAttributes() {
    return this.attributes;
  }
  getIndexes() {
    return this.indices || null;
  }
  _calculateVertexCount(positions) {
    const vertexCount = positions.byteLength / 12;
    return vertexCount;
  }
};
function makeGPUGeometry(device, geometry2) {
  if (geometry2 instanceof GPUGeometry) {
    return geometry2;
  }
  const indices = getIndexBufferFromGeometry(device, geometry2);
  const { attributes, bufferLayout } = getAttributeBuffersFromGeometry(device, geometry2);
  return new GPUGeometry({
    topology: geometry2.topology || "triangle-list",
    bufferLayout,
    vertexCount: geometry2.vertexCount,
    indices,
    attributes
  });
}
function getIndexBufferFromGeometry(device, geometry2) {
  if (!geometry2.indices) {
    return void 0;
  }
  const data = geometry2.indices.value;
  return device.createBuffer({ usage: Buffer.INDEX, data });
}
function getAttributeBuffersFromGeometry(device, geometry2) {
  const bufferLayout = [];
  const attributes = {};
  for (const [attributeName, attribute] of Object.entries(geometry2.attributes)) {
    let name2 = attributeName;
    switch (attributeName) {
      case "POSITION":
        name2 = "positions";
        break;
      case "NORMAL":
        name2 = "normals";
        break;
      case "TEXCOORD_0":
        name2 = "texCoords";
        break;
      case "COLOR_0":
        name2 = "colors";
        break;
    }
    if (attribute) {
      attributes[name2] = device.createBuffer({
        data: attribute.value,
        id: `${attributeName}-buffer`
      });
      const { value, size, normalized } = attribute;
      bufferLayout.push({ name: name2, format: getVertexFormatFromAttribute(value, size, normalized) });
    }
  }
  const vertexCount = geometry2._calculateVertexCount(geometry2.attributes, geometry2.indices);
  return { attributes, bufferLayout, vertexCount };
}

// node_modules/@luma.gl/engine/dist/factories/pipeline-factory.js
var _PipelineFactory = class _PipelineFactory {
  constructor(device) {
    __publicField(this, "device");
    __publicField(this, "destroyPolicy");
    __publicField(this, "_hashCounter", 0);
    __publicField(this, "_hashes", {});
    __publicField(this, "_renderPipelineCache", {});
    __publicField(this, "_computePipelineCache", {});
    this.device = device;
    this.destroyPolicy = device.props._factoryDestroyPolicy;
  }
  /** Get the singleton default pipeline factory for the specified device */
  static getDefaultPipelineFactory(device) {
    device._lumaData.defaultPipelineFactory = device._lumaData.defaultPipelineFactory || new _PipelineFactory(device);
    return device._lumaData.defaultPipelineFactory;
  }
  /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */
  createRenderPipeline(props) {
    const allProps = { ...RenderPipeline.defaultProps, ...props };
    const hash = this._hashRenderPipeline(allProps);
    if (!this._renderPipelineCache[hash]) {
      const pipeline = this.device.createRenderPipeline({
        ...allProps,
        id: allProps.id ? `${allProps.id}-cached` : void 0
      });
      pipeline.hash = hash;
      this._renderPipelineCache[hash] = { pipeline, useCount: 0 };
    }
    this._renderPipelineCache[hash].useCount++;
    return this._renderPipelineCache[hash].pipeline;
  }
  createComputePipeline(props) {
    const allProps = { ...ComputePipeline.defaultProps, ...props };
    const hash = this._hashComputePipeline(allProps);
    if (!this._computePipelineCache[hash]) {
      const pipeline = this.device.createComputePipeline({
        ...allProps,
        id: allProps.id ? `${allProps.id}-cached` : void 0
      });
      pipeline.hash = hash;
      this._computePipelineCache[hash] = { pipeline, useCount: 0 };
    }
    this._computePipelineCache[hash].useCount++;
    return this._computePipelineCache[hash].pipeline;
  }
  release(pipeline) {
    const hash = pipeline.hash;
    const cache = pipeline instanceof ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;
    cache[hash].useCount--;
    if (cache[hash].useCount === 0) {
      if (this.destroyPolicy === "unused") {
        cache[hash].pipeline.destroy();
        delete cache[hash];
      }
    }
  }
  // PRIVATE
  _hashComputePipeline(props) {
    const shaderHash = this._getHash(props.shader.source);
    return `${shaderHash}`;
  }
  /** Calculate a hash based on all the inputs for a render pipeline */
  _hashRenderPipeline(props) {
    const vsHash = props.vs ? this._getHash(props.vs.source) : 0;
    const fsHash = props.fs ? this._getHash(props.fs.source) : 0;
    const varyingHash = "-";
    const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
    switch (this.device.type) {
      case "webgl":
        return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;
      default:
        const parameterHash = this._getHash(JSON.stringify(props.parameters));
        return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;
    }
  }
  _getHash(key) {
    if (this._hashes[key] === void 0) {
      this._hashes[key] = this._hashCounter++;
    }
    return this._hashes[key];
  }
};
__publicField(_PipelineFactory, "defaultProps", { ...RenderPipeline.defaultProps });
var PipelineFactory = _PipelineFactory;

// node_modules/@luma.gl/engine/dist/factories/shader-factory.js
var _ShaderFactory = class _ShaderFactory {
  /** @internal */
  constructor(device) {
    __publicField(this, "device");
    __publicField(this, "destroyPolicy");
    __publicField(this, "_cache", {});
    this.device = device;
    this.destroyPolicy = device.props._factoryDestroyPolicy;
  }
  /** Returns the default ShaderFactory for the given {@link Device}, creating one if necessary. */
  static getDefaultShaderFactory(device) {
    var _a;
    (_a = device._lumaData).defaultShaderFactory || (_a.defaultShaderFactory = new _ShaderFactory(device));
    return device._lumaData.defaultShaderFactory;
  }
  /** Requests a {@link Shader} from the cache, creating a new Shader only if necessary. */
  createShader(props) {
    const key = this._hashShader(props);
    let cacheEntry = this._cache[key];
    if (!cacheEntry) {
      const shader = this.device.createShader({
        ...props,
        id: props.id ? `${props.id}-cached` : void 0
      });
      this._cache[key] = cacheEntry = { shader, useCount: 0 };
    }
    cacheEntry.useCount++;
    return cacheEntry.shader;
  }
  /** Releases a previously-requested {@link Shader}, destroying it if no users remain. */
  release(shader) {
    const key = this._hashShader(shader);
    const cacheEntry = this._cache[key];
    if (cacheEntry) {
      cacheEntry.useCount--;
      if (cacheEntry.useCount === 0) {
        if (this.destroyPolicy === "unused") {
          delete this._cache[key];
          cacheEntry.shader.destroy();
        }
      }
    }
  }
  // PRIVATE
  _hashShader(value) {
    return `${value.stage}:${value.source}`;
  }
};
__publicField(_ShaderFactory, "defaultProps", { ...Shader.defaultProps });
var ShaderFactory = _ShaderFactory;

// node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js
function getDebugTableForShaderLayout(layout, name2) {
  var _a;
  const table = {};
  const header = "Values";
  if (layout.attributes.length === 0 && !((_a = layout.varyings) == null ? void 0 : _a.length)) {
    return { "No attributes or varyings": { [header]: "N/A" } };
  }
  for (const attributeDeclaration of layout.attributes) {
    if (attributeDeclaration) {
      const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
      table[`in ${glslDeclaration}`] = { [header]: attributeDeclaration.stepMode || "vertex" };
    }
  }
  for (const varyingDeclaration of layout.varyings || []) {
    const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
    table[`out ${glslDeclaration}`] = { [header]: JSON.stringify(varyingDeclaration) };
  }
  return table;
}

// node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js
var canvas = null;
var ctx = null;
function debugFramebuffer(fbo, { id, minimap, opaque, top = "0", left = "0", rgbaScale = 1 }) {
  if (!canvas) {
    canvas = document.createElement("canvas");
    canvas.id = id;
    canvas.title = id;
    canvas.style.zIndex = "100";
    canvas.style.position = "absolute";
    canvas.style.top = top;
    canvas.style.left = left;
    canvas.style.border = "blue 5px solid";
    canvas.style.transform = "scaleY(-1)";
    document.body.appendChild(canvas);
    ctx = canvas.getContext("2d");
  }
  if (canvas.width !== fbo.width || canvas.height !== fbo.height) {
    canvas.width = fbo.width / 2;
    canvas.height = fbo.height / 2;
    canvas.style.width = "400px";
    canvas.style.height = "400px";
  }
  const color = fbo.device.readPixelsToArrayWebGL(fbo);
  const imageData = ctx == null ? void 0 : ctx.createImageData(fbo.width, fbo.height);
  if (imageData) {
    const offset = 0;
    for (let i2 = 0; i2 < color.length; i2 += 4) {
      imageData.data[offset + i2 + 0] = color[i2 + 0] * rgbaScale;
      imageData.data[offset + i2 + 1] = color[i2 + 1] * rgbaScale;
      imageData.data[offset + i2 + 2] = color[i2 + 2] * rgbaScale;
      imageData.data[offset + i2 + 3] = opaque ? 255 : color[i2 + 3] * rgbaScale;
    }
    ctx == null ? void 0 : ctx.putImageData(imageData, 0, 0);
  }
}

// node_modules/@luma.gl/engine/dist/utils/deep-equal.js
function deepEqual(a2, b2, depth) {
  if (a2 === b2) {
    return true;
  }
  if (!depth || !a2 || !b2) {
    return false;
  }
  if (Array.isArray(a2)) {
    if (!Array.isArray(b2) || a2.length !== b2.length) {
      return false;
    }
    for (let i2 = 0; i2 < a2.length; i2++) {
      if (!deepEqual(a2[i2], b2[i2], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  if (Array.isArray(b2)) {
    return false;
  }
  if (typeof a2 === "object" && typeof b2 === "object") {
    const aKeys = Object.keys(a2);
    const bKeys = Object.keys(b2);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    for (const key of aKeys) {
      if (!b2.hasOwnProperty(key)) {
        return false;
      }
      if (!deepEqual(a2[key], b2[key], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@math.gl/types/dist/is-array.js
function isTypedArray2(value) {
  return ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function isNumberArray2(value) {
  if (Array.isArray(value)) {
    return value.length === 0 || typeof value[0] === "number";
  }
  return false;
}
function isNumericArray(value) {
  return isTypedArray2(value) || isNumberArray2(value);
}

// node_modules/@luma.gl/engine/dist/model/split-uniforms-and-bindings.js
function isUniformValue(value) {
  return isNumericArray(value) || typeof value === "number" || typeof value === "boolean";
}
function splitUniformsAndBindings(uniforms) {
  const result = { bindings: {}, uniforms: {} };
  Object.keys(uniforms).forEach((name2) => {
    const uniform = uniforms[name2];
    if (isUniformValue(uniform)) {
      result.uniforms[name2] = uniform;
    } else {
      result.bindings[name2] = uniform;
    }
  });
  return result;
}

// node_modules/@luma.gl/engine/dist/shader-inputs.js
var ShaderInputs = class {
  /** Tracks if uniforms have changed */
  // moduleUniformsChanged: Record<keyof ShaderPropsT, false | string>;
  /**
   * Create a new UniformStore instance
   * @param modules
   */
  constructor(modules, options) {
    __publicField(this, "options", {
      disableWarnings: false
    });
    /**
     * The map of modules
     * @todo should should this include the resolved dependencies?
     */
    // @ts-ignore Fix typings
    __publicField(this, "modules");
    /** Stores the uniform values for each module */
    __publicField(this, "moduleUniforms");
    /** Stores the uniform bindings for each module  */
    __publicField(this, "moduleBindings");
    Object.assign(this.options, options);
    const resolvedModules = getShaderModuleDependencies(Object.values(modules).filter((module) => module.dependencies));
    for (const resolvedModule of resolvedModules) {
      modules[resolvedModule.name] = resolvedModule;
    }
    log.log(1, "Creating ShaderInputs with modules", Object.keys(modules))();
    this.modules = modules;
    this.moduleUniforms = {};
    this.moduleBindings = {};
    for (const [name2, module] of Object.entries(modules)) {
      this._addModule(module);
      if (module.name && name2 !== module.name && !this.options.disableWarnings) {
        log.warn(`Module name: ${name2} vs ${module.name}`)();
      }
    }
  }
  /** Destroy */
  destroy() {
  }
  /**
   * Set module props
   */
  setProps(props) {
    var _a;
    for (const name2 of Object.keys(props)) {
      const moduleName = name2;
      const moduleProps = props[moduleName] || {};
      const module = this.modules[moduleName];
      if (!module) {
        if (!this.options.disableWarnings) {
          log.warn(`Module ${name2} not found`)();
        }
        continue;
      }
      const oldUniforms = this.moduleUniforms[moduleName];
      const oldBindings = this.moduleBindings[moduleName];
      const uniformsAndBindings = ((_a = module.getUniforms) == null ? void 0 : _a.call(module, moduleProps, oldUniforms)) || moduleProps;
      const { uniforms, bindings } = splitUniformsAndBindings(uniformsAndBindings);
      this.moduleUniforms[moduleName] = { ...oldUniforms, ...uniforms };
      this.moduleBindings[moduleName] = { ...oldBindings, ...bindings };
    }
  }
  /**
   * Return the map of modules
   * @todo should should this include the resolved dependencies?
   */
  getModules() {
    return Object.values(this.modules);
  }
  /** Get all uniform values for all modules */
  getUniformValues() {
    return this.moduleUniforms;
  }
  /** Merges all bindings for the shader (from the various modules) */
  getBindingValues() {
    const bindings = {};
    for (const moduleBindings of Object.values(this.moduleBindings)) {
      Object.assign(bindings, moduleBindings);
    }
    return bindings;
  }
  // INTERNAL
  /** Return a debug table that can be used for console.table() or log.table() */
  getDebugTable() {
    var _a;
    const table = {};
    for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
      for (const [key, value] of Object.entries(module)) {
        table[`${moduleName}.${key}`] = {
          type: (_a = this.modules[moduleName].uniformTypes) == null ? void 0 : _a[key],
          value: String(value)
        };
      }
    }
    return table;
  }
  _addModule(module) {
    const moduleName = module.name;
    this.moduleUniforms[moduleName] = module.defaultUniforms || {};
    this.moduleBindings[moduleName] = {};
  }
};

// node_modules/@luma.gl/engine/dist/application-utils/load-file.js
var pathPrefix = "";
function setPathPrefix(prefix) {
  pathPrefix = prefix;
}
async function loadImageBitmap(url, opts) {
  const image = new Image();
  image.crossOrigin = (opts == null ? void 0 : opts.crossOrigin) || "anonymous";
  image.src = url.startsWith("http") ? url : pathPrefix + url;
  await image.decode();
  return opts ? await createImageBitmap(image, opts) : await createImageBitmap(image);
}
async function loadImage(url, opts) {
  return await new Promise((resolve, reject) => {
    try {
      const image = new Image();
      image.onload = () => resolve(image);
      image.onerror = () => reject(new Error(`Could not load image ${url}.`));
      image.crossOrigin = (opts == null ? void 0 : opts.crossOrigin) || "anonymous";
      image.src = url.startsWith("http") ? url : pathPrefix + url;
    } catch (error) {
      reject(error);
    }
  });
}

// node_modules/@luma.gl/engine/dist/async-texture/async-texture.js
var AsyncTexture = class {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    // TODO - should we type these as possibly `null`? It will make usage harder?
    // @ts-expect-error
    __publicField(this, "texture");
    // @ts-expect-error
    __publicField(this, "sampler");
    // @ts-expect-error
    __publicField(this, "view");
    __publicField(this, "ready");
    __publicField(this, "isReady", false);
    __publicField(this, "destroyed", false);
    __publicField(this, "resolveReady", () => {
    });
    __publicField(this, "rejectReady", () => {
    });
    this.device = device;
    this.id = props.id || uid2("async-texture");
    if (typeof (props == null ? void 0 : props.data) === "string" && props.dimension === "2d") {
      props = { ...props, data: loadImageBitmap(props.data) };
    }
    this.ready = new Promise((resolve, reject) => {
      this.resolveReady = () => {
        this.isReady = true;
        resolve();
      };
      this.rejectReady = reject;
    });
    this.initAsync(props);
  }
  get [Symbol.toStringTag]() {
    return "AsyncTexture";
  }
  toString() {
    return `AsyncTexture:"${this.id}"(${this.isReady ? "ready" : "loading"})`;
  }
  async initAsync(props) {
    const asyncData = props.data;
    let data;
    try {
      data = await awaitAllPromises(asyncData);
    } catch (error) {
      this.rejectReady(error);
    }
    if (this.destroyed) {
      return;
    }
    const syncProps = { ...props, data };
    this.texture = this.device.createTexture(syncProps);
    this.sampler = this.texture.sampler;
    this.view = this.texture.view;
    this.isReady = true;
    this.resolveReady();
  }
  destroy() {
    if (this.texture) {
      this.texture.destroy();
      this.texture = null;
    }
    this.destroyed = true;
  }
  /**
   * Textures are immutable and cannot be resized after creation,
   * but we can create a similar texture with the same parameters but a new size.
   * @note Does not copy contents of the texture
   * @todo Abort pending promise and create a texture with the new size?
   */
  resize(size) {
    if (!this.isReady) {
      throw new Error("Cannot resize texture before it is ready");
    }
    if (size.width === this.texture.width && size.height === this.texture.height) {
      return false;
    }
    if (this.texture) {
      const texture = this.texture;
      this.texture = texture.clone(size);
      texture.destroy();
    }
    return true;
  }
};
async function awaitAllPromises(x2) {
  x2 = await x2;
  if (Array.isArray(x2)) {
    return await Promise.all(x2.map(awaitAllPromises));
  }
  if (x2 && typeof x2 === "object" && x2.constructor === Object) {
    const object = x2;
    const values = await Promise.all(Object.values(object));
    const keys = Object.keys(object);
    const resolvedObject = {};
    for (let i2 = 0; i2 < keys.length; i2++) {
      resolvedObject[keys[i2]] = values[i2];
    }
    return resolvedObject;
  }
  return x2;
}

// node_modules/@luma.gl/engine/dist/model/model.js
var LOG_DRAW_PRIORITY = 2;
var LOG_DRAW_TIMEOUT = 1e4;
var _Model = class _Model {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "source");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "vs");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "fs");
    __publicField(this, "pipelineFactory");
    __publicField(this, "shaderFactory");
    __publicField(this, "userData", {});
    // Fixed properties (change can trigger pipeline rebuild)
    /** The render pipeline GPU parameters, depth testing etc */
    __publicField(this, "parameters");
    /** The primitive topology */
    __publicField(this, "topology");
    /** Buffer layout */
    __publicField(this, "bufferLayout");
    // Dynamic properties
    /** Use instanced rendering */
    __publicField(this, "isInstanced");
    /** instance count. `undefined` means not instanced */
    __publicField(this, "instanceCount", 0);
    /** Vertex count */
    __publicField(this, "vertexCount");
    /** Index buffer */
    __publicField(this, "indexBuffer", null);
    /** Buffer-valued attributes */
    __publicField(this, "bufferAttributes", {});
    /** Constant-valued attributes */
    __publicField(this, "constantAttributes", {});
    /** Bindings (textures, samplers, uniform buffers) */
    __publicField(this, "bindings", {});
    /** Sets uniforms @deprecated Use uniform buffers and setBindings() for portability*/
    __publicField(this, "uniforms", {});
    /**
     * VertexArray
     * @note not implemented: if bufferLayout is updated, vertex array has to be rebuilt!
     * @todo - allow application to define multiple vertex arrays?
     * */
    __publicField(this, "vertexArray");
    /** TransformFeedback, WebGL 2 only. */
    __publicField(this, "transformFeedback", null);
    /** The underlying GPU "program". @note May be recreated if parameters change */
    __publicField(this, "pipeline");
    /** ShaderInputs instance */
    // @ts-expect-error Assigned in function called by constructor
    __publicField(this, "shaderInputs");
    // @ts-expect-error Assigned in function called by constructor
    __publicField(this, "_uniformStore");
    __publicField(this, "_attributeInfos", {});
    __publicField(this, "_gpuGeometry", null);
    __publicField(this, "_getModuleUniforms");
    __publicField(this, "props");
    __publicField(this, "_pipelineNeedsUpdate", "newly created");
    __publicField(this, "_needsRedraw", "initializing");
    __publicField(this, "_destroyed", false);
    /** "Time" of last draw. Monotonically increasing timestamp */
    __publicField(this, "_lastDrawTimestamp", -1);
    /** Throttle draw call logging */
    __publicField(this, "_lastLogTime", 0);
    __publicField(this, "_logOpen", false);
    __publicField(this, "_drawCount", 0);
    var _a, _b, _c, _d;
    this.props = { ..._Model.defaultProps, ...props };
    props = this.props;
    this.id = props.id || uid2("model");
    this.device = device;
    Object.assign(this.userData, props.userData);
    const moduleMap = Object.fromEntries(((_a = this.props.modules) == null ? void 0 : _a.map((module) => [module.name, module])) || []);
    const shaderInputs = props.shaderInputs || new ShaderInputs(moduleMap, { disableWarnings: this.props.disableWarnings });
    this.setShaderInputs(shaderInputs);
    const platformInfo = getPlatformInfo(device);
    const modules = (
      // @ts-ignore shaderInputs is assigned in setShaderInputs above.
      (((_b = this.props.modules) == null ? void 0 : _b.length) > 0 ? this.props.modules : (_c = this.shaderInputs) == null ? void 0 : _c.getModules()) || []
    );
    const isWebGPU = this.device.type === "webgpu";
    if (isWebGPU && this.props.source) {
      const { source: source3, getUniforms: getUniforms4 } = this.props.shaderAssembler.assembleWGSLShader({
        platformInfo,
        ...this.props,
        modules
      });
      this.source = source3;
      this._getModuleUniforms = getUniforms4;
      (_d = this.props).shaderLayout || (_d.shaderLayout = getShaderLayoutFromWGSL(this.source));
    } else {
      const { vs: vs7, fs: fs7, getUniforms: getUniforms4 } = this.props.shaderAssembler.assembleGLSLShaderPair({
        platformInfo,
        ...this.props,
        modules
      });
      this.vs = vs7;
      this.fs = fs7;
      this._getModuleUniforms = getUniforms4;
    }
    this.vertexCount = this.props.vertexCount;
    this.instanceCount = this.props.instanceCount;
    this.topology = this.props.topology;
    this.bufferLayout = this.props.bufferLayout;
    this.parameters = this.props.parameters;
    if (props.geometry) {
      this.setGeometry(props.geometry);
    }
    this.pipelineFactory = props.pipelineFactory || PipelineFactory.getDefaultPipelineFactory(this.device);
    this.shaderFactory = props.shaderFactory || ShaderFactory.getDefaultShaderFactory(this.device);
    this.pipeline = this._updatePipeline();
    this.vertexArray = device.createVertexArray({
      renderPipeline: this.pipeline
    });
    if (this._gpuGeometry) {
      this._setGeometryAttributes(this._gpuGeometry);
    }
    if ("isInstanced" in props) {
      this.isInstanced = props.isInstanced;
    }
    if (props.instanceCount) {
      this.setInstanceCount(props.instanceCount);
    }
    if (props.vertexCount) {
      this.setVertexCount(props.vertexCount);
    }
    if (props.indexBuffer) {
      this.setIndexBuffer(props.indexBuffer);
    }
    if (props.attributes) {
      this.setAttributes(props.attributes);
    }
    if (props.constantAttributes) {
      this.setConstantAttributes(props.constantAttributes);
    }
    if (props.bindings) {
      this.setBindings(props.bindings);
    }
    if (props.uniforms) {
      this.setUniformsWebGL(props.uniforms);
    }
    if (props.moduleSettings) {
      this.updateModuleSettingsWebGL(props.moduleSettings);
    }
    if (props.transformFeedback) {
      this.transformFeedback = props.transformFeedback;
    }
    Object.seal(this);
  }
  get [Symbol.toStringTag]() {
    return "Model";
  }
  toString() {
    return `Model(${this.id})`;
  }
  destroy() {
    var _a;
    if (this._destroyed)
      return;
    this.pipelineFactory.release(this.pipeline);
    this.shaderFactory.release(this.pipeline.vs);
    if (this.pipeline.fs) {
      this.shaderFactory.release(this.pipeline.fs);
    }
    this._uniformStore.destroy();
    (_a = this._gpuGeometry) == null ? void 0 : _a.destroy();
    this._destroyed = true;
  }
  // Draw call
  /** Query redraw status. Clears the status. */
  needsRedraw() {
    if (this._getBindingsUpdateTimestamp() > this._lastDrawTimestamp) {
      this.setNeedsRedraw("contents of bound textures or buffers updated");
    }
    const needsRedraw = this._needsRedraw;
    this._needsRedraw = false;
    return needsRedraw;
  }
  /** Mark the model as needing a redraw */
  setNeedsRedraw(reason) {
    this._needsRedraw || (this._needsRedraw = reason);
  }
  predraw() {
    this.updateShaderInputs();
    this.pipeline = this._updatePipeline();
  }
  draw(renderPass) {
    const loadingBinding = this._areBindingsLoading();
    if (loadingBinding) {
      log.info(LOG_DRAW_PRIORITY, `>>> DRAWING ABORTED ${this.id}: ${loadingBinding} not loaded`)();
      return false;
    }
    try {
      renderPass.pushDebugGroup(`${this}.predraw(${renderPass})`);
      this.predraw();
    } finally {
      renderPass.popDebugGroup();
    }
    let drawSuccess;
    try {
      renderPass.pushDebugGroup(`${this}.draw(${renderPass})`);
      this._logDrawCallStart();
      this.pipeline = this._updatePipeline();
      const syncBindings = this._getBindings();
      this.pipeline.setBindings(syncBindings, {
        disableWarnings: this.props.disableWarnings
      });
      if (!isObjectEmpty(this.uniforms)) {
        this.pipeline.setUniformsWebGL(this.uniforms);
      }
      const { indexBuffer } = this.vertexArray;
      const indexCount = indexBuffer ? indexBuffer.byteLength / (indexBuffer.indexType === "uint32" ? 4 : 2) : void 0;
      drawSuccess = this.pipeline.draw({
        renderPass,
        vertexArray: this.vertexArray,
        isInstanced: this.isInstanced,
        vertexCount: this.vertexCount,
        instanceCount: this.instanceCount,
        indexCount,
        transformFeedback: this.transformFeedback || void 0,
        // WebGL shares underlying cached pipelines even for models that have different parameters and topology,
        // so we must provide our unique parameters to each draw
        // (In WebGPU most parameters are encoded in the pipeline and cannot be changed per draw call)
        parameters: this.parameters,
        topology: this.topology
      });
    } finally {
      renderPass.popDebugGroup();
      this._logDrawCallEnd();
    }
    this._logFramebuffer(renderPass);
    if (drawSuccess) {
      this._lastDrawTimestamp = this.device.timestamp;
      this._needsRedraw = false;
    } else {
      this._needsRedraw = "waiting for resource initialization";
    }
    return drawSuccess;
  }
  // Update fixed fields (can trigger pipeline rebuild)
  /**
   * Updates the optional geometry
   * Geometry, set topology and bufferLayout
   * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  setGeometry(geometry2) {
    var _a;
    (_a = this._gpuGeometry) == null ? void 0 : _a.destroy();
    const gpuGeometry = geometry2 && makeGPUGeometry(this.device, geometry2);
    if (gpuGeometry) {
      this.setTopology(gpuGeometry.topology || "triangle-list");
      const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
      this.bufferLayout = bufferLayoutHelper.mergeBufferLayouts(gpuGeometry.bufferLayout, this.bufferLayout);
      if (this.vertexArray) {
        this._setGeometryAttributes(gpuGeometry);
      }
    }
    this._gpuGeometry = gpuGeometry;
  }
  /**
   * Updates the primitive topology ('triangle-list', 'triangle-strip' etc).
   * @note Triggers a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  setTopology(topology) {
    if (topology !== this.topology) {
      this.topology = topology;
      this._setPipelineNeedsUpdate("topology");
    }
  }
  /**
   * Updates the buffer layout.
   * @note Triggers a pipeline rebuild / pipeline cache fetch
   */
  setBufferLayout(bufferLayout) {
    const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
    this.bufferLayout = this._gpuGeometry ? bufferLayoutHelper.mergeBufferLayouts(bufferLayout, this._gpuGeometry.bufferLayout) : bufferLayout;
    this._setPipelineNeedsUpdate("bufferLayout");
    this.pipeline = this._updatePipeline();
    this.vertexArray = this.device.createVertexArray({
      renderPipeline: this.pipeline
    });
    if (this._gpuGeometry) {
      this._setGeometryAttributes(this._gpuGeometry);
    }
  }
  /**
   * Set GPU parameters.
   * @note Can trigger a pipeline rebuild / pipeline cache fetch.
   * @param parameters
   */
  setParameters(parameters) {
    if (!deepEqual(parameters, this.parameters, 2)) {
      this.parameters = parameters;
      this._setPipelineNeedsUpdate("parameters");
    }
  }
  // Update dynamic fields
  /**
   * Updates the instance count (used in draw calls)
   * @note Any attributes with stepMode=instance need to be at least this big
   */
  setInstanceCount(instanceCount) {
    this.instanceCount = instanceCount;
    if (this.isInstanced === void 0 && instanceCount > 0) {
      this.isInstanced = true;
    }
    this.setNeedsRedraw("instanceCount");
  }
  /**
   * Updates the vertex count (used in draw calls)
   * @note Any attributes with stepMode=vertex need to be at least this big
   */
  setVertexCount(vertexCount) {
    this.vertexCount = vertexCount;
    this.setNeedsRedraw("vertexCount");
  }
  /** Set the shader inputs */
  setShaderInputs(shaderInputs) {
    this.shaderInputs = shaderInputs;
    this._uniformStore = new UniformStore(this.shaderInputs.modules);
    for (const [moduleName, module] of Object.entries(this.shaderInputs.modules)) {
      if (shaderModuleHasUniforms(module)) {
        const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
        this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
      }
    }
    this.setNeedsRedraw("shaderInputs");
  }
  /** Update uniform buffers from the model's shader inputs */
  updateShaderInputs() {
    this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
    this.setBindings(this.shaderInputs.getBindingValues());
    this.setNeedsRedraw("shaderInputs");
  }
  /**
   * Sets bindings (textures, samplers, uniform buffers)
   */
  setBindings(bindings) {
    Object.assign(this.bindings, bindings);
    this.setNeedsRedraw("bindings");
  }
  /**
   * Updates optional transform feedback. WebGL only.
   */
  setTransformFeedback(transformFeedback) {
    this.transformFeedback = transformFeedback;
    this.setNeedsRedraw("transformFeedback");
  }
  /**
   * Sets the index buffer
   * @todo - how to unset it if we change geometry?
   */
  setIndexBuffer(indexBuffer) {
    this.vertexArray.setIndexBuffer(indexBuffer);
    this.setNeedsRedraw("indexBuffer");
  }
  /**
   * Sets attributes (buffers)
   * @note Overrides any attributes previously set with the same name
   */
  setAttributes(buffers, options) {
    const disableWarnings = (options == null ? void 0 : options.disableWarnings) ?? this.props.disableWarnings;
    if (buffers.indices) {
      log.warn(`Model:${this.id} setAttributes() - indexBuffer should be set using setIndexBuffer()`)();
    }
    this.bufferLayout = sortedBufferLayoutByShaderSourceLocations(this.pipeline.shaderLayout, this.bufferLayout);
    const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
    for (const [bufferName, buffer2] of Object.entries(buffers)) {
      const bufferLayout = bufferLayoutHelper.getBufferLayout(bufferName);
      if (!bufferLayout) {
        if (!disableWarnings) {
          log.warn(`Model(${this.id}): Missing layout for buffer "${bufferName}".`)();
        }
        continue;
      }
      const attributeNames = bufferLayoutHelper.getAttributeNamesForBuffer(bufferLayout);
      let set = false;
      for (const attributeName of attributeNames) {
        const attributeInfo = this._attributeInfos[attributeName];
        if (attributeInfo) {
          const location = this.device.type === "webgpu" ? bufferLayoutHelper.getBufferIndex(attributeInfo.bufferName) : attributeInfo.location;
          this.vertexArray.setBuffer(location, buffer2);
          set = true;
        }
      }
      if (!set && !disableWarnings) {
        log.warn(`Model(${this.id}): Ignoring buffer "${buffer2.id}" for unknown attribute "${bufferName}"`)();
      }
    }
    this.setNeedsRedraw("attributes");
  }
  /**
   * Sets constant attributes
   * @note Overrides any attributes previously set with the same name
   * Constant attributes are only supported in WebGL, not in WebGPU
   * Any attribute that is disabled in the current vertex array object
   * is read from the context's global constant value for that attribute location.
   * @param constantAttributes
   */
  setConstantAttributes(attributes, options) {
    for (const [attributeName, value] of Object.entries(attributes)) {
      const attributeInfo = this._attributeInfos[attributeName];
      if (attributeInfo) {
        this.vertexArray.setConstantWebGL(attributeInfo.location, value);
      } else if (!((options == null ? void 0 : options.disableWarnings) ?? this.props.disableWarnings)) {
        log.warn(`Model "${this.id}: Ignoring constant supplied for unknown attribute "${attributeName}"`)();
      }
    }
    this.setNeedsRedraw("constants");
  }
  // DEPRECATED METHODS
  /**
   * Sets individual uniforms
   * @deprecated WebGL only, use uniform buffers for portability
   * @param uniforms
   */
  setUniforms(uniforms) {
    this.setUniformsWebGL(uniforms);
  }
  /**
   * Sets individual uniforms
   * @deprecated WebGL only, use uniform buffers for portability
   * @param uniforms
   */
  setUniformsWebGL(uniforms) {
    if (!isObjectEmpty(uniforms)) {
      this.pipeline.setUniformsWebGL(uniforms);
      Object.assign(this.uniforms, uniforms);
    }
    this.setNeedsRedraw("uniforms");
  }
  /**
   * @deprecated Updates shader module settings (which results in uniforms being set)
   */
  updateModuleSettingsWebGL(props) {
    const { bindings, uniforms } = splitUniformsAndBindings(this._getModuleUniforms(props));
    Object.assign(this.bindings, bindings);
    Object.assign(this.uniforms, uniforms);
    this.setNeedsRedraw("moduleSettings");
  }
  // Internal methods
  /** Check that bindings are loaded. Returns id of first binding that is still loading. */
  _areBindingsLoading() {
    for (const binding of Object.values(this.bindings)) {
      if (binding instanceof AsyncTexture && !binding.isReady) {
        return binding.id;
      }
    }
    return false;
  }
  /** Extracts texture view from loaded async textures. Returns null if any textures have not yet been loaded. */
  _getBindings() {
    const validBindings = {};
    for (const [name2, binding] of Object.entries(this.bindings)) {
      if (binding instanceof AsyncTexture) {
        if (binding.isReady) {
          validBindings[name2] = binding.texture;
        }
      } else {
        validBindings[name2] = binding;
      }
    }
    return validBindings;
  }
  /** Get the timestamp of the latest updated bound GPU memory resource (buffer/texture). */
  _getBindingsUpdateTimestamp() {
    let timestamp = 0;
    for (const binding of Object.values(this.bindings)) {
      if (binding instanceof TextureView) {
        timestamp = Math.max(timestamp, binding.texture.updateTimestamp);
      } else if (binding instanceof Buffer || binding instanceof Texture) {
        timestamp = Math.max(timestamp, binding.updateTimestamp);
      } else if (binding instanceof AsyncTexture) {
        timestamp = binding.texture ? Math.max(timestamp, binding.texture.updateTimestamp) : (
          // The texture will become available in the future
          Infinity
        );
      } else if (!(binding instanceof Sampler)) {
        timestamp = Math.max(timestamp, binding.buffer.updateTimestamp);
      }
    }
    return timestamp;
  }
  /**
   * Updates the optional geometry attributes
   * Geometry, sets several attributes, indexBuffer, and also vertex count
   * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  _setGeometryAttributes(gpuGeometry) {
    const attributes = { ...gpuGeometry.attributes };
    for (const [attributeName] of Object.entries(attributes)) {
      if (!this.pipeline.shaderLayout.attributes.find((layout) => layout.name === attributeName) && attributeName !== "positions") {
        delete attributes[attributeName];
      }
    }
    this.vertexCount = gpuGeometry.vertexCount;
    this.setIndexBuffer(gpuGeometry.indices || null);
    this.setAttributes(gpuGeometry.attributes, { disableWarnings: true });
    this.setAttributes(attributes, { disableWarnings: this.props.disableWarnings });
    this.setNeedsRedraw("geometry attributes");
  }
  /** Mark pipeline as needing update */
  _setPipelineNeedsUpdate(reason) {
    this._pipelineNeedsUpdate || (this._pipelineNeedsUpdate = reason);
    this.setNeedsRedraw(reason);
  }
  /** Update pipeline if needed */
  _updatePipeline() {
    if (this._pipelineNeedsUpdate) {
      let prevShaderVs = null;
      let prevShaderFs = null;
      if (this.pipeline) {
        log.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
        prevShaderVs = this.pipeline.vs;
        prevShaderFs = this.pipeline.fs;
      }
      this._pipelineNeedsUpdate = false;
      const vs7 = this.shaderFactory.createShader({
        id: `${this.id}-vertex`,
        stage: "vertex",
        source: this.source || this.vs,
        debugShaders: this.props.debugShaders
      });
      let fs7 = null;
      if (this.source) {
        fs7 = vs7;
      } else if (this.fs) {
        fs7 = this.shaderFactory.createShader({
          id: `${this.id}-fragment`,
          stage: "fragment",
          source: this.source || this.fs,
          debugShaders: this.props.debugShaders
        });
      }
      this.pipeline = this.pipelineFactory.createRenderPipeline({
        ...this.props,
        bufferLayout: this.bufferLayout,
        topology: this.topology,
        parameters: this.parameters,
        // TODO - why set bindings here when we reset them every frame?
        // Should we expose a BindGroup abstraction?
        bindings: this._getBindings(),
        vs: vs7,
        fs: fs7
      });
      this._attributeInfos = getAttributeInfosFromLayouts(this.pipeline.shaderLayout, this.bufferLayout);
      if (prevShaderVs)
        this.shaderFactory.release(prevShaderVs);
      if (prevShaderFs)
        this.shaderFactory.release(prevShaderFs);
    }
    return this.pipeline;
  }
  _logDrawCallStart() {
    const logDrawTimeout = log.level > 3 ? 0 : LOG_DRAW_TIMEOUT;
    if (log.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
      return;
    }
    this._lastLogTime = Date.now();
    this._logOpen = true;
    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, { collapsed: log.level <= 2 })();
  }
  _logDrawCallEnd() {
    if (this._logOpen) {
      const shaderLayoutTable = getDebugTableForShaderLayout(this.pipeline.shaderLayout, this.id);
      log.table(LOG_DRAW_PRIORITY, shaderLayoutTable)();
      const uniformTable = this.shaderInputs.getDebugTable();
      for (const [name2, value] of Object.entries(this.uniforms)) {
        uniformTable[name2] = { value };
      }
      log.table(LOG_DRAW_PRIORITY, uniformTable)();
      const attributeTable = this._getAttributeDebugTable();
      log.table(LOG_DRAW_PRIORITY, this._attributeInfos)();
      log.table(LOG_DRAW_PRIORITY, attributeTable)();
      log.groupEnd(LOG_DRAW_PRIORITY)();
      this._logOpen = false;
    }
  }
  _logFramebuffer(renderPass) {
    const debugFramebuffers = this.device.props.debugFramebuffers;
    this._drawCount++;
    if (!debugFramebuffers) {
      return;
    }
    const framebuffer = renderPass.props.framebuffer;
    if (framebuffer) {
      debugFramebuffer(framebuffer, { id: framebuffer.id, minimap: true });
    }
  }
  _getAttributeDebugTable() {
    const table = {};
    for (const [name2, attributeInfo] of Object.entries(this._attributeInfos)) {
      const values = this.vertexArray.attributes[attributeInfo.location];
      table[attributeInfo.location] = {
        name: name2,
        type: attributeInfo.shaderType,
        values: values ? this._getBufferOrConstantValues(values, attributeInfo.bufferDataType) : "null"
      };
    }
    if (this.vertexArray.indexBuffer) {
      const { indexBuffer } = this.vertexArray;
      const values = indexBuffer.indexType === "uint32" ? new Uint32Array(indexBuffer.debugData) : new Uint16Array(indexBuffer.debugData);
      table.indices = {
        name: "indices",
        type: indexBuffer.indexType,
        values: values.toString()
      };
    }
    return table;
  }
  // TODO - fix typing of luma data types
  _getBufferOrConstantValues(attribute, dataType) {
    const TypedArrayConstructor = getTypedArrayFromDataType(dataType);
    const typedArray = attribute instanceof Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
    return typedArray.toString();
  }
};
__publicField(_Model, "defaultProps", {
  ...RenderPipeline.defaultProps,
  source: void 0,
  vs: null,
  fs: null,
  id: "unnamed",
  handle: void 0,
  userData: {},
  defines: {},
  modules: [],
  moduleSettings: void 0,
  geometry: null,
  indexBuffer: null,
  attributes: {},
  constantAttributes: {},
  varyings: [],
  isInstanced: void 0,
  instanceCount: 0,
  vertexCount: 0,
  shaderInputs: void 0,
  pipelineFactory: void 0,
  shaderFactory: void 0,
  transformFeedback: void 0,
  shaderAssembler: ShaderAssembler.getDefaultShaderAssembler(),
  debugShaders: void 0,
  disableWarnings: void 0
});
var Model = _Model;
function shaderModuleHasUniforms(module) {
  return Boolean(module.uniformTypes && !isObjectEmpty(module.uniformTypes));
}
function getPlatformInfo(device) {
  return {
    type: device.type,
    shaderLanguage: device.info.shadingLanguage,
    shaderLanguageVersion: device.info.shadingLanguageVersion,
    gpu: device.info.gpu,
    // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
    features: device.features
  };
}
function isObjectEmpty(obj) {
  for (const key in obj) {
    return false;
  }
  return true;
}

// node_modules/@luma.gl/engine/dist/compute/buffer-transform.js
var _BufferTransform = class _BufferTransform {
  constructor(device, props = _BufferTransform.defaultProps) {
    __publicField(this, "device");
    __publicField(this, "model");
    __publicField(this, "transformFeedback");
    if (!_BufferTransform.isSupported(device)) {
      throw new Error("BufferTransform not yet implemented on WebGPU");
    }
    this.device = device;
    this.model = new Model(this.device, {
      id: props.id || "buffer-transform-model",
      fs: props.fs || getPassthroughFS(),
      topology: props.topology || "point-list",
      varyings: props.outputs || props.varyings,
      ...props
    });
    this.transformFeedback = this.device.createTransformFeedback({
      layout: this.model.pipeline.shaderLayout,
      // @ts-expect-error TODO
      buffers: props.feedbackBuffers
    });
    this.model.setTransformFeedback(this.transformFeedback);
    Object.seal(this);
  }
  static isSupported(device) {
    var _a;
    return ((_a = device == null ? void 0 : device.info) == null ? void 0 : _a.type) === "webgl";
  }
  /** Destroy owned resources. */
  destroy() {
    if (this.model) {
      this.model.destroy();
    }
  }
  /** @deprecated Use {@link destroy}. */
  delete() {
    this.destroy();
  }
  /** Run one transform loop. */
  run(options) {
    if (options == null ? void 0 : options.inputBuffers) {
      this.model.setAttributes(options.inputBuffers);
    }
    if (options == null ? void 0 : options.outputBuffers) {
      this.transformFeedback.setBuffers(options.outputBuffers);
    }
    const renderPass = this.device.beginRenderPass(options);
    this.model.draw(renderPass);
    renderPass.end();
  }
  // DEPRECATED METHODS
  /** @deprecated App knows what buffers it is passing in - Returns the {@link Buffer} or {@link BufferRange} for given varying name. */
  getBuffer(varyingName) {
    return this.transformFeedback.getBuffer(varyingName);
  }
  /** @deprecated App knows what buffers it is passing in - Reads the {@link Buffer} or {@link BufferRange} for given varying name. */
  readAsync(varyingName) {
    const result = this.getBuffer(varyingName);
    if (!result) {
      throw new Error("BufferTransform#getBuffer");
    }
    if (result instanceof Buffer) {
      return result.readAsync();
    }
    const { buffer: buffer2, byteOffset = 0, byteLength = buffer2.byteLength } = result;
    return buffer2.readAsync(byteOffset, byteLength);
  }
};
__publicField(_BufferTransform, "defaultProps", {
  ...Model.defaultProps,
  outputs: void 0,
  feedbackBuffers: void 0
});
var BufferTransform = _BufferTransform;

// node_modules/@luma.gl/engine/dist/compute/texture-transform.js
var FS_OUTPUT_VARIABLE = "transform_output";
var TextureTransform = class {
  // resources to be deleted
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "model");
    __publicField(this, "sampler");
    __publicField(this, "currentIndex", 0);
    __publicField(this, "samplerTextureMap", null);
    __publicField(this, "bindings", []);
    // each element is an object : {sourceTextures, targetTexture, framebuffer}
    __publicField(this, "resources", {});
    this.device = device;
    this.sampler = device.createSampler({
      addressModeU: "clamp-to-edge",
      addressModeV: "clamp-to-edge",
      minFilter: "nearest",
      magFilter: "nearest",
      mipmapFilter: "nearest"
    });
    this.model = new Model(this.device, {
      id: props.id || "texture-transform-model",
      fs: props.fs || getPassthroughFS({
        input: props.targetTextureVarying,
        inputChannels: props.targetTextureChannels,
        output: FS_OUTPUT_VARIABLE
      }),
      vertexCount: props.vertexCount,
      // TODO(donmccurdy): Naming?
      ...props
    });
    this._initialize(props);
    Object.seal(this);
  }
  // Delete owned resources.
  destroy() {
    var _a;
    this.model.destroy();
    for (const binding of this.bindings) {
      (_a = binding.framebuffer) == null ? void 0 : _a.destroy();
    }
  }
  /** @deprecated Use {@link destroy}. */
  delete() {
    this.destroy();
  }
  run(options) {
    const { framebuffer } = this.bindings[this.currentIndex];
    const renderPass = this.device.beginRenderPass({ framebuffer, ...options });
    this.model.draw(renderPass);
    renderPass.end();
  }
  getTargetTexture() {
    const { targetTexture } = this.bindings[this.currentIndex];
    return targetTexture;
  }
  getFramebuffer() {
    const currentResources = this.bindings[this.currentIndex];
    return currentResources.framebuffer;
  }
  // Private
  _initialize(props) {
    this._updateBindings(props);
  }
  _updateBindings(props) {
    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], props);
  }
  _updateBinding(binding, { sourceBuffers, sourceTextures, targetTexture }) {
    if (!binding) {
      binding = {
        sourceBuffers: {},
        sourceTextures: {},
        // @ts-expect-error
        targetTexture: null
      };
    }
    Object.assign(binding.sourceTextures, sourceTextures);
    Object.assign(binding.sourceBuffers, sourceBuffers);
    if (targetTexture) {
      binding.targetTexture = targetTexture;
      const { width, height } = targetTexture;
      if (binding.framebuffer) {
        binding.framebuffer.destroy();
      }
      binding.framebuffer = this.device.createFramebuffer({
        id: "transform-framebuffer",
        width,
        height,
        colorAttachments: [targetTexture]
      });
      binding.framebuffer.resize({ width, height });
    }
    return binding;
  }
  // set texture filtering parameters on source textures.
  _setSourceTextureParameters() {
    const index = this.currentIndex;
    const { sourceTextures } = this.bindings[index];
    for (const name2 in sourceTextures) {
      sourceTextures[name2].sampler = this.sampler;
    }
  }
};

// node_modules/@luma.gl/engine/dist/geometry/geometry.js
var Geometry = class {
  constructor(props) {
    __publicField(this, "id");
    /** Determines how vertices are read from the 'vertex' attributes */
    __publicField(this, "topology");
    __publicField(this, "vertexCount");
    __publicField(this, "indices");
    __publicField(this, "attributes");
    __publicField(this, "userData", {});
    const { attributes = {}, indices = null, vertexCount = null } = props;
    this.id = props.id || uid2("geometry");
    this.topology = props.topology;
    if (indices) {
      this.indices = ArrayBuffer.isView(indices) ? { value: indices, size: 1 } : indices;
    }
    this.attributes = {};
    for (const [attributeName, attributeValue] of Object.entries(attributes)) {
      const attribute = ArrayBuffer.isView(attributeValue) ? { value: attributeValue } : attributeValue;
      if (!ArrayBuffer.isView(attribute.value)) {
        throw new Error(`${this._print(attributeName)}: must be typed array or object with value as typed array`);
      }
      if ((attributeName === "POSITION" || attributeName === "positions") && !attribute.size) {
        attribute.size = 3;
      }
      if (attributeName === "indices") {
        if (this.indices) {
          throw new Error("Multiple indices detected");
        }
        this.indices = attribute;
      } else {
        this.attributes[attributeName] = attribute;
      }
    }
    if (this.indices && this.indices.isIndexed !== void 0) {
      this.indices = Object.assign({}, this.indices);
      delete this.indices.isIndexed;
    }
    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);
  }
  getVertexCount() {
    return this.vertexCount;
  }
  /**
   * Return an object with all attributes plus indices added as a field.
   * TODO Geometry types are a mess
   */
  getAttributes() {
    return this.indices ? { indices: this.indices, ...this.attributes } : this.attributes;
  }
  // PRIVATE
  _print(attributeName) {
    return `Geometry ${this.id} attribute ${attributeName}`;
  }
  /**
   * GeometryAttribute
   * value: typed array
   * type: indices, vertices, uvs
   * size: elements per vertex
   * target: WebGL buffer type (string or constant)
   *
   * @param attributes
   * @param indices
   * @returns
   */
  _setAttributes(attributes, indices) {
    return this;
  }
  _calculateVertexCount(attributes, indices) {
    if (indices) {
      return indices.value.length;
    }
    let vertexCount = Infinity;
    for (const attribute of Object.values(attributes)) {
      const { value, size, constant } = attribute;
      if (!constant && value && size !== void 0 && size >= 1) {
        vertexCount = Math.min(vertexCount, value.length / size);
      }
    }
    return vertexCount;
  }
};

// node_modules/@luma.gl/engine/dist/models/clip-space.js
var CLIPSPACE_VERTEX_SHADER_WGSL = (
  /* wgsl */
  `struct VertexInputs {
  @location(0) clipSpacePosition: vec2<f32>,
  @location(1) texCoord: vec2<f32>,
  @location(2) coordinate: vec2<f32>  
}

struct FragmentInputs {
  @builtin(position) Position : vec4<f32>,
  @location(0) position : vec2<f32>,
  @location(1) coordinate : vec2<f32>,
  @location(2) uv : vec2<f32>
};

@vertex
fn vertexMain(inputs: VertexInputs) -> FragmentInputs {
  var outputs: FragmentInputs;
  outputs.Position = vec4(inputs.clipSpacePosition, 0., 1.);
  outputs.position = inputs.clipSpacePosition;
  outputs.coordinate = inputs.coordinate;
  outputs.uv = inputs.texCoord;
  return outputs;
}
`
);
var CLIPSPACE_VERTEX_SHADER = (
  /* glsl */
  `#version 300 es
in vec2 clipSpacePositions;
in vec2 texCoords;
in vec2 coordinates;

out vec2 position;
out vec2 coordinate;
out vec2 uv;

void main(void) {
  gl_Position = vec4(clipSpacePositions, 0., 1.);
  position = clipSpacePositions;
  coordinate = coordinates;
  uv = texCoords;
}
`
);
var POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];
var ClipSpace = class extends Model {
  constructor(device, props) {
    const TEX_COORDS = POSITIONS.map((coord) => coord === -1 ? 0 : coord);
    if (props.source) {
      props = { ...props, source: `${CLIPSPACE_VERTEX_SHADER_WGSL}
${props.source}` };
    }
    super(device, {
      id: props.id || uid2("clip-space"),
      ...props,
      vs: CLIPSPACE_VERTEX_SHADER,
      vertexCount: 4,
      geometry: new Geometry({
        topology: "triangle-strip",
        vertexCount: 4,
        attributes: {
          clipSpacePositions: { size: 2, value: new Float32Array(POSITIONS) },
          texCoords: { size: 2, value: new Float32Array(TEX_COORDS) },
          coordinates: { size: 2, value: new Float32Array(TEX_COORDS) }
        }
      })
    });
  }
};

// node_modules/@luma.gl/engine/dist/models/billboard-texture-model.js
var BACKGROUND_FS_WGSL = (
  /* wgsl */
  `@group(0) @binding(0) var backgroundTexture: texture_2d<f32>;
@group(0) @binding(1) var backgroundTextureSampler: sampler;

fn billboardTexture_getTextureUV(coordinates: vec2<f32>) -> vec2<f32> {
	let iTexSize: vec2<u32> = textureDimensions(backgroundTexture, 0) * 2;
	let texSize: vec2<f32> = vec2<f32>(f32(iTexSize.x), f32(iTexSize.y));
	var position: vec2<f32> = coordinates.xy / texSize;
	return position;
} 

@fragment
fn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {
	let position: vec2<f32> = billboardTexture_getTextureUV(inputs.coordinate);
	return textureSample(backgroundTexture, backgroundTextureSampler, position);
}
`
);
var BACKGROUND_FS = (
  /* glsl */
  `#version 300 es
precision highp float;

uniform sampler2D backgroundTexture;
out vec4 fragColor;

vec2 billboardTexture_getTextureUV() {
  ivec2 iTexSize = textureDimensions(backgroundTexture, 0) * 2;
  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));
  vec2 position = gl_FragCoord.xy / texSize;
  return position;
}

void main(void) {
  vec2 position = billboardTexture_getTextureUV();
  fragColor = texture(backgroundTexture, position);
}
`
);
var BackgroundTextureModel = class extends ClipSpace {
  constructor(device, props) {
    super(device, {
      id: props.id || "background-texture-model",
      source: BACKGROUND_FS_WGSL,
      fs: BACKGROUND_FS,
      parameters: {
        depthWriteEnabled: false,
        depthCompare: "always",
        ...props.blend ? {
          blend: true,
          blendColorOperation: "add",
          blendAlphaOperation: "add",
          blendColorSrcFactor: "one",
          blendColorDstFactor: "one-minus-src-color",
          blendAlphaSrcFactor: "one",
          blendAlphaDstFactor: "one-minus-src-alpha"
        } : {}
      }
    });
    this.setTexture(props.backgroundTexture);
  }
  setTexture(backgroundTexture) {
    this.setBindings({
      backgroundTexture
    });
  }
  predraw() {
    this.shaderInputs.setProps({});
    super.predraw();
  }
};

// node_modules/@luma.gl/engine/dist/scenegraph/scenegraph-node.js
var ScenegraphNode = class {
  constructor(props = {}) {
    __publicField(this, "id");
    __publicField(this, "matrix", new Matrix4());
    __publicField(this, "display", true);
    __publicField(this, "position", new Vector3());
    __publicField(this, "rotation", new Vector3());
    __publicField(this, "scale", new Vector3(1, 1, 1));
    __publicField(this, "userData", {});
    __publicField(this, "props", {});
    const { id } = props;
    this.id = id || uid2(this.constructor.name);
    this._setScenegraphNodeProps(props);
  }
  getBounds() {
    return null;
  }
  destroy() {
  }
  /** @deprecated use .destroy() */
  delete() {
    this.destroy();
  }
  setProps(props) {
    this._setScenegraphNodeProps(props);
    return this;
  }
  toString() {
    return `{type: ScenegraphNode, id: ${this.id})}`;
  }
  setPosition(position) {
    this.position = position;
    return this;
  }
  setRotation(rotation) {
    this.rotation = rotation;
    return this;
  }
  setScale(scale) {
    this.scale = scale;
    return this;
  }
  setMatrix(matrix, copyMatrix = true) {
    if (copyMatrix) {
      this.matrix.copy(matrix);
    } else {
      this.matrix = matrix;
    }
  }
  setMatrixComponents(components) {
    const { position, rotation, scale, update = true } = components;
    if (position) {
      this.setPosition(position);
    }
    if (rotation) {
      this.setRotation(rotation);
    }
    if (scale) {
      this.setScale(scale);
    }
    if (update) {
      this.updateMatrix();
    }
    return this;
  }
  updateMatrix() {
    const pos = this.position;
    const rot = this.rotation;
    const scale = this.scale;
    this.matrix.identity();
    this.matrix.translate(pos);
    this.matrix.rotateXYZ(rot);
    this.matrix.scale(scale);
    return this;
  }
  update(options = {}) {
    const { position, rotation, scale } = options;
    if (position) {
      this.setPosition(position);
    }
    if (rotation) {
      this.setRotation(rotation);
    }
    if (scale) {
      this.setScale(scale);
    }
    this.updateMatrix();
    return this;
  }
  getCoordinateUniforms(viewMatrix, modelMatrix) {
    modelMatrix = modelMatrix || this.matrix;
    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);
    const worldInverse = worldMatrix.invert();
    const worldInverseTranspose = worldInverse.transpose();
    return {
      viewMatrix,
      modelMatrix,
      objectMatrix: modelMatrix,
      worldMatrix,
      worldInverseMatrix: worldInverse,
      worldInverseTransposeMatrix: worldInverseTranspose
    };
  }
  // TODO - copied code, not yet vetted
  /*
    transform() {
      if (!this.parent) {
        this.endPosition.set(this.position);
        this.endRotation.set(this.rotation);
        this.endScale.set(this.scale);
      } else {
        const parent = this.parent;
        this.endPosition.set(this.position.add(parent.endPosition));
        this.endRotation.set(this.rotation.add(parent.endRotation));
        this.endScale.set(this.scale.add(parent.endScale));
      }
  
      const ch = this.children;
      for (let i = 0; i < ch.length; ++i) {
        ch[i].transform();
      }
  
      return this;
    }
    */
  _setScenegraphNodeProps(props) {
    if ("position" in props) {
      this.setPosition(props.position);
    }
    if ("rotation" in props) {
      this.setRotation(props.rotation);
    }
    if ("scale" in props) {
      this.setScale(props.scale);
    }
    if ("matrix" in props) {
      this.setMatrix(props.matrix);
    }
    Object.assign(this.props, props);
  }
};

// node_modules/@luma.gl/engine/dist/scenegraph/group-node.js
var GroupNode = class _GroupNode extends ScenegraphNode {
  constructor(props = {}) {
    props = Array.isArray(props) ? { children: props } : props;
    const { children = [] } = props;
    log.assert(children.every((child) => child instanceof ScenegraphNode), "every child must an instance of ScenegraphNode");
    super(props);
    __publicField(this, "children");
    this.children = children;
  }
  getBounds() {
    const result = [
      [Infinity, Infinity, Infinity],
      [-Infinity, -Infinity, -Infinity]
    ];
    this.traverse((node, { worldMatrix }) => {
      const bounds = node.getBounds();
      if (!bounds) {
        return;
      }
      const [min, max] = bounds;
      const center = new Vector3(min).add(max).divide([2, 2, 2]);
      worldMatrix.transformAsPoint(center, center);
      const halfSize = new Vector3(max).subtract(min).divide([2, 2, 2]);
      worldMatrix.transformAsVector(halfSize, halfSize);
      for (let v2 = 0; v2 < 8; v2++) {
        const position = new Vector3(v2 & 1 ? -1 : 1, v2 & 2 ? -1 : 1, v2 & 4 ? -1 : 1).multiply(halfSize).add(center);
        for (let i2 = 0; i2 < 3; i2++) {
          result[0][i2] = Math.min(result[0][i2], position[i2]);
          result[1][i2] = Math.max(result[1][i2], position[i2]);
        }
      }
    });
    if (!Number.isFinite(result[0][0])) {
      return null;
    }
    return result;
  }
  destroy() {
    this.children.forEach((child) => child.destroy());
    this.removeAll();
    super.destroy();
  }
  // Unpacks arrays and nested arrays of children
  add(...children) {
    for (const child of children) {
      if (Array.isArray(child)) {
        this.add(...child);
      } else {
        this.children.push(child);
      }
    }
    return this;
  }
  remove(child) {
    const children = this.children;
    const indexOf = children.indexOf(child);
    if (indexOf > -1) {
      children.splice(indexOf, 1);
    }
    return this;
  }
  removeAll() {
    this.children = [];
    return this;
  }
  traverse(visitor, { worldMatrix = new Matrix4() } = {}) {
    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);
    for (const child of this.children) {
      if (child instanceof _GroupNode) {
        child.traverse(visitor, { worldMatrix: modelMatrix });
      } else {
        visitor(child, { worldMatrix: modelMatrix });
      }
    }
  }
};

// node_modules/@luma.gl/engine/dist/scenegraph/model-node.js
var ModelNode = class extends ScenegraphNode {
  // TODO - is this used? override callbacks to make sure we call them with this
  // onBeforeRender = null;
  // onAfterRender = null;
  // AfterRender = null;
  constructor(props) {
    super(props);
    __publicField(this, "model");
    __publicField(this, "bounds", null);
    __publicField(this, "managedResources");
    this.model = props.model;
    this.managedResources = props.managedResources || [];
    this.bounds = props.bounds || null;
    this.setProps(props);
  }
  destroy() {
    if (this.model) {
      this.model.destroy();
      this.model = null;
    }
    this.managedResources.forEach((resource) => resource.destroy());
    this.managedResources = [];
  }
  getBounds() {
    return this.bounds;
  }
  // Expose model methods
  draw(renderPass) {
    return this.model.draw(renderPass);
  }
};

// node_modules/@luma.gl/engine/dist/geometries/truncated-cone-geometry.js
var INDEX_OFFSETS = {
  x: [2, 0, 1],
  y: [0, 1, 2],
  z: [1, 2, 0]
};
var TruncatedConeGeometry = class extends Geometry {
  constructor(props = {}) {
    const { id = uid2("truncated-code-geometry") } = props;
    const { indices, attributes } = tesselateTruncatedCone(props);
    super({
      ...props,
      id,
      topology: "triangle-list",
      indices,
      attributes: {
        POSITION: { size: 3, value: attributes.POSITION },
        NORMAL: { size: 3, value: attributes.NORMAL },
        TEXCOORD_0: { size: 2, value: attributes.TEXCOORD_0 },
        ...props.attributes
      }
    });
  }
};
function tesselateTruncatedCone(props = {}) {
  const { bottomRadius = 0, topRadius = 0, height = 1, nradial = 10, nvertical = 10, verticalAxis = "y", topCap = false, bottomCap = false } = props;
  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
  const numVertices = (nradial + 1) * (nvertical + 1 + extra);
  const slant = Math.atan2(bottomRadius - topRadius, height);
  const msin = Math.sin;
  const mcos = Math.cos;
  const mpi = Math.PI;
  const cosSlant = mcos(slant);
  const sinSlant = msin(slant);
  const start = topCap ? -2 : 0;
  const end = nvertical + (bottomCap ? 2 : 0);
  const vertsAroundEdge = nradial + 1;
  const indices = new Uint16Array(nradial * (nvertical + extra) * 6);
  const indexOffset = INDEX_OFFSETS[verticalAxis];
  const positions = new Float32Array(numVertices * 3);
  const normals = new Float32Array(numVertices * 3);
  const texCoords = new Float32Array(numVertices * 2);
  let i3 = 0;
  let i2 = 0;
  for (let i4 = start; i4 <= end; i4++) {
    let v2 = i4 / nvertical;
    let y2 = height * v2;
    let ringRadius;
    if (i4 < 0) {
      y2 = 0;
      v2 = 1;
      ringRadius = bottomRadius;
    } else if (i4 > nvertical) {
      y2 = height;
      v2 = 1;
      ringRadius = topRadius;
    } else {
      ringRadius = bottomRadius + (topRadius - bottomRadius) * (i4 / nvertical);
    }
    if (i4 === -2 || i4 === nvertical + 2) {
      ringRadius = 0;
      v2 = 0;
    }
    y2 -= height / 2;
    for (let j2 = 0; j2 < vertsAroundEdge; j2++) {
      const sin = msin(j2 * mpi * 2 / nradial);
      const cos = mcos(j2 * mpi * 2 / nradial);
      positions[i3 + indexOffset[0]] = sin * ringRadius;
      positions[i3 + indexOffset[1]] = y2;
      positions[i3 + indexOffset[2]] = cos * ringRadius;
      normals[i3 + indexOffset[0]] = i4 < 0 || i4 > nvertical ? 0 : sin * cosSlant;
      normals[i3 + indexOffset[1]] = i4 < 0 ? -1 : i4 > nvertical ? 1 : sinSlant;
      normals[i3 + indexOffset[2]] = i4 < 0 || i4 > nvertical ? 0 : cos * cosSlant;
      texCoords[i2 + 0] = j2 / nradial;
      texCoords[i2 + 1] = v2;
      i2 += 2;
      i3 += 3;
    }
  }
  for (let i4 = 0; i4 < nvertical + extra; i4++) {
    for (let j2 = 0; j2 < nradial; j2++) {
      const index = (i4 * nradial + j2) * 6;
      indices[index + 0] = vertsAroundEdge * (i4 + 0) + 0 + j2;
      indices[index + 1] = vertsAroundEdge * (i4 + 0) + 1 + j2;
      indices[index + 2] = vertsAroundEdge * (i4 + 1) + 1 + j2;
      indices[index + 3] = vertsAroundEdge * (i4 + 0) + 0 + j2;
      indices[index + 4] = vertsAroundEdge * (i4 + 1) + 1 + j2;
      indices[index + 5] = vertsAroundEdge * (i4 + 1) + 0 + j2;
    }
  }
  return {
    indices,
    attributes: {
      POSITION: positions,
      NORMAL: normals,
      TEXCOORD_0: texCoords
    }
  };
}

// node_modules/@luma.gl/engine/dist/geometries/cone-geometry.js
var ConeGeometry = class extends TruncatedConeGeometry {
  constructor(props = {}) {
    const { id = uid2("cone-geometry"), radius = 1, cap = true } = props;
    super({
      ...props,
      id,
      topRadius: 0,
      topCap: Boolean(cap),
      bottomCap: Boolean(cap),
      bottomRadius: radius
    });
  }
};

// node_modules/@luma.gl/engine/dist/geometries/cube-geometry.js
var CubeGeometry = class extends Geometry {
  constructor(props = {}) {
    const { id = uid2("cube-geometry"), indices = true } = props;
    super(indices ? {
      ...props,
      id,
      topology: "triangle-list",
      indices: { size: 1, value: CUBE_INDICES },
      attributes: { ...ATTRIBUTES, ...props.attributes }
    } : {
      ...props,
      id,
      topology: "triangle-list",
      indices: void 0,
      attributes: { ...NON_INDEXED_ATTRIBUTES, ...props.attributes }
    });
  }
};
var CUBE_INDICES = new Uint16Array([
  0,
  1,
  2,
  0,
  2,
  3,
  4,
  5,
  6,
  4,
  6,
  7,
  8,
  9,
  10,
  8,
  10,
  11,
  12,
  13,
  14,
  12,
  14,
  15,
  16,
  17,
  18,
  16,
  18,
  19,
  20,
  21,
  22,
  20,
  22,
  23
]);
var CUBE_POSITIONS = new Float32Array([
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1
]);
var CUBE_NORMALS = new Float32Array([
  // Front face
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  // Back face
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  // Top face
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  // Bottom face
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  // Right face
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  // Left face
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0
]);
var CUBE_TEX_COORDS = new Float32Array([
  // Front face
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  1,
  // Back face
  1,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  // Top face
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  // Bottom face
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  // Right face
  1,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  // Left face
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  1
]);
var CUBE_NON_INDEXED_POSITIONS = new Float32Array([
  1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1
]);
var CUBE_NON_INDEXED_TEX_COORDS = new Float32Array([
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0
]);
var CUBE_NON_INDEXED_COLORS = new Float32Array([
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  0,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  1,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  0,
  1
]);
var ATTRIBUTES = {
  POSITION: { size: 3, value: CUBE_POSITIONS },
  NORMAL: { size: 3, value: CUBE_NORMALS },
  TEXCOORD_0: { size: 2, value: CUBE_TEX_COORDS }
};
var NON_INDEXED_ATTRIBUTES = {
  POSITION: { size: 3, value: CUBE_NON_INDEXED_POSITIONS },
  // NORMAL: {size: 3, value: CUBE_NON_INDEXED_NORMALS},
  TEXCOORD_0: { size: 2, value: CUBE_NON_INDEXED_TEX_COORDS },
  COLOR_0: { size: 3, value: CUBE_NON_INDEXED_COLORS }
};

// node_modules/@luma.gl/engine/dist/geometries/cylinder-geometry.js
var CylinderGeometry = class extends TruncatedConeGeometry {
  constructor(props = {}) {
    const { id = uid2("cylinder-geometry"), radius = 1 } = props;
    super({
      ...props,
      id,
      bottomRadius: radius,
      topRadius: radius
    });
  }
};

// node_modules/@luma.gl/engine/dist/geometries/ico-sphere-geometry.js
var ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];
var ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];
var IcoSphereGeometry = class extends Geometry {
  constructor(props = {}) {
    const { id = uid2("ico-sphere-geometry") } = props;
    const { indices, attributes } = tesselateIcosaHedron(props);
    super({
      ...props,
      id,
      topology: "triangle-list",
      indices,
      attributes: { ...attributes, ...props.attributes }
    });
  }
};
function tesselateIcosaHedron(props) {
  const { iterations = 0 } = props;
  const PI = Math.PI;
  const PI2 = PI * 2;
  const positions = [...ICO_POSITIONS];
  let indices = [...ICO_INDICES];
  positions.push();
  indices.push();
  const getMiddlePoint = /* @__PURE__ */ (() => {
    const pointMemo = {};
    return (i1, i2) => {
      i1 *= 3;
      i2 *= 3;
      const mini = i1 < i2 ? i1 : i2;
      const maxi = i1 > i2 ? i1 : i2;
      const key = `${mini}|${maxi}`;
      if (key in pointMemo) {
        return pointMemo[key];
      }
      const x1 = positions[i1];
      const y1 = positions[i1 + 1];
      const z1 = positions[i1 + 2];
      const x2 = positions[i2];
      const y2 = positions[i2 + 1];
      const z2 = positions[i2 + 2];
      let xm = (x1 + x2) / 2;
      let ym = (y1 + y2) / 2;
      let zm = (z1 + z2) / 2;
      const len = Math.sqrt(xm * xm + ym * ym + zm * zm);
      xm /= len;
      ym /= len;
      zm /= len;
      positions.push(xm, ym, zm);
      return pointMemo[key] = positions.length / 3 - 1;
    };
  })();
  for (let i2 = 0; i2 < iterations; i2++) {
    const indices2 = [];
    for (let j2 = 0; j2 < indices.length; j2 += 3) {
      const a2 = getMiddlePoint(indices[j2 + 0], indices[j2 + 1]);
      const b2 = getMiddlePoint(indices[j2 + 1], indices[j2 + 2]);
      const c2 = getMiddlePoint(indices[j2 + 2], indices[j2 + 0]);
      indices2.push(c2, indices[j2 + 0], a2, a2, indices[j2 + 1], b2, b2, indices[j2 + 2], c2, a2, b2, c2);
    }
    indices = indices2;
  }
  const normals = new Array(positions.length);
  const texCoords = new Array(positions.length / 3 * 2);
  const l2 = indices.length;
  for (let i2 = l2 - 3; i2 >= 0; i2 -= 3) {
    const i1 = indices[i2 + 0];
    const i22 = indices[i2 + 1];
    const i3 = indices[i2 + 2];
    const in1 = i1 * 3;
    const in2 = i22 * 3;
    const in3 = i3 * 3;
    const iu1 = i1 * 2;
    const iu2 = i22 * 2;
    const iu3 = i3 * 2;
    const x1 = positions[in1 + 0];
    const y1 = positions[in1 + 1];
    const z1 = positions[in1 + 2];
    const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));
    const phi1 = Math.atan2(y1, x1) + PI;
    const v1 = theta1 / PI;
    const u1 = 1 - phi1 / PI2;
    const x2 = positions[in2 + 0];
    const y2 = positions[in2 + 1];
    const z2 = positions[in2 + 2];
    const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));
    const phi2 = Math.atan2(y2, x2) + PI;
    const v2 = theta2 / PI;
    const u2 = 1 - phi2 / PI2;
    const x3 = positions[in3 + 0];
    const y3 = positions[in3 + 1];
    const z3 = positions[in3 + 2];
    const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));
    const phi3 = Math.atan2(y3, x3) + PI;
    const v3 = theta3 / PI;
    const u3 = 1 - phi3 / PI2;
    const vec1 = [x3 - x2, y3 - y2, z3 - z2];
    const vec2 = [x1 - x2, y1 - y2, z1 - z2];
    const normal = new Vector3(vec1).cross(vec2).normalize();
    let newIndex;
    if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {
      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);
      newIndex = positions.length / 3 - 1;
      indices.push(newIndex);
      texCoords[newIndex * 2 + 0] = 1;
      texCoords[newIndex * 2 + 1] = v1;
      normals[newIndex * 3 + 0] = normal.x;
      normals[newIndex * 3 + 1] = normal.y;
      normals[newIndex * 3 + 2] = normal.z;
      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);
      newIndex = positions.length / 3 - 1;
      indices.push(newIndex);
      texCoords[newIndex * 2 + 0] = 1;
      texCoords[newIndex * 2 + 1] = v2;
      normals[newIndex * 3 + 0] = normal.x;
      normals[newIndex * 3 + 1] = normal.y;
      normals[newIndex * 3 + 2] = normal.z;
      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);
      newIndex = positions.length / 3 - 1;
      indices.push(newIndex);
      texCoords[newIndex * 2 + 0] = 1;
      texCoords[newIndex * 2 + 1] = v3;
      normals[newIndex * 3 + 0] = normal.x;
      normals[newIndex * 3 + 1] = normal.y;
      normals[newIndex * 3 + 2] = normal.z;
    }
    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;
    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;
    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;
    texCoords[iu1 + 0] = u1;
    texCoords[iu1 + 1] = v1;
    texCoords[iu2 + 0] = u2;
    texCoords[iu2 + 1] = v2;
    texCoords[iu3 + 0] = u3;
    texCoords[iu3 + 1] = v3;
  }
  return {
    indices: { size: 1, value: new Uint16Array(indices) },
    attributes: {
      POSITION: { size: 3, value: new Float32Array(positions) },
      NORMAL: { size: 3, value: new Float32Array(normals) },
      TEXCOORD_0: { size: 2, value: new Float32Array(texCoords) }
    }
  };
}

// node_modules/@luma.gl/engine/dist/geometry/geometry-utils.js
function unpackIndexedGeometry(geometry2) {
  const { indices, attributes } = geometry2;
  if (!indices) {
    return geometry2;
  }
  const vertexCount = indices.value.length;
  const unpackedAttributes = {};
  for (const attributeName in attributes) {
    const attribute = attributes[attributeName];
    const { constant, value, size } = attribute;
    if (constant || !size) {
      continue;
    }
    const unpackedValue = new value.constructor(vertexCount * size);
    for (let x2 = 0; x2 < vertexCount; ++x2) {
      const index = indices.value[x2];
      for (let i2 = 0; i2 < size; i2++) {
        unpackedValue[x2 * size + i2] = value[index * size + i2];
      }
    }
    unpackedAttributes[attributeName] = { size, value: unpackedValue };
  }
  return {
    attributes: Object.assign({}, attributes, unpackedAttributes)
  };
}

// node_modules/@luma.gl/engine/dist/geometries/plane-geometry.js
var PlaneGeometry = class extends Geometry {
  constructor(props = {}) {
    const { id = uid2("plane-geometry") } = props;
    const { indices, attributes } = tesselatePlane(props);
    super({
      ...props,
      id,
      topology: "triangle-list",
      indices,
      attributes: { ...attributes, ...props.attributes }
    });
  }
};
function tesselatePlane(props) {
  const { type = "x,y", offset = 0, flipCull = false, unpack = false } = props;
  const coords = type.split(",");
  let c1len = props[`${coords[0]}len`] || 1;
  const c2len = props[`${coords[1]}len`] || 1;
  const subdivisions1 = props[`n${coords[0]}`] || 1;
  const subdivisions2 = props[`n${coords[1]}`] || 1;
  const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);
  const positions = new Float32Array(numVertices * 3);
  const normals = new Float32Array(numVertices * 3);
  const texCoords = new Float32Array(numVertices * 2);
  if (flipCull) {
    c1len = -c1len;
  }
  let i2 = 0;
  let i3 = 0;
  for (let z2 = 0; z2 <= subdivisions2; z2++) {
    for (let x2 = 0; x2 <= subdivisions1; x2++) {
      const u2 = x2 / subdivisions1;
      const v2 = z2 / subdivisions2;
      texCoords[i2 + 0] = flipCull ? 1 - u2 : u2;
      texCoords[i2 + 1] = v2;
      switch (type) {
        case "x,y":
          positions[i3 + 0] = c1len * u2 - c1len * 0.5;
          positions[i3 + 1] = c2len * v2 - c2len * 0.5;
          positions[i3 + 2] = offset;
          normals[i3 + 0] = 0;
          normals[i3 + 1] = 0;
          normals[i3 + 2] = flipCull ? 1 : -1;
          break;
        case "x,z":
          positions[i3 + 0] = c1len * u2 - c1len * 0.5;
          positions[i3 + 1] = offset;
          positions[i3 + 2] = c2len * v2 - c2len * 0.5;
          normals[i3 + 0] = 0;
          normals[i3 + 1] = flipCull ? 1 : -1;
          normals[i3 + 2] = 0;
          break;
        case "y,z":
          positions[i3 + 0] = offset;
          positions[i3 + 1] = c1len * u2 - c1len * 0.5;
          positions[i3 + 2] = c2len * v2 - c2len * 0.5;
          normals[i3 + 0] = flipCull ? 1 : -1;
          normals[i3 + 1] = 0;
          normals[i3 + 2] = 0;
          break;
        default:
          throw new Error("PlaneGeometry: unknown type");
      }
      i2 += 2;
      i3 += 3;
    }
  }
  const numVertsAcross = subdivisions1 + 1;
  const indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);
  for (let z2 = 0; z2 < subdivisions2; z2++) {
    for (let x2 = 0; x2 < subdivisions1; x2++) {
      const index = (z2 * subdivisions1 + x2) * 6;
      indices[index + 0] = (z2 + 0) * numVertsAcross + x2;
      indices[index + 1] = (z2 + 1) * numVertsAcross + x2;
      indices[index + 2] = (z2 + 0) * numVertsAcross + x2 + 1;
      indices[index + 3] = (z2 + 1) * numVertsAcross + x2;
      indices[index + 4] = (z2 + 1) * numVertsAcross + x2 + 1;
      indices[index + 5] = (z2 + 0) * numVertsAcross + x2 + 1;
    }
  }
  const geometry2 = {
    indices: { size: 1, value: indices },
    attributes: {
      POSITION: { size: 3, value: positions },
      NORMAL: { size: 3, value: normals },
      TEXCOORD_0: { size: 2, value: texCoords }
    }
  };
  return unpack ? unpackIndexedGeometry(geometry2) : geometry2;
}

// node_modules/@luma.gl/engine/dist/geometries/sphere-geometry.js
var SphereGeometry = class extends Geometry {
  constructor(props = {}) {
    const { id = uid2("sphere-geometry") } = props;
    const { indices, attributes } = tesselateSphere(props);
    super({
      ...props,
      id,
      topology: "triangle-list",
      indices,
      attributes: { ...attributes, ...props.attributes }
    });
  }
};
function tesselateSphere(props) {
  const { nlat = 10, nlong = 10 } = props;
  const startLat = 0;
  const endLat = Math.PI;
  const latRange = endLat - startLat;
  const startLong = 0;
  const endLong = 2 * Math.PI;
  const longRange = endLong - startLong;
  const numVertices = (nlat + 1) * (nlong + 1);
  const radius = (n1, n2, n3, u2, v2) => props.radius || 1;
  const positions = new Float32Array(numVertices * 3);
  const normals = new Float32Array(numVertices * 3);
  const texCoords = new Float32Array(numVertices * 2);
  const IndexType = numVertices > 65535 ? Uint32Array : Uint16Array;
  const indices = new IndexType(nlat * nlong * 6);
  for (let y2 = 0; y2 <= nlat; y2++) {
    for (let x2 = 0; x2 <= nlong; x2++) {
      const u2 = x2 / nlong;
      const v2 = y2 / nlat;
      const index = x2 + y2 * (nlong + 1);
      const i2 = index * 2;
      const i3 = index * 3;
      const theta = longRange * u2;
      const phi = latRange * v2;
      const sinTheta = Math.sin(theta);
      const cosTheta = Math.cos(theta);
      const sinPhi = Math.sin(phi);
      const cosPhi = Math.cos(phi);
      const ux = cosTheta * sinPhi;
      const uy = cosPhi;
      const uz = sinTheta * sinPhi;
      const r2 = radius(ux, uy, uz, u2, v2);
      positions[i3 + 0] = r2 * ux;
      positions[i3 + 1] = r2 * uy;
      positions[i3 + 2] = r2 * uz;
      normals[i3 + 0] = ux;
      normals[i3 + 1] = uy;
      normals[i3 + 2] = uz;
      texCoords[i2 + 0] = u2;
      texCoords[i2 + 1] = 1 - v2;
    }
  }
  const numVertsAround = nlong + 1;
  for (let x2 = 0; x2 < nlong; x2++) {
    for (let y2 = 0; y2 < nlat; y2++) {
      const index = (x2 * nlat + y2) * 6;
      indices[index + 0] = y2 * numVertsAround + x2;
      indices[index + 1] = y2 * numVertsAround + x2 + 1;
      indices[index + 2] = (y2 + 1) * numVertsAround + x2;
      indices[index + 3] = (y2 + 1) * numVertsAround + x2;
      indices[index + 4] = y2 * numVertsAround + x2 + 1;
      indices[index + 5] = (y2 + 1) * numVertsAround + x2 + 1;
    }
  }
  return {
    indices: { size: 1, value: indices },
    attributes: {
      POSITION: { size: 3, value: positions },
      NORMAL: { size: 3, value: normals },
      TEXCOORD_0: { size: 2, value: texCoords }
    }
  };
}

// node_modules/@luma.gl/engine/dist/application-utils/random.js
function makeRandomGenerator() {
  let s2 = 1;
  let c2 = 1;
  return () => {
    s2 = Math.sin(c2 * 17.23);
    c2 = Math.cos(s2 * 27.92);
    return fract(Math.abs(s2 * c2) * 1432.71);
  };
}
function fract(n2) {
  return n2 - Math.floor(n2);
}

// node_modules/@luma.gl/engine/dist/compute/swap.js
var Swap = class {
  constructor(props) {
    /** The current resource - usually the source for renders or computations */
    __publicField(this, "current");
    /** The next resource - usually the target/destination for transforms / computations */
    __publicField(this, "next");
    this.current = props.current;
    this.next = props.next;
  }
  /** Destroys the two managed resources */
  destroy() {
    var _a, _b;
    (_a = this.current) == null ? void 0 : _a.destroy();
    (_b = this.next) == null ? void 0 : _b.destroy();
  }
  /** Make the next resource into the current resource, and reuse the current resource as the next resource */
  swap() {
    const current = this.current;
    this.current = this.next;
    this.next = current;
  }
};
var SwapFramebuffers = class extends Swap {
  constructor(device, props) {
    var _a, _b;
    props = { ...props };
    let colorAttachments = (_a = props.colorAttachments) == null ? void 0 : _a.map((colorAttachment) => typeof colorAttachment !== "string" ? colorAttachment : device.createTexture({
      format: colorAttachment,
      usage: Texture.COPY_DST | Texture.RENDER_ATTACHMENT
    }));
    const current = device.createFramebuffer({ ...props, colorAttachments });
    colorAttachments = (_b = props.colorAttachments) == null ? void 0 : _b.map((colorAttachment) => typeof colorAttachment !== "string" ? colorAttachment : device.createTexture({
      format: colorAttachment,
      usage: Texture.COPY_DST | Texture.RENDER_ATTACHMENT
    }));
    const next = device.createFramebuffer({ ...props, colorAttachments });
    super({ current, next });
  }
  /**
   * Resizes the Framebuffers.
   * @returns true if the size changed, otherwise exiting framebuffers were preserved
   * @note any contents are not preserved!
   */
  resize(size) {
    if (size.width === this.current.width && size.height === this.current.height) {
      return false;
    }
    const { current, next } = this;
    this.current = current.clone(size);
    current.destroy();
    this.next = next.clone(size);
    next.destroy();
    return true;
  }
};
var SwapBuffers = class extends Swap {
  constructor(device, props) {
    super({ current: device.createBuffer(props), next: device.createBuffer(props) });
  }
  /**
   * Resizes the Buffers.
   * @returns true if the size changed, otherwise exiting buffers were preserved.
   * @note any contents are not preserved!
   */
  resize(props) {
    if (props.byteLength === this.current.byteLength) {
      return false;
    }
    const { current, next } = this;
    this.current = current.clone(props);
    current.destroy();
    this.next = next.clone(props);
    next.destroy();
    return true;
  }
};

// node_modules/@luma.gl/engine/dist/passes/get-fragment-shader.js
function getFragmentShaderForRenderPass(options) {
  const { shaderPass, action, shadingLanguage } = options;
  switch (action) {
    case "filter":
      const filterFunc = `${shaderPass.name}_filterColor_ext`;
      return shadingLanguage === "wgsl" ? getFilterShaderWGSL(filterFunc) : getFilterShaderGLSL(filterFunc);
    case "sample":
      const samplerFunc = `${shaderPass.name}_sampleColor`;
      return shadingLanguage === "wgsl" ? getSamplerShaderWGSL(samplerFunc) : getSamplerShaderGLSL(samplerFunc);
    default:
      throw new Error(`${shaderPass.name} no fragment shader generated for shader pass`);
  }
}
function getFilterShaderWGSL(func) {
  return (
    /* wgsl */
    `// Binding 0:1 is reserved for shader passes
@group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;
@group(0) @binding(1) var texture: texture_2d<f32>;
@group(0) @binding(2) var sampler: sampler;

struct FragmentInputs = {
  @location(0) fragUV: vec2f,
  @location(1) fragPosition: vec4f,
  @location(2) fragCoordinate: vec4f
};

@fragment
fn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {
  let texSize = textureDimensions(texture, 0);
  var fragColor = textureSample(texture, sampler, fragUV);
  fragColor = ${func}(gl_FragColor, texSize, texCoord);
  return fragColor;
}
`
  );
}
function getSamplerShaderWGSL(func) {
  return (
    /* wgsl */
    `// Binding 0:1 is reserved for shader passes
@group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;
@group(0) @binding(1) var texture: texture_2d<f32>;
@group(0) @binding(2) var sampler: sampler;

struct FragmentInputs = {
  @location(0) fragUV: vec2f,
  @location(1) fragPosition: vec4f,
  @location(2) fragCoordinate: vec4f
};

@fragment
fn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {
  let texSize = textureDimensions(texture, 0);
  var fragColor = textureSample(texture, sampler, fragUV);
  fragColor = ${func}(gl_FragColor, texSize, texCoord);
  return fragColor;
}
`
  );
}
function getFilterShaderGLSL(func) {
  return (
    /* glsl */
    `#version 300 es

uniform sampler2D sourceTexture;

in vec2 position;
in vec2 coordinate;
in vec2 uv;

out vec4 fragColor;

void main() {
  vec2 texCoord = coordinate;
  ivec2 iTexSize = textureSize(sourceTexture, 0);
  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));

  fragColor = texture(sourceTexture, texCoord);
  fragColor = ${func}(fragColor, texSize, texCoord);
}
`
  );
}
function getSamplerShaderGLSL(func) {
  return (
    /* glsl */
    `#version 300 es

uniform sampler2D sourceTexture;

in vec2 position;
in vec2 coordinate;
in vec2 uv;

out vec4 fragColor;

void main() {
  vec2 texCoord = coordinate;
  ivec2 iTexSize = textureSize(sourceTexture, 0);
  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));

  fragColor = ${func}(sourceTexture, texSize, texCoord);
}
`
  );
}

// node_modules/@luma.gl/engine/dist/passes/shader-pass-renderer.js
var ShaderPassRenderer = class {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "shaderInputs");
    __publicField(this, "passRenderers");
    __publicField(this, "swapFramebuffers");
    /** For rendering to the screen */
    __publicField(this, "clipSpace");
    __publicField(this, "textureModel");
    this.device = device;
    props.shaderPasses.map((shaderPass) => initializeShaderModule(shaderPass));
    const modules = props.shaderPasses.reduce((object, shaderPass) => ({ ...object, [shaderPass.name]: shaderPass }), {});
    this.shaderInputs = props.shaderInputs || new ShaderInputs(modules);
    const size = device.getCanvasContext().getPixelSize();
    this.swapFramebuffers = new SwapFramebuffers(device, {
      colorAttachments: ["rgba8unorm"],
      width: size[0],
      height: size[1]
    });
    this.textureModel = new BackgroundTextureModel(device, {
      backgroundTexture: this.swapFramebuffers.current.colorAttachments[0].texture
    });
    this.clipSpace = new ClipSpace(device, {
      source: (
        /* wgsl */
        `  @group(0) @binding(0) var sourceTexture: texture_2d<f32>;
  @group(0) @binding(1) var sourceTextureSampler: sampler;

@fragment
fn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {
	let texCoord: vec2<f32> = inputs.coordinate;
	return textureSample(sourceTexture, sourceTextureSampler, texCoord);
}
`
      ),
      fs: (
        /* glsl */
        `#version 300 es

uniform sampler2D sourceTexture;
in vec2 uv;
in vec2 coordinate;
out vec4 fragColor;

void main() {
  vec2 texCoord = coordinate;
  fragColor = texture(sourceTexture, coordinate);
}
`
      )
    });
    this.passRenderers = props.shaderPasses.map((shaderPass) => new PassRenderer(device, shaderPass));
  }
  /** Destroys resources created by this ShaderPassRenderer */
  destroy() {
    for (const subPassRenderer of this.passRenderers) {
      subPassRenderer.destroy();
    }
    this.swapFramebuffers.destroy();
    this.clipSpace.destroy();
  }
  resize(width, height) {
    this.swapFramebuffers.resize({ width, height });
  }
  renderToScreen(options) {
    const outputTexture = this.renderToTexture(options);
    if (!outputTexture) {
      return false;
    }
    const renderPass = this.device.beginRenderPass({ clearColor: [0, 0, 0, 1], clearDepth: 1 });
    this.clipSpace.setBindings({ sourceTexture: outputTexture });
    this.clipSpace.draw(renderPass);
    renderPass.end();
    return true;
  }
  /** Runs the shaderPasses in sequence on the sourceTexture and returns a texture with the results.
   * @returns null if the the sourceTexture has not yet been loaded
   */
  renderToTexture(options) {
    const { sourceTexture } = options;
    if (!sourceTexture.isReady) {
      return null;
    }
    this.textureModel.destroy();
    this.textureModel = new BackgroundTextureModel(this.device, {
      backgroundTexture: sourceTexture
    });
    const clearTexturePass = this.device.beginRenderPass({
      framebuffer: this.swapFramebuffers.current,
      clearColor: [0, 0, 0, 1]
    });
    this.textureModel.draw(clearTexturePass);
    clearTexturePass.end();
    let first = true;
    for (const passRenderer of this.passRenderers) {
      for (const subPassRenderer of passRenderer.subPassRenderers) {
        if (!first) {
          this.swapFramebuffers.swap();
        }
        first = false;
        const swapBufferTexture = this.swapFramebuffers.current.colorAttachments[0].texture;
        const bindings = {
          sourceTexture: swapBufferTexture
          // texSize: [sourceTextures.width, sourceTextures.height]
        };
        const renderPass = this.device.beginRenderPass({
          framebuffer: this.swapFramebuffers.next,
          clearColor: [0, 0, 0, 1],
          clearDepth: 1
        });
        subPassRenderer.render({ renderPass, bindings });
        renderPass.end();
      }
    }
    this.swapFramebuffers.swap();
    const outputTexture = this.swapFramebuffers.current.colorAttachments[0].texture;
    return outputTexture;
  }
};
var PassRenderer = class {
  constructor(device, shaderPass, props = {}) {
    __publicField(this, "shaderPass");
    __publicField(this, "subPassRenderers");
    this.shaderPass = shaderPass;
    const subPasses = shaderPass.passes || [];
    this.subPassRenderers = subPasses.map((subPass) => {
      return new SubPassRenderer(device, shaderPass, subPass);
    });
  }
  destroy() {
    for (const subPassRenderer of this.subPassRenderers) {
      subPassRenderer.destroy();
    }
  }
};
var SubPassRenderer = class {
  constructor(device, shaderPass, subPass) {
    __publicField(this, "model");
    __publicField(this, "shaderPass");
    __publicField(this, "subPass");
    this.shaderPass = shaderPass;
    this.subPass = subPass;
    const action = subPass.action || subPass.filter && "filter" || subPass.sampler && "sample" || "filter";
    const fs7 = getFragmentShaderForRenderPass({
      shaderPass,
      action,
      shadingLanguage: device.info.shadingLanguage
    });
    this.model = new ClipSpace(device, {
      id: `${shaderPass.name}-subpass`,
      source: fs7,
      fs: fs7,
      modules: [shaderPass],
      parameters: {
        depthWriteEnabled: false,
        depthCompare: "always"
      }
    });
  }
  destroy() {
    this.model.destroy();
  }
  render(options) {
    const { renderPass, bindings } = options;
    this.model.shaderInputs.setProps({
      [this.shaderPass.name]: this.shaderPass.uniforms || {}
    });
    this.model.shaderInputs.setProps({
      [this.shaderPass.name]: this.subPass.uniforms || {}
    });
    this.model.setBindings(bindings || {});
    this.model.draw(renderPass);
  }
};

// node_modules/@luma.gl/engine/dist/compute/computation.js
var LOG_DRAW_PRIORITY2 = 2;
var LOG_DRAW_TIMEOUT2 = 1e4;
var _Computation = class _Computation {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    __publicField(this, "pipelineFactory");
    __publicField(this, "shaderFactory");
    __publicField(this, "userData", {});
    /** Bindings (textures, samplers, uniform buffers) */
    __publicField(this, "bindings", {});
    /** The underlying GPU pipeline. */
    __publicField(this, "pipeline");
    /** Assembled compute shader source */
    __publicField(this, "source");
    /** the underlying compiled compute shader */
    // @ts-ignore Set in function called from constructor
    __publicField(this, "shader");
    /** ShaderInputs instance */
    __publicField(this, "shaderInputs");
    // @ts-ignore Set in function called from constructor
    __publicField(this, "_uniformStore");
    __publicField(this, "_pipelineNeedsUpdate", "newly created");
    __publicField(this, "_getModuleUniforms");
    __publicField(this, "props");
    __publicField(this, "_destroyed", false);
    /** Throttle draw call logging */
    __publicField(this, "_lastLogTime", 0);
    __publicField(this, "_logOpen", false);
    __publicField(this, "_drawCount", 0);
    var _a, _b, _c, _d;
    if (device.type !== "webgpu") {
      throw new Error("Computation is only supported in WebGPU");
    }
    this.props = { ..._Computation.defaultProps, ...props };
    props = this.props;
    this.id = props.id || uid2("model");
    this.device = device;
    Object.assign(this.userData, props.userData);
    const moduleMap = Object.fromEntries(((_a = this.props.modules) == null ? void 0 : _a.map((module) => [module.name, module])) || []);
    this.shaderInputs = props.shaderInputs || new ShaderInputs(moduleMap);
    this.setShaderInputs(this.shaderInputs);
    (_b = this.props).shaderLayout || (_b.shaderLayout = getShaderLayoutFromWGSL(this.props.source));
    const platformInfo = getPlatformInfo2(device);
    const modules = (((_c = this.props.modules) == null ? void 0 : _c.length) > 0 ? this.props.modules : (_d = this.shaderInputs) == null ? void 0 : _d.getModules()) || [];
    this.pipelineFactory = props.pipelineFactory || PipelineFactory.getDefaultPipelineFactory(this.device);
    this.shaderFactory = props.shaderFactory || ShaderFactory.getDefaultShaderFactory(this.device);
    const { source: source3, getUniforms: getUniforms4 } = this.props.shaderAssembler.assembleWGSLShader({
      platformInfo,
      ...this.props,
      modules
    });
    this.source = source3;
    this._getModuleUniforms = getUniforms4;
    this.pipeline = this._updatePipeline();
    if (props.bindings) {
      this.setBindings(props.bindings);
    }
    Object.seal(this);
  }
  destroy() {
    if (this._destroyed)
      return;
    this.pipelineFactory.release(this.pipeline);
    this.shaderFactory.release(this.shader);
    this._uniformStore.destroy();
    this._destroyed = true;
  }
  // Draw call
  predraw() {
    this.updateShaderInputs();
  }
  dispatch(computePass, x2, y2, z2) {
    try {
      this._logDrawCallStart();
      this.pipeline = this._updatePipeline();
      this.pipeline.setBindings(this.bindings);
      computePass.setPipeline(this.pipeline);
      computePass.setBindings([]);
      computePass.dispatch(x2, y2, z2);
    } finally {
      this._logDrawCallEnd();
    }
  }
  // Update fixed fields (can trigger pipeline rebuild)
  // Update dynamic fields
  /**
   * Updates the vertex count (used in draw calls)
   * @note Any attributes with stepMode=vertex need to be at least this big
   */
  setVertexCount(vertexCount) {
  }
  /**
   * Updates the instance count (used in draw calls)
   * @note Any attributes with stepMode=instance need to be at least this big
   */
  setInstanceCount(instanceCount) {
  }
  setShaderInputs(shaderInputs) {
    this.shaderInputs = shaderInputs;
    this._uniformStore = new UniformStore(this.shaderInputs.modules);
    for (const moduleName of Object.keys(this.shaderInputs.modules)) {
      const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
      this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
    }
  }
  /**
   * Updates shader module settings (which results in uniforms being set)
   */
  setShaderModuleProps(props) {
    const uniforms = this._getModuleUniforms(props);
    const keys = Object.keys(uniforms).filter((k2) => {
      const uniform = uniforms[k2];
      return !isNumericArray(uniform) && typeof uniform !== "number" && typeof uniform !== "boolean";
    });
    const bindings = {};
    for (const k2 of keys) {
      bindings[k2] = uniforms[k2];
      delete uniforms[k2];
    }
  }
  updateShaderInputs() {
    this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
  }
  /**
   * Sets bindings (textures, samplers, uniform buffers)
   */
  setBindings(bindings) {
    Object.assign(this.bindings, bindings);
  }
  _setPipelineNeedsUpdate(reason) {
    this._pipelineNeedsUpdate = this._pipelineNeedsUpdate || reason;
  }
  _updatePipeline() {
    if (this._pipelineNeedsUpdate) {
      let prevShader = null;
      if (this.pipeline) {
        log.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
        prevShader = this.shader;
      }
      this._pipelineNeedsUpdate = false;
      this.shader = this.shaderFactory.createShader({
        id: `${this.id}-fragment`,
        stage: "compute",
        source: this.source,
        debugShaders: this.props.debugShaders
      });
      this.pipeline = this.pipelineFactory.createComputePipeline({
        ...this.props,
        shader: this.shader
      });
      if (prevShader) {
        this.shaderFactory.release(prevShader);
      }
    }
    return this.pipeline;
  }
  _logDrawCallStart() {
    const logDrawTimeout = log.level > 3 ? 0 : LOG_DRAW_TIMEOUT2;
    if (log.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
      return;
    }
    this._lastLogTime = Date.now();
    this._logOpen = true;
    log.group(LOG_DRAW_PRIORITY2, `>>> DRAWING MODEL ${this.id}`, { collapsed: log.level <= 2 })();
  }
  _logDrawCallEnd() {
    if (this._logOpen) {
      const uniformTable = this.shaderInputs.getDebugTable();
      log.table(LOG_DRAW_PRIORITY2, uniformTable)();
      log.groupEnd(LOG_DRAW_PRIORITY2)();
      this._logOpen = false;
    }
  }
  // TODO - fix typing of luma data types
  _getBufferOrConstantValues(attribute, dataType) {
    const TypedArrayConstructor = getTypedArrayFromDataType(dataType);
    const typedArray = attribute instanceof Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
    return typedArray.toString();
  }
};
__publicField(_Computation, "defaultProps", {
  ...ComputePipeline.defaultProps,
  id: "unnamed",
  handle: void 0,
  userData: {},
  source: "",
  modules: [],
  defines: {},
  bindings: void 0,
  shaderInputs: void 0,
  pipelineFactory: void 0,
  shaderFactory: void 0,
  shaderAssembler: ShaderAssembler.getDefaultShaderAssembler(),
  debugShaders: void 0
});
var Computation = _Computation;
function getPlatformInfo2(device) {
  return {
    type: device.type,
    shaderLanguage: device.info.shadingLanguage,
    shaderLanguageVersion: device.info.shadingLanguageVersion,
    gpu: device.info.gpu,
    // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
    features: device.features
  };
}

// node_modules/@luma.gl/engine/dist/modules/picking/picking-uniforms.js
var DEFAULT_HIGHLIGHT_COLOR2 = [0, 1, 1, 1];
var INVALID_INDEX = -1;
var uniformTypes = {
  isActive: "i32",
  indexMode: "i32",
  batchIndex: "i32",
  isHighlightActive: "i32",
  highlightedBatchIndex: "i32",
  highlightedObjectIndex: "i32",
  highlightColor: "vec4<f32>"
};
var GLSL_UNIFORMS = (
  /* glsl */
  `precision highp float;
precision highp int;

uniform pickingUniforms {
  int isActive;
  int indexMode;
  int batchIndex;

  int isHighlightActive;
  int highlightedBatchIndex;
  int highlightedObjectIndex;
  vec4 highlightColor;
} picking;
`
);
var WGSL_UNIFORMS = (
  /* wgsl */
  `struct pickingUniforms {
  isActive: int32;
  indexMode: int32;
  batchIndex: int32;

  isHighlightActive: int32;
  highlightedBatchIndex: int32;
  highlightedObjectIndex: int32;
  highlightColor: vec4<f32>;
} picking;
`
);
function getUniforms3(props = {}, prevUniforms) {
  const uniforms = { ...prevUniforms };
  if (props.isActive !== void 0) {
    uniforms.isActive = Boolean(props.isActive);
  }
  switch (props.indexMode) {
    case "instance":
      uniforms.indexMode = 0;
      break;
    case "custom":
      uniforms.indexMode = 1;
      break;
    case void 0:
      break;
  }
  switch (props.highlightedObjectIndex) {
    case void 0:
      break;
    case null:
      uniforms.isHighlightActive = false;
      uniforms.highlightedObjectIndex = INVALID_INDEX;
      break;
    default:
      uniforms.isHighlightActive = true;
      uniforms.highlightedObjectIndex = props.highlightedObjectIndex;
  }
  if (typeof props.highlightedBatchIndex === "number") {
    uniforms.highlightedBatchIndex = props.highlightedBatchIndex;
  }
  if (props.highlightColor) {
    uniforms.highlightColor = props.highlightColor;
  }
  return uniforms;
}
var pickingUniforms = {
  props: {},
  uniforms: {},
  name: "picking",
  uniformTypes,
  defaultUniforms: {
    isActive: false,
    indexMode: 0,
    batchIndex: 0,
    isHighlightActive: true,
    highlightedBatchIndex: INVALID_INDEX,
    highlightedObjectIndex: INVALID_INDEX,
    highlightColor: DEFAULT_HIGHLIGHT_COLOR2
  },
  getUniforms: getUniforms3
};

// node_modules/@luma.gl/engine/dist/modules/picking/picking-manager.js
var _PickingManager = class _PickingManager {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "props");
    /** Info from latest pick operation */
    __publicField(this, "pickInfo", { batchIndex: null, objectIndex: null });
    /** Framebuffer used for picking */
    __publicField(this, "framebuffer", null);
    this.device = device;
    this.props = { ..._PickingManager.defaultProps, ...props };
  }
  destroy() {
    var _a;
    (_a = this.framebuffer) == null ? void 0 : _a.destroy();
  }
  // TODO - Ask for a cached framebuffer? a Framebuffer factory?
  getFramebuffer() {
    if (!this.framebuffer) {
      this.framebuffer = this.device.createFramebuffer({
        colorAttachments: ["rgba8unorm", "rg32sint"],
        depthStencilAttachment: "depth24plus"
      });
    }
    return this.framebuffer;
  }
  /** Clear highlighted / picked object */
  clearPickState() {
    this.props.shaderInputs.setProps({ picking: { highlightedObjectIndex: null } });
  }
  /** Prepare for rendering picking colors */
  beginRenderPass() {
    var _a;
    const framebuffer = this.getFramebuffer();
    framebuffer.resize(this.device.getDefaultCanvasContext().getPixelSize());
    (_a = this.props.shaderInputs) == null ? void 0 : _a.setProps({ picking: { isActive: true } });
    const pickingPass = this.device.beginRenderPass({
      framebuffer,
      clearColors: [new Float32Array([0, 0, 0, 0]), new Int32Array([-1, -1, 0, 0])],
      clearDepth: 1
    });
    return pickingPass;
  }
  getPickInfo(mousePosition) {
    var _a;
    const framebuffer = this.getFramebuffer();
    const [pickX, pickY] = this.getPickPosition(mousePosition);
    const pixelData = this.device.readPixelsToArrayWebGL(framebuffer, {
      sourceX: pickX,
      sourceY: pickY,
      sourceWidth: 1,
      sourceHeight: 1,
      sourceAttachment: 1
    });
    if (!pixelData) {
      return null;
    }
    const pickInfo = {
      objectIndex: pixelData[0] === INVALID_INDEX ? null : pixelData[0],
      batchIndex: pixelData[1] === INVALID_INDEX ? null : pixelData[1]
    };
    if (pickInfo.objectIndex !== this.pickInfo.objectIndex || pickInfo.batchIndex !== this.pickInfo.batchIndex) {
      this.pickInfo = pickInfo;
      this.props.onObjectPicked(pickInfo);
    }
    (_a = this.props.shaderInputs) == null ? void 0 : _a.setProps({
      picking: {
        isActive: false,
        highlightedBatchIndex: pickInfo.batchIndex,
        highlightedObjectIndex: pickInfo.objectIndex
      }
    });
    return this.pickInfo;
  }
  /**
   * Get pick position in device pixel range
   * use the center pixel location in device pixel range
   */
  getPickPosition(mousePosition) {
    const devicePixels = this.device.getDefaultCanvasContext().cssToDevicePixels(mousePosition);
    const pickX = devicePixels.x + Math.floor(devicePixels.width / 2);
    const pickY = devicePixels.y + Math.floor(devicePixels.height / 2);
    return [pickX, pickY];
  }
};
__publicField(_PickingManager, "defaultProps", {
  shaderInputs: void 0,
  onObjectPicked: () => {
  }
});
var PickingManager = _PickingManager;

// node_modules/@luma.gl/engine/dist/modules/picking/index-picking.js
var source = (
  /* wgsl */
  `${WGSL_UNIFORMS}

const INDEX_PICKING_MODE_INSTANCE = 0;
const INDEX_PICKING_MODE_CUSTOM = 1;
const INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

struct indexPickingFragmentInputs = {
  objectIndex: int32;
};

let indexPickingFragmentInputs: indexPickingFragmentInputs;

/**
 * Vertex shaders should call this function to set the object index.
 * If using instance or vertex mode, argument will be ignored, 0 can be supplied.
 */
fn picking_setObjectIndex(objectIndex: int32) {
  switch (picking.indexMode) {
    case INDEX_PICKING_MODE_INSTANCE, default: {
      picking_objectIndex = instance_index;
    };
    case INDEX_PICKING_MODE_CUSTOM: {
      picking_objectIndex = objectIndex;
    };
  }
}

`
);
var vs5 = (
  /* glsl */
  `${GLSL_UNIFORMS}

const int INDEX_PICKING_MODE_INSTANCE = 0;
const int INDEX_PICKING_MODE_CUSTOM = 1;

const int INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

flat out int picking_objectIndex;

/**
 * Vertex shaders should call this function to set the object index.
 * If using instance or vertex mode, argument will be ignored, 0 can be supplied.
 */
void picking_setObjectIndex(int objectIndex) {
  switch (picking.indexMode) {
    case INDEX_PICKING_MODE_INSTANCE:
      picking_objectIndex = gl_InstanceID;
      break;
    case INDEX_PICKING_MODE_CUSTOM:
      picking_objectIndex = objectIndex;
      break;
  }
}
`
);
var fs5 = (
  /* glsl */
  `${GLSL_UNIFORMS}

const int INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

flat in int picking_objectIndex;

/**
 * Check if this vertex is highlighted (part of the selected batch and object)
 */ 
bool picking_isFragmentHighlighted() {
  return 
    bool(picking.isHighlightActive) &&
    picking.highlightedBatchIndex == picking.batchIndex &&
    picking.highlightedObjectIndex == picking_objectIndex
    ;
}

/**
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (bool(picking.isActive)) {
    return color;
  }

  // If we are not highlighted, return color as is
  if (!picking_isFragmentHighlighted()) {
    return color;
  }
   
  // Blend in highlight color based on its alpha value
  float highLightAlpha = picking.highlightColor.a;
  float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
  float highLightRatio = highLightAlpha / blendedAlpha;

  vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
  return vec4(blendedRGB, blendedAlpha);
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
ivec4 picking_getPickingColor() {
  // Assumes that colorAttachment0 is rg32int
  // TODO? - we could render indices into a second color attachment and not mess with fragColor
  return ivec4(picking_objectIndex, picking.batchIndex, 0u, 0u);  
}

vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_objectIndex == INDEX_PICKING_INVALID_INDEX) {
      discard;
    }
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 outColor = color;
  outColor = picking_filterHighlightColor(outColor);
  outColor = picking_filterPickingColor(outColor);
  return outColor;
}
`
);
var picking2 = {
  ...pickingUniforms,
  name: "picking",
  source,
  vs: vs5,
  fs: fs5
};

// node_modules/@luma.gl/engine/dist/modules/picking/color-picking.js
var source2 = (
  /* wgsl */
  `${WGSL_UNIFORMS}
`
);
var vs6 = (
  /* glsl */
  `${GLSL_UNIFORMS}
out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    if (!bool(picking.isAttribute)) {
      // Stores the picking color so that the fragment shader can render it during picking
      picking_vRGBcolor_Avalid.rgb = pickingColor;
    }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setObjectIndex(uint objectIndex) {
  if (bool(picking.isActive)) {
    uint index = objectIndex;
    if (picking.indexMode == PICKING_INDEX_MODE_INSTANCE) {
      index = uint(gl_InstanceID);
    }
    picking_vRGBcolor_Avalid.r = float(index % 255) / 255.0;
    picking_vRGBcolor_Avalid.g = float((index / 255) % 255) / 255.0;
    picking_vRGBcolor_Avalid.b = float((index / 255 / 255) %255) / 255.0;
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`
);
var fs6 = (
  /* glsl */
  `${GLSL_UNIFORMS}

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`
);
var picking3 = {
  ...pickingUniforms,
  name: "picking",
  source: source2,
  vs: vs6,
  fs: fs6
};

// node_modules/@luma.gl/engine/dist/modules/picking/legacy-picking-manager.js
var LegacyPickingManager = class {
  constructor(device, shaderInputs) {
    __publicField(this, "device");
    __publicField(this, "framebuffer", null);
    __publicField(this, "shaderInputs");
    this.device = device;
    this.shaderInputs = shaderInputs;
  }
  destroy() {
    var _a;
    (_a = this.framebuffer) == null ? void 0 : _a.destroy();
  }
  getFramebuffer() {
    if (!this.framebuffer) {
      this.framebuffer = this.device.createFramebuffer({
        colorAttachments: ["rgba8unorm"],
        depthStencilAttachment: "depth24plus"
      });
    }
    return this.framebuffer;
  }
  /** Clear highlighted / picked object */
  clearPickState() {
    this.shaderInputs.setProps({ picking: { highlightedObjectColor: null } });
  }
  /** Prepare for rendering picking colors */
  beginRenderPass() {
    const framebuffer = this.getFramebuffer();
    framebuffer.resize(this.device.getCanvasContext().getPixelSize());
    this.shaderInputs.setProps({ picking: { isActive: true } });
    const pickingPass = this.device.beginRenderPass({
      framebuffer,
      clearColor: [0, 0, 0, 0],
      clearDepth: 1
    });
    return pickingPass;
  }
  updatePickState(mousePosition) {
    const framebuffer = this.getFramebuffer();
    const [pickX, pickY] = this.getPickPosition(mousePosition);
    const color255 = this.device.readPixelsToArrayWebGL(framebuffer, {
      sourceX: pickX,
      sourceY: pickY,
      sourceWidth: 1,
      sourceHeight: 1
    });
    let highlightedObjectColor = [...color255].map((x2) => x2 / 255);
    const isHighlightActive = highlightedObjectColor[0] + highlightedObjectColor[1] + highlightedObjectColor[2] > 0;
    if (!isHighlightActive) {
      highlightedObjectColor = null;
    }
    this.shaderInputs.setProps({
      picking: { isActive: false, highlightedObjectColor }
    });
  }
  /**
   * Get pick position in device pixel range
   * use the center pixel location in device pixel range
   */
  getPickPosition(mousePosition) {
    const devicePixels = this.device.getCanvasContext().cssToDevicePixels(mousePosition);
    const pickX = devicePixels.x + Math.floor(devicePixels.width / 2);
    const pickY = devicePixels.y + Math.floor(devicePixels.height / 2);
    return [pickX, pickY];
  }
};

export {
  ShaderAssembler,
  log,
  Buffer,
  decodeTextureFormat,
  DeviceLimits,
  DeviceFeatures,
  Device,
  luma,
  Adapter,
  CanvasContext,
  Texture,
  TextureView,
  Shader,
  Sampler,
  Framebuffer,
  RenderPipeline,
  RenderPass,
  CommandEncoder,
  CommandBuffer,
  VertexArray,
  TransformFeedback,
  QuerySet,
  getScratchArray,
  getDataTypeFromTypedArray,
  getTypedArrayFromDataType,
  fp32,
  fp64arithmetic,
  picking,
  gouraudMaterial,
  phongMaterial,
  pbrMaterial,
  Timeline,
  KeyFrames,
  AnimationLoopTemplate,
  requestAnimationFramePolyfill,
  cancelAnimationFramePolyfill,
  AnimationLoop,
  makeAnimationLoop,
  GPUGeometry,
  PipelineFactory,
  ShaderFactory,
  isNumericArray,
  ShaderInputs,
  setPathPrefix,
  loadImageBitmap,
  loadImage,
  AsyncTexture,
  Model,
  BufferTransform,
  TextureTransform,
  Geometry,
  ClipSpace,
  BackgroundTextureModel,
  ScenegraphNode,
  GroupNode,
  ModelNode,
  TruncatedConeGeometry,
  ConeGeometry,
  CubeGeometry,
  CylinderGeometry,
  IcoSphereGeometry,
  PlaneGeometry,
  SphereGeometry,
  makeRandomGenerator,
  Swap,
  SwapFramebuffers,
  SwapBuffers,
  ShaderPassRenderer,
  Computation,
  PickingManager,
  picking2,
  picking3,
  LegacyPickingManager
};
//# sourceMappingURL=chunk-PLW6BUME.js.map
