import type { Mesh } from '@loaders.gl/schema';
import type { OBJLoaderOptions } from "./obj-loader.js";
import { OBJLoader as OBJWorkerLoader } from "./obj-loader.js";
import type { MTLMaterial } from "./lib/parse-mtl.js";
import type { MTLLoaderOptions } from "./mtl-loader.js";
export type { OBJLoaderOptions } from "./obj-loader.js";
export { OBJWorkerLoader };
/**
 * Loader for the OBJ geometry format
 */
export declare const OBJLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer, options?: OBJLoaderOptions) => Promise<Mesh>;
    readonly parseTextSync: (text: string, options?: OBJLoaderOptions) => Mesh;
    readonly dataType: Mesh;
    readonly batchType: never;
    readonly name: "OBJ";
    readonly id: "obj";
    readonly module: "obj";
    readonly version: any;
    readonly worker: true;
    readonly extensions: ["obj"];
    readonly mimeTypes: ["text/plain"];
    readonly testText: (text: string) => boolean;
    readonly options: {
        readonly obj: {};
    };
};
/**
 * Loader for the MTL material format
 */
export declare const MTLLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer, options?: MTLLoaderOptions) => Promise<MTLMaterial[]>;
    readonly parseTextSync: (text: string, options?: MTLLoaderOptions) => MTLMaterial[];
    readonly dataType: MTLMaterial[];
    readonly batchType: never;
    readonly name: "MTL";
    readonly id: "mtl";
    readonly module: "mtl";
    readonly version: any;
    readonly worker: true;
    readonly extensions: ["mtl"];
    readonly mimeTypes: ["text/plain"];
    readonly testText: (text: string) => boolean;
    readonly options: {
        readonly mtl: {};
    };
};
//# sourceMappingURL=index.d.ts.map