(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
        else if (typeof exports === 'object') exports['deck'] = factory();
  else root['deck'] = factory();})(globalThis, function () {
"use strict";var __exports__=(()=>{var zn=Object.create;var te=Object.defineProperty;var On=Object.getOwnPropertyDescriptor;var Fn=Object.getOwnPropertyNames;var Dn=Object.getPrototypeOf,kn=Object.prototype.hasOwnProperty;var ht=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports),Nn=(o,t)=>{for(var e in t)te(o,e,{get:t[e],enumerable:!0})},Qt=(o,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Fn(t))!kn.call(o,n)&&n!==e&&te(o,n,{get:()=>t[n],enumerable:!(i=On(t,n))||i.enumerable});return o},U=(o,t,e)=>(Qt(o,t,"default"),e&&Qt(e,t,"default")),P=(o,t,e)=>(e=o!=null?zn(Dn(o)):{},Qt(t||!o||!o.__esModule?te(e,"default",{value:o,enumerable:!0}):e,o)),Un=o=>Qt(te({},"__esModule",{value:!0}),o);var L=ht((Os,qe)=>{qe.exports=globalThis.deck});var I=ht((Ds,to)=>{to.exports=globalThis.luma});var wo=ht((hl,So)=>{So.exports=globalThis.loaders});var Uo=ht((El,No)=>{No.exports=globalThis.luma});var Ei=ht((du,Ke)=>{"use strict";Ke.exports=ye;Ke.exports.default=ye;function ye(o,t,e){e=e||2;var i=t&&t.length,n=i?t[0]*e:o.length,r=Ti(o,0,n,e,!0),s=[];if(!r||r.next===r.prev)return s;var a,l,c,u,f,d,g;if(i&&(r=Yr(o,t,r,e)),o.length>80*e){a=c=o[0],l=u=o[1];for(var p=e;p<n;p+=e)f=o[p],d=o[p+1],f<a&&(a=f),d<l&&(l=d),f>c&&(c=f),d>u&&(u=d);g=Math.max(c-a,u-l),g=g!==0?32767/g:0}return Ft(r,s,e,a,l,g,0),s}function Ti(o,t,e,i,n){var r,s;if(n===Ze(o,t,e,i)>0)for(r=t;r<e;r+=i)s=bi(r,o[r],o[r+1],s);else for(r=e-i;r>=t;r-=i)s=bi(r,o[r],o[r+1],s);return s&&Pe(s,s.next)&&(kt(s),s=s.next),s}function q(o,t){if(!o)return o;t||(t=o);var e=o,i;do if(i=!1,!e.steiner&&(Pe(e,e.next)||w(e.prev,e,e.next)===0)){if(kt(e),e=t=e.prev,e===e.next)break;i=!0}else e=e.next;while(i||e!==t);return t}function Ft(o,t,e,i,n,r,s){if(o){!s&&r&&es(o,i,n,r);for(var a=o,l,c;o.prev!==o.next;){if(l=o.prev,c=o.next,r?Kr(o,i,n,r):Zr(o)){t.push(l.i/e|0),t.push(o.i/e|0),t.push(c.i/e|0),kt(o),o=c.next,a=c.next;continue}if(o=c,o===a){s?s===1?(o=Xr(q(o),t,e),Ft(o,t,e,i,n,r,2)):s===2&&$r(o,t,e,i,n,r):Ft(q(o),t,e,i,n,r,1);break}}}}function Zr(o){var t=o.prev,e=o,i=o.next;if(w(t,e,i)>=0)return!1;for(var n=t.x,r=e.x,s=i.x,a=t.y,l=e.y,c=i.y,u=n<r?n<s?n:s:r<s?r:s,f=a<l?a<c?a:c:l<c?l:c,d=n>r?n>s?n:s:r>s?r:s,g=a>l?a>c?a:c:l>c?l:c,p=i.next;p!==t;){if(p.x>=u&&p.x<=d&&p.y>=f&&p.y<=g&&st(n,a,r,l,s,c,p.x,p.y)&&w(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function Kr(o,t,e,i){var n=o.prev,r=o,s=o.next;if(w(n,r,s)>=0)return!1;for(var a=n.x,l=r.x,c=s.x,u=n.y,f=r.y,d=s.y,g=a<l?a<c?a:c:l<c?l:c,p=u<f?u<d?u:d:f<d?f:d,h=a>l?a>c?a:c:l>c?l:c,m=u>f?u>d?u:d:f>d?f:d,v=Ve(g,p,t,e,i),_=Ve(h,m,t,e,i),x=o.prevZ,y=o.nextZ;x&&x.z>=v&&y&&y.z<=_;){if(x.x>=g&&x.x<=h&&x.y>=p&&x.y<=m&&x!==n&&x!==s&&st(a,u,l,f,c,d,x.x,x.y)&&w(x.prev,x,x.next)>=0||(x=x.prevZ,y.x>=g&&y.x<=h&&y.y>=p&&y.y<=m&&y!==n&&y!==s&&st(a,u,l,f,c,d,y.x,y.y)&&w(y.prev,y,y.next)>=0))return!1;y=y.nextZ}for(;x&&x.z>=v;){if(x.x>=g&&x.x<=h&&x.y>=p&&x.y<=m&&x!==n&&x!==s&&st(a,u,l,f,c,d,x.x,x.y)&&w(x.prev,x,x.next)>=0)return!1;x=x.prevZ}for(;y&&y.z<=_;){if(y.x>=g&&y.x<=h&&y.y>=p&&y.y<=m&&y!==n&&y!==s&&st(a,u,l,f,c,d,y.x,y.y)&&w(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function Xr(o,t,e){var i=o;do{var n=i.prev,r=i.next.next;!Pe(n,r)&&Ii(n,i,i.next,r)&&Dt(n,r)&&Dt(r,n)&&(t.push(n.i/e|0),t.push(i.i/e|0),t.push(r.i/e|0),kt(i),kt(i.next),i=o=r),i=i.next}while(i!==o);return q(i)}function $r(o,t,e,i,n,r){var s=o;do{for(var a=s.next.next;a!==s.prev;){if(s.i!==a.i&&ns(s,a)){var l=Ai(s,a);s=q(s,s.next),l=q(l,l.next),Ft(s,t,e,i,n,r,0),Ft(l,t,e,i,n,r,0);return}a=a.next}s=s.next}while(s!==o)}function Yr(o,t,e,i){var n=[],r,s,a,l,c;for(r=0,s=t.length;r<s;r++)a=t[r]*i,l=r<s-1?t[r+1]*i:o.length,c=Ti(o,a,l,i,!1),c===c.next&&(c.steiner=!0),n.push(is(c));for(n.sort(Jr),r=0;r<n.length;r++)e=qr(n[r],e);return e}function Jr(o,t){return o.x-t.x}function qr(o,t){var e=Qr(o,t);if(!e)return t;var i=Ai(e,o);return q(i,i.next),q(e,e.next)}function Qr(o,t){var e=t,i=o.x,n=o.y,r=-1/0,s;do{if(n<=e.y&&n>=e.next.y&&e.next.y!==e.y){var a=e.x+(n-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(a<=i&&a>r&&(r=a,s=e.x<e.next.x?e:e.next,a===i))return s}e=e.next}while(e!==t);if(!s)return null;var l=s,c=s.x,u=s.y,f=1/0,d;e=s;do i>=e.x&&e.x>=c&&i!==e.x&&st(n<u?i:r,n,c,u,n<u?r:i,n,e.x,e.y)&&(d=Math.abs(n-e.y)/(i-e.x),Dt(e,o)&&(d<f||d===f&&(e.x>s.x||e.x===s.x&&ts(s,e)))&&(s=e,f=d)),e=e.next;while(e!==l);return s}function ts(o,t){return w(o.prev,o,t.prev)<0&&w(t.next,o,o.next)<0}function es(o,t,e,i){var n=o;do n.z===0&&(n.z=Ve(n.x,n.y,t,e,i)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next;while(n!==o);n.prevZ.nextZ=null,n.prevZ=null,os(n)}function os(o){var t,e,i,n,r,s,a,l,c=1;do{for(e=o,o=null,r=null,s=0;e;){for(s++,i=e,a=0,t=0;t<c&&(a++,i=i.nextZ,!!i);t++);for(l=c;a>0||l>0&&i;)a!==0&&(l===0||!i||e.z<=i.z)?(n=e,e=e.nextZ,a--):(n=i,i=i.nextZ,l--),r?r.nextZ=n:o=n,n.prevZ=r,r=n;e=i}r.nextZ=null,c*=2}while(s>1);return o}function Ve(o,t,e,i,n){return o=(o-e)*n|0,t=(t-i)*n|0,o=(o|o<<8)&16711935,o=(o|o<<4)&252645135,o=(o|o<<2)&858993459,o=(o|o<<1)&1431655765,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,o|t<<1}function is(o){var t=o,e=o;do(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next;while(t!==o);return e}function st(o,t,e,i,n,r,s,a){return(n-s)*(t-a)>=(o-s)*(r-a)&&(o-s)*(i-a)>=(e-s)*(t-a)&&(e-s)*(r-a)>=(n-s)*(i-a)}function ns(o,t){return o.next.i!==t.i&&o.prev.i!==t.i&&!rs(o,t)&&(Dt(o,t)&&Dt(t,o)&&ss(o,t)&&(w(o.prev,o,t.prev)||w(o,t.prev,t))||Pe(o,t)&&w(o.prev,o,o.next)>0&&w(t.prev,t,t.next)>0)}function w(o,t,e){return(t.y-o.y)*(e.x-t.x)-(t.x-o.x)*(e.y-t.y)}function Pe(o,t){return o.x===t.x&&o.y===t.y}function Ii(o,t,e,i){var n=ve(w(o,t,e)),r=ve(w(o,t,i)),s=ve(w(e,i,o)),a=ve(w(e,i,t));return!!(n!==r&&s!==a||n===0&&xe(o,e,t)||r===0&&xe(o,i,t)||s===0&&xe(e,o,i)||a===0&&xe(e,t,i))}function xe(o,t,e){return t.x<=Math.max(o.x,e.x)&&t.x>=Math.min(o.x,e.x)&&t.y<=Math.max(o.y,e.y)&&t.y>=Math.min(o.y,e.y)}function ve(o){return o>0?1:o<0?-1:0}function rs(o,t){var e=o;do{if(e.i!==o.i&&e.next.i!==o.i&&e.i!==t.i&&e.next.i!==t.i&&Ii(e,e.next,o,t))return!0;e=e.next}while(e!==o);return!1}function Dt(o,t){return w(o.prev,o,o.next)<0?w(o,t,o.next)>=0&&w(o,o.prev,t)>=0:w(o,t,o.prev)<0||w(o,o.next,t)<0}function ss(o,t){var e=o,i=!1,n=(o.x+t.x)/2,r=(o.y+t.y)/2;do e.y>r!=e.next.y>r&&e.next.y!==e.y&&n<(e.next.x-e.x)*(r-e.y)/(e.next.y-e.y)+e.x&&(i=!i),e=e.next;while(e!==o);return i}function Ai(o,t){var e=new He(o.i,o.x,o.y),i=new He(t.i,t.x,t.y),n=o.next,r=t.prev;return o.next=t,t.prev=o,e.next=n,n.prev=e,i.next=e,e.prev=i,r.next=i,i.prev=r,i}function bi(o,t,e,i){var n=new He(o,t,e);return i?(n.next=i.next,n.prev=i,i.next.prev=n,i.next=n):(n.prev=n,n.next=n),n}function kt(o){o.next.prev=o.prev,o.prev.next=o.next,o.prevZ&&(o.prevZ.nextZ=o.nextZ),o.nextZ&&(o.nextZ.prevZ=o.prevZ)}function He(o,t,e){this.i=o,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}ye.deviation=function(o,t,e,i){var n=t&&t.length,r=n?t[0]*e:o.length,s=Math.abs(Ze(o,0,r,e));if(n)for(var a=0,l=t.length;a<l;a++){var c=t[a]*e,u=a<l-1?t[a+1]*e:o.length;s-=Math.abs(Ze(o,c,u,e))}var f=0;for(a=0;a<i.length;a+=3){var d=i[a]*e,g=i[a+1]*e,p=i[a+2]*e;f+=Math.abs((o[d]-o[p])*(o[g+1]-o[d+1])-(o[d]-o[g])*(o[p+1]-o[d+1]))}return s===0&&f===0?0:Math.abs((f-s)/s)};function Ze(o,t,e,i){for(var n=0,r=t,s=e-i;r<e;r+=i)n+=(o[s]-o[r])*(o[r+1]+o[s+1]),s=r;return n}ye.flatten=function(o){for(var t=o[0][0].length,e={vertices:[],holes:[],dimensions:t},i=0,n=0;n<o.length;n++){for(var r=0;r<o[n].length;r++)for(var s=0;s<t;s++)e.vertices.push(o[n][r][s]);n>0&&(i+=o[n-1].length,e.holes.push(i))}return e}});var Yt={};Nn(Yt,{ArcLayer:()=>so,BitmapLayer:()=>yo,ColumnLayer:()=>me,GeoJsonLayer:()=>En,GridCellLayer:()=>mi,IconLayer:()=>it,LineLayer:()=>ko,PathLayer:()=>rt,PointCloudLayer:()=>$o,PolygonLayer:()=>Ki,ScatterplotLayer:()=>fe,SolidPolygonLayer:()=>lt,TextLayer:()=>Ae,_MultiIconLayer:()=>be,_TextBackgroundLayer:()=>Ie});var R={},Qe=P(L(),1);U(R,P(L(),1));if(!Qe.Layer)throw new Error("@deck.gl/core is not found");U(Yt,R);var G=P(L(),1),ro=P(I(),1);var eo=`uniform arcUniforms {
  bool greatCircle;
  bool useShortestPath;
  float numSegments;
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  highp int widthUnits;
} arc;
`,oo={name:"arc",vs:eo,fs:eo,uniformTypes:{greatCircle:"f32",useShortestPath:"f32",numSegments:"f32",widthScale:"f32",widthMinPixels:"f32",widthMaxPixels:"f32",widthUnits:"i32"}};var io=`#version 300 es
#define SHADER_NAME arc-layer-vertex-shader
in vec4 instanceSourceColors;
in vec4 instanceTargetColors;
in vec3 instanceSourcePositions;
in vec3 instanceSourcePositions64Low;
in vec3 instanceTargetPositions;
in vec3 instanceTargetPositions64Low;
in vec3 instancePickingColors;
in float instanceWidths;
in float instanceHeights;
in float instanceTilts;
out vec4 vColor;
out vec2 uv;
out float isValid;
float paraboloid(float distance, float sourceZ, float targetZ, float ratio) {
float deltaZ = targetZ - sourceZ;
float dh = distance * instanceHeights;
if (dh == 0.0) {
return sourceZ + deltaZ * ratio;
}
float unitZ = deltaZ / dh;
float p2 = unitZ * unitZ + 1.0;
float dir = step(deltaZ, 0.0);
float z0 = mix(sourceZ, targetZ, dir);
float r = mix(ratio, 1.0 - ratio, dir);
return sqrt(r * (p2 - r)) * dh + z0;
}
vec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {
vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);
dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);
return dir_screenspace * offset_direction * width / 2.0;
}
float getSegmentRatio(float index) {
return smoothstep(0.0, 1.0, index / (arc.numSegments - 1.0));
}
vec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {
float distance = length(source.xy - target.xy);
float z = paraboloid(distance, source.z, target.z, segmentRatio);
float tiltAngle = radians(instanceTilts);
vec2 tiltDirection = normalize(target.xy - source.xy);
vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);
return vec3(
mix(source.xy, target.xy, segmentRatio) + tilt,
z * cos(tiltAngle)
);
}
float getAngularDist (vec2 source, vec2 target) {
vec2 sourceRadians = radians(source);
vec2 targetRadians = radians(target);
vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);
vec2 shd_sq = sin_half_delta * sin_half_delta;
float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;
return 2.0 * asin(sqrt(a));
}
vec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {
vec2 lngLat;
if(abs(angularDist - PI) < 0.001) {
lngLat = (1.0 - t) * source.xy + t * target.xy;
} else {
float a = sin((1.0 - t) * angularDist);
float b = sin(t * angularDist);
vec3 p = source3D.yxz * a + target3D.yxz * b;
lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));
}
float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);
return vec3(lngLat, z);
}
void main(void) {
geometry.worldPosition = instanceSourcePositions;
geometry.worldPositionAlt = instanceTargetPositions;
float segmentIndex = float(gl_VertexID / 2);
float segmentSide = mod(float(gl_VertexID), 2.) == 0. ? -1. : 1.;
float segmentRatio = getSegmentRatio(segmentIndex);
float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));
float nextSegmentRatio = getSegmentRatio(min(arc.numSegments - 1.0, segmentIndex + 1.0));
float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));
isValid = 1.0;
uv = vec2(segmentRatio, segmentSide);
geometry.uv = uv;
geometry.pickingColor = instancePickingColors;
vec4 curr;
vec4 next;
vec3 source;
vec3 target;
if ((arc.greatCircle || project.projectionMode == PROJECTION_MODE_GLOBE) && project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));
target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));
float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);
vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);
vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);
vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);
if (abs(currPos.x - prevPos.x) > 180.0) {
indexDir = -1.0;
isValid = 0.0;
} else if (abs(currPos.x - nextPos.x) > 180.0) {
indexDir = 1.0;
isValid = 0.0;
}
nextPos = indexDir < 0.0 ? prevPos : nextPos;
nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;
if (isValid == 0.0) {
nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;
float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);
currPos = mix(currPos, nextPos, t);
segmentRatio = mix(segmentRatio, nextSegmentRatio, t);
}
vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);
vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);
curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);
next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));
} else {
vec3 source_world = instanceSourcePositions;
vec3 target_world = instanceTargetPositions;
if (arc.useShortestPath) {
source_world.x = mod(source_world.x + 180., 360.0) - 180.;
target_world.x = mod(target_world.x + 180., 360.0) - 180.;
float deltaLng = target_world.x - source_world.x;
if (deltaLng > 180.) target_world.x -= 360.;
if (deltaLng < -180.) source_world.x -= 360.;
}
source = project_position(source_world, instanceSourcePositions64Low);
target = project_position(target_world, instanceTargetPositions64Low);
float antiMeridianX = 0.0;
if (arc.useShortestPath) {
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
antiMeridianX = -(project.coordinateOrigin.x + 180.) / 360. * TILE_SIZE;
}
float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);
if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {
isValid = 0.0;
indexDir = sign(segmentRatio - thresholdRatio);
segmentRatio = thresholdRatio;
}
}
nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;
vec3 currPos = interpolateFlat(source, target, segmentRatio);
vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);
if (arc.useShortestPath) {
if (nextPos.x < antiMeridianX) {
currPos.x += TILE_SIZE;
nextPos.x += TILE_SIZE;
}
}
curr = project_common_position_to_clipspace(vec4(currPos, 1.0));
next = project_common_position_to_clipspace(vec4(nextPos, 1.0));
geometry.position = vec4(currPos, 1.0);
}
float widthPixels = clamp(
project_size_to_pixel(instanceWidths * arc.widthScale, arc.widthUnits),
arc.widthMinPixels, arc.widthMaxPixels
);
vec3 offset = vec3(
getExtrusionOffset((next.xy - curr.xy) * indexDir, segmentSide, widthPixels),
0.0);
DECKGL_FILTER_SIZE(offset, geometry);
DECKGL_FILTER_GL_POSITION(curr, geometry);
gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);
vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);
vColor = vec4(color.rgb, color.a * layer.opacity);
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var no=`#version 300 es
#define SHADER_NAME arc-layer-fragment-shader
precision highp float;
in vec4 vColor;
in vec2 uv;
in float isValid;
out vec4 fragColor;
void main(void) {
if (isValid == 0.0) {
discard;
}
fragColor = vColor;
geometry.uv = uv;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var ee=[0,0,0,255],Gn={getSourcePosition:{type:"accessor",value:o=>o.sourcePosition},getTargetPosition:{type:"accessor",value:o=>o.targetPosition},getSourceColor:{type:"accessor",value:ee},getTargetColor:{type:"accessor",value:ee},getWidth:{type:"accessor",value:1},getHeight:{type:"accessor",value:1},getTilt:{type:"accessor",value:0},greatCircle:!1,numSegments:{type:"number",value:50,min:1},widthUnits:"pixels",widthScale:{type:"number",value:1,min:0},widthMinPixels:{type:"number",value:0,min:0},widthMaxPixels:{type:"number",value:Number.MAX_SAFE_INTEGER,min:0}},mt=class extends G.Layer{getBounds(){return this.getAttributeManager()?.getBounds(["instanceSourcePositions","instanceTargetPositions"])}getShaders(){return super.getShaders({vs:io,fs:no,modules:[G.project32,G.picking,oo]})}get wrapLongitude(){return!1}initializeState(){this.getAttributeManager().addInstanced({instanceSourcePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getSourcePosition"},instanceTargetPositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getTargetPosition"},instanceSourceColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getSourceColor",defaultValue:ee},instanceTargetColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getTargetColor",defaultValue:ee},instanceWidths:{size:1,transition:!0,accessor:"getWidth",defaultValue:1},instanceHeights:{size:1,transition:!0,accessor:"getHeight",defaultValue:1},instanceTilts:{size:1,transition:!0,accessor:"getTilt",defaultValue:0}})}updateState(t){super.updateState(t),t.changeFlags.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),this.getAttributeManager().invalidateAll())}draw({uniforms:t}){let{widthUnits:e,widthScale:i,widthMinPixels:n,widthMaxPixels:r,greatCircle:s,wrapLongitude:a,numSegments:l}=this.props,c={numSegments:l,widthUnits:G.UNIT[e],widthScale:i,widthMinPixels:n,widthMaxPixels:r,greatCircle:s,useShortestPath:a},u=this.state.model;u.shaderInputs.setProps({arc:c}),u.setVertexCount(l*2),u.draw(this.context.renderPass)}_getModel(){return new ro.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),topology:"triangle-strip",isInstanced:!0})}};mt.layerName="ArcLayer";mt.defaultProps=Gn;var so=mt;var F=P(L(),1),vo=P(I(),1);var Vs=1/Math.PI*180,Hs=1/180*Math.PI,Wn={EPSILON:1e-12,debug:!1,precision:4,printTypes:!1,printDegrees:!1,printRowMajor:!0,_cartographicRadians:!1};globalThis.mathgl=globalThis.mathgl||{config:{...Wn}};var Bn=globalThis.mathgl.config;function ao(o){return Array.isArray(o)||ArrayBuffer.isView(o)&&!(o instanceof DataView)}function ot(o,t,e){return ao(o)?o.map((i,n)=>ot(i,t[n],e)):e*t+(1-e)*o}function oe(o,t){if(!o)throw new Error(t||"@math.gl/web-mercator: assertion failed.")}var X=Math.PI,Zn=X/4,lo=X/180,ma=180/X,co=512;function $(o){let[t,e]=o;oe(Number.isFinite(t)),oe(Number.isFinite(e)&&e>=-90&&e<=90,"invalid latitude");let i=t*lo,n=e*lo,r=co*(i+X)/(2*X),s=co*(X+Math.log(Math.tan(Zn+n*.5)))/(2*X);return[r,s]}var Sa=Math.PI/180;var rr=new Uint32Array([0,2,1,0,3,2]),sr=new Float32Array([0,1,0,0,1,0,1,1]);function Fe(o,t){if(!t)return ar(o);let e=Math.max(Math.abs(o[0][0]-o[3][0]),Math.abs(o[1][0]-o[2][0])),i=Math.max(Math.abs(o[1][1]-o[0][1]),Math.abs(o[2][1]-o[3][1])),n=Math.ceil(e/t)+1,r=Math.ceil(i/t)+1,s=(n-1)*(r-1)*6,a=new Uint32Array(s),l=new Float32Array(n*r*2),c=new Float64Array(n*r*3),u=0,f=0;for(let d=0;d<n;d++){let g=d/(n-1);for(let p=0;p<r;p++){let h=p/(r-1),m=lr(o,g,h);c[u*3+0]=m[0],c[u*3+1]=m[1],c[u*3+2]=m[2]||0,l[u*2+0]=g,l[u*2+1]=1-h,d>0&&p>0&&(a[f++]=u-r,a[f++]=u-r-1,a[f++]=u-1,a[f++]=u-r,a[f++]=u-1,a[f++]=u),u++}}return{vertexCount:s,positions:c,indices:a,texCoords:l}}function ar(o){let t=new Float64Array(12);for(let e=0;e<o.length;e++)t[e*3+0]=o[e][0],t[e*3+1]=o[e][1],t[e*3+2]=o[e][2]||0;return{vertexCount:6,positions:t,indices:rr,texCoords:sr}}function lr(o,t,e){return ot(ot(o[0],o[1],e),ot(o[3],o[2],e),t)}var go=`uniform bitmapUniforms {
  vec4 bounds;
  float coordinateConversion;
  float desaturate;
  vec3 tintColor;
  vec4 transparentColor;
} bitmap;
`,po={name:"bitmap",vs:go,fs:go,uniformTypes:{bounds:"vec4<f32>",coordinateConversion:"f32",desaturate:"f32",tintColor:"vec3<f32>",transparentColor:"vec4<f32>"}};var ho=`#version 300 es
#define SHADER_NAME bitmap-layer-vertex-shader

in vec2 texCoords;
in vec3 positions;
in vec3 positions64Low;

out vec2 vTexCoord;
out vec2 vTexPos;

const vec3 pickingColor = vec3(1.0, 0.0, 0.0);

void main(void) {
  geometry.worldPosition = positions;
  geometry.uv = texCoords;
  geometry.pickingColor = pickingColor;

  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  vTexCoord = texCoords;

  if (bitmap.coordinateConversion < -0.5) {
    vTexPos = geometry.position.xy + project.commonOrigin.xy;
  } else if (bitmap.coordinateConversion > 0.5) {
    vTexPos = geometry.worldPosition.xy;
  }

  vec4 color = vec4(0.0);
  DECKGL_FILTER_COLOR(color, geometry);
}
`;var cr=`
vec3 packUVsIntoRGB(vec2 uv) {
  // Extract the top 8 bits. We want values to be truncated down so we can add a fraction
  vec2 uv8bit = floor(uv * 256.);

  // Calculate the normalized remainders of u and v parts that do not fit into 8 bits
  // Scale and clamp to 0-1 range
  vec2 uvFraction = fract(uv * 256.);
  vec2 uvFraction4bit = floor(uvFraction * 16.);

  // Remainder can be encoded in blue channel, encode as 4 bits for pixel coordinates
  float fractions = uvFraction4bit.x + uvFraction4bit.y * 16.;

  return vec3(uv8bit, fractions) / 255.;
}
`,mo=`#version 300 es
#define SHADER_NAME bitmap-layer-fragment-shader

#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D bitmapTexture;

in vec2 vTexCoord;
in vec2 vTexPos;

out vec4 fragColor;

/* projection utils */
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / PI / 2.0;

// from degrees to Web Mercator
vec2 lnglat_to_mercator(vec2 lnglat) {
  float x = lnglat.x;
  float y = clamp(lnglat.y, -89.9, 89.9);
  return vec2(
    radians(x) + PI,
    PI + log(tan(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

// from Web Mercator to degrees
vec2 mercator_to_lnglat(vec2 xy) {
  xy /= WORLD_SCALE;
  return degrees(vec2(
    xy.x - PI,
    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5
  ));
}
/* End projection utils */

// apply desaturation
vec3 color_desaturate(vec3 color) {
  float luminance = (color.r + color.g + color.b) * 0.333333333;
  return mix(color, vec3(luminance), bitmap.desaturate);
}

// apply tint
vec3 color_tint(vec3 color) {
  return color * bitmap.tintColor;
}

// blend with background color
vec4 apply_opacity(vec3 color, float alpha) {
  if (bitmap.transparentColor.a == 0.0) {
    return vec4(color, alpha);
  }
  float blendedAlpha = alpha + bitmap.transparentColor.a * (1.0 - alpha);
  float highLightRatio = alpha / blendedAlpha;
  vec3 blendedRGB = mix(bitmap.transparentColor.rgb, color, highLightRatio);
  return vec4(blendedRGB, blendedAlpha);
}

vec2 getUV(vec2 pos) {
  return vec2(
    (pos.x - bitmap.bounds[0]) / (bitmap.bounds[2] - bitmap.bounds[0]),
    (pos.y - bitmap.bounds[3]) / (bitmap.bounds[1] - bitmap.bounds[3])
  );
}

${cr}

void main(void) {
  vec2 uv = vTexCoord;
  if (bitmap.coordinateConversion < -0.5) {
    vec2 lnglat = mercator_to_lnglat(vTexPos);
    uv = getUV(lnglat);
  } else if (bitmap.coordinateConversion > 0.5) {
    vec2 commonPos = lnglat_to_mercator(vTexPos);
    uv = getUV(commonPos);
  }
  vec4 bitmapColor = texture(bitmapTexture, uv);

  fragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * layer.opacity);

  geometry.uv = uv;
  DECKGL_FILTER_COLOR(fragColor, geometry);

  if (bool(picking.isActive) && !bool(picking.isAttribute)) {
    // Since instance information is not used, we can use picking color for pixel index
    fragColor.rgb = packUVsIntoRGB(uv);
  }
}
`;var ur={image:{type:"image",value:null,async:!0},bounds:{type:"array",value:[1,0,0,1],compare:!0},_imageCoordinateSystem:F.COORDINATE_SYSTEM.DEFAULT,desaturate:{type:"number",min:0,max:1,value:0},transparentColor:{type:"color",value:[0,0,0,0]},tintColor:{type:"color",value:[255,255,255]},textureParameters:{type:"object",ignore:!0,value:null}},vt=class extends F.Layer{getShaders(){return super.getShaders({vs:ho,fs:mo,modules:[F.project32,F.picking,po]})}initializeState(){let t=this.getAttributeManager();t.remove(["instancePickingColors"]);let e=!0;t.add({indices:{size:1,isIndexed:!0,update:i=>i.value=this.state.mesh.indices,noAlloc:e},positions:{size:3,type:"float64",fp64:this.use64bitPositions(),update:i=>i.value=this.state.mesh.positions,noAlloc:e},texCoords:{size:2,update:i=>i.value=this.state.mesh.texCoords,noAlloc:e}})}updateState({props:t,oldProps:e,changeFlags:i}){let n=this.getAttributeManager();if(i.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),n.invalidateAll()),t.bounds!==e.bounds){let r=this.state.mesh,s=this._createMesh();this.state.model.setVertexCount(s.vertexCount);for(let a in s)r&&r[a]!==s[a]&&n.invalidate(a);this.setState({mesh:s,...this._getCoordinateUniforms()})}else t._imageCoordinateSystem!==e._imageCoordinateSystem&&this.setState(this._getCoordinateUniforms())}getPickingInfo(t){let{image:e}=this.props,i=t.info;if(!i.color||!e)return i.bitmap=null,i;let{width:n,height:r}=e;i.index=0;let s=fr(i.color);return i.bitmap={size:{width:n,height:r},uv:s,pixel:[Math.floor(s[0]*n),Math.floor(s[1]*r)]},i}disablePickingIndex(){this.setState({disablePicking:!0})}restorePickingColors(){this.setState({disablePicking:!1})}_updateAutoHighlight(t){super._updateAutoHighlight({...t,color:this.encodePickingColor(0)})}_createMesh(){let{bounds:t}=this.props,e=t;return xo(t)&&(e=[[t[0],t[1]],[t[0],t[3]],[t[2],t[3]],[t[2],t[1]]]),Fe(e,this.context.viewport.resolution)}_getModel(){return new vo.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),topology:"triangle-list",isInstanced:!1})}draw(t){let{shaderModuleProps:e}=t,{model:i,coordinateConversion:n,bounds:r,disablePicking:s}=this.state,{image:a,desaturate:l,transparentColor:c,tintColor:u}=this.props;if(!(e.picking.isActive&&s)&&a&&i){let f={bitmapTexture:a,bounds:r,coordinateConversion:n,desaturate:l,tintColor:u.slice(0,3).map(d=>d/255),transparentColor:c.map(d=>d/255)};i.shaderInputs.setProps({bitmap:f}),i.draw(this.context.renderPass)}}_getCoordinateUniforms(){let{LNGLAT:t,CARTESIAN:e,DEFAULT:i}=F.COORDINATE_SYSTEM,{_imageCoordinateSystem:n}=this.props;if(n!==i){let{bounds:r}=this.props;if(!xo(r))throw new Error("_imageCoordinateSystem only supports rectangular bounds");let s=this.context.viewport.resolution?t:e;if(n=n===t?t:e,n===t&&s===e)return{coordinateConversion:-1,bounds:r};if(n===e&&s===t){let a=$([r[0],r[1]]),l=$([r[2],r[3]]);return{coordinateConversion:1,bounds:[a[0],a[1],l[0],l[1]]}}}return{coordinateConversion:0,bounds:[0,0,0,0]}}};vt.layerName="BitmapLayer";vt.defaultProps=ur;var yo=vt;function fr(o){let[t,e,i]=o,n=(i&240)/256,r=(i&15)/16;return[(t+r)/256,(e+n)/256]}function xo(o){return Number.isFinite(o[0])}var z=P(L(),1),ie=P(I(),1);var Po=`uniform iconUniforms {
  float sizeScale;
  vec2 iconsTextureDim;
  float sizeMinPixels;
  float sizeMaxPixels;
  bool billboard;
  highp int sizeUnits;
  float alphaCutoff;
} icon;
`,_o={name:"icon",vs:Po,fs:Po,uniformTypes:{sizeScale:"f32",iconsTextureDim:"vec2<f32>",sizeMinPixels:"f32",sizeMaxPixels:"f32",billboard:"f32",sizeUnits:"i32",alphaCutoff:"f32"}};var Co=`#version 300 es
#define SHADER_NAME icon-layer-vertex-shader
in vec2 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceSizes;
in float instanceAngles;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec4 instanceIconFrames;
in float instanceColorModes;
in vec2 instanceOffsets;
in vec2 instancePixelOffset;
out float vColorMode;
out vec4 vColor;
out vec2 vTextureCoords;
out vec2 uv;
vec2 rotate_by_angle(vec2 vertex, float angle) {
float angle_radian = angle * PI / 180.0;
float cos_angle = cos(angle_radian);
float sin_angle = sin(angle_radian);
mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
return rotationMatrix * vertex;
}
void main(void) {
geometry.worldPosition = instancePositions;
geometry.uv = positions;
geometry.pickingColor = instancePickingColors;
uv = positions;
vec2 iconSize = instanceIconFrames.zw;
float sizePixels = clamp(
project_size_to_pixel(instanceSizes * icon.sizeScale, icon.sizeUnits),
icon.sizeMinPixels, icon.sizeMaxPixels
);
float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;
vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;
pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;
pixelOffset += instancePixelOffset;
pixelOffset.y *= -1.0;
if (icon.billboard)  {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = vec3(pixelOffset, 0.0);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
DECKGL_FILTER_SIZE(offset_common, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vTextureCoords = mix(
instanceIconFrames.xy,
instanceIconFrames.xy + iconSize,
(positions.xy + 1.0) / 2.0
) / icon.iconsTextureDim;
vColor = instanceColors;
DECKGL_FILTER_COLOR(vColor, geometry);
vColorMode = instanceColorModes;
}
`;var Lo=`#version 300 es
#define SHADER_NAME icon-layer-fragment-shader
precision highp float;
uniform sampler2D iconsTexture;
in float vColorMode;
in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
vec4 texColor = texture(iconsTexture, vTextureCoords);
vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);
float a = texColor.a * layer.opacity * vColor.a;
if (a < icon.alphaCutoff) {
discard;
}
fragColor = vec4(color, a);
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var Io=P(wo(),1),Ao=P(L(),1),dr=1024,gr=4,Mo=()=>{},bo={minFilter:"linear",mipmapFilter:"linear",magFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"},pr={x:0,y:0,width:0,height:0};function hr(o){return Math.pow(2,Math.ceil(Math.log2(o)))}function mr(o,t,e,i){let n=Math.min(e/t.width,i/t.height),r=Math.floor(t.width*n),s=Math.floor(t.height*n);return n===1?{image:t,width:r,height:s}:(o.canvas.height=s,o.canvas.width=r,o.clearRect(0,0,r,s),o.drawImage(t,0,0,t.width,t.height,0,0,r,s),{image:o.canvas,width:r,height:s})}function yt(o){return o&&(o.id||o.url)}function xr(o,t,e,i){let{width:n,height:r,device:s}=o,a=s.createTexture({format:"rgba8unorm",width:t,height:e,sampler:i,mipmaps:!0}),l=s.createCommandEncoder();return l.copyTextureToTexture({sourceTexture:o,destinationTexture:a,width:n,height:r}),l.finish(),o.destroy(),a}function To(o,t,e){for(let i=0;i<t.length;i++){let{icon:n,xOffset:r}=t[i],s=yt(n);o[s]={...n,x:r,y:e}}}function vr({icons:o,buffer:t,mapping:e={},xOffset:i=0,yOffset:n=0,rowHeight:r=0,canvasWidth:s}){let a=[];for(let l=0;l<o.length;l++){let c=o[l],u=yt(c);if(!e[u]){let{height:f,width:d}=c;i+d+t>s&&(To(e,a,n),i=0,n=r+n+t,r=0,a=[]),a.push({icon:c,xOffset:i}),i=i+d+t,r=Math.max(r,f)}}return a.length>0&&To(e,a,n),{mapping:e,rowHeight:r,xOffset:i,yOffset:n,canvasWidth:s,canvasHeight:hr(r+n+t)}}function yr(o,t,e){if(!o||!t)return null;e=e||{};let i={},{iterable:n,objectInfo:r}=(0,Ao.createIterable)(o);for(let s of n){r.index++;let a=t(s,r),l=yt(a);if(!a)throw new Error("Icon is missing.");if(!a.url)throw new Error("Icon url is missing.");!i[l]&&(!e[l]||a.url!==e[l].url)&&(i[l]={...a,source:s,sourceIndex:r.index})}return i}var Pt=class{constructor(t,{onUpdate:e=Mo,onError:i=Mo}){this._loadOptions=null,this._texture=null,this._externalTexture=null,this._mapping={},this._samplerParameters=null,this._pendingCount=0,this._autoPacking=!1,this._xOffset=0,this._yOffset=0,this._rowHeight=0,this._buffer=gr,this._canvasWidth=dr,this._canvasHeight=0,this._canvas=null,this.device=t,this.onUpdate=e,this.onError=i}finalize(){this._texture?.delete()}getTexture(){return this._texture||this._externalTexture}getIconMapping(t){let e=this._autoPacking?yt(t):t;return this._mapping[e]||pr}setProps({loadOptions:t,autoPacking:e,iconAtlas:i,iconMapping:n,textureParameters:r}){t&&(this._loadOptions=t),e!==void 0&&(this._autoPacking=e),n&&(this._mapping=n),i&&(this._texture?.delete(),this._texture=null,this._externalTexture=i),r&&(this._samplerParameters=r)}get isLoaded(){return this._pendingCount===0}packIcons(t,e){if(!this._autoPacking||typeof document>"u")return;let i=Object.values(yr(t,e,this._mapping)||{});if(i.length>0){let{mapping:n,xOffset:r,yOffset:s,rowHeight:a,canvasHeight:l}=vr({icons:i,buffer:this._buffer,canvasWidth:this._canvasWidth,mapping:this._mapping,rowHeight:this._rowHeight,xOffset:this._xOffset,yOffset:this._yOffset});this._rowHeight=a,this._mapping=n,this._xOffset=r,this._yOffset=s,this._canvasHeight=l,this._texture||(this._texture=this.device.createTexture({format:"rgba8unorm",width:this._canvasWidth,height:this._canvasHeight,sampler:this._samplerParameters||bo,mipmaps:!0})),this._texture.height!==this._canvasHeight&&(this._texture=xr(this._texture,this._canvasWidth,this._canvasHeight,this._samplerParameters||bo)),this.onUpdate(),this._canvas=this._canvas||document.createElement("canvas"),this._loadIcons(i)}}_loadIcons(t){let e=this._canvas.getContext("2d",{willReadFrequently:!0});for(let i of t)this._pendingCount++,(0,Io.load)(i.url,this._loadOptions).then(n=>{let r=yt(i),s=this._mapping[r],{x:a,y:l,width:c,height:u}=s,{image:f,width:d,height:g}=mr(e,n,c,u);this._texture?.copyExternalImage({image:f,x:a+(c-d)/2,y:l+(u-g)/2,width:d,height:g}),s.width=d,s.height=g,this._texture.generateMipmap(),this.onUpdate()}).catch(n=>{this.onError({url:i.url,source:i.source,sourceIndex:i.sourceIndex,loadOptions:this._loadOptions,error:n})}).finally(()=>{this._pendingCount--})}};var Eo=[0,0,0,255],Pr={iconAtlas:{type:"image",value:null,async:!0},iconMapping:{type:"object",value:{},async:!0},sizeScale:{type:"number",value:1,min:0},billboard:!0,sizeUnits:"pixels",sizeMinPixels:{type:"number",min:0,value:0},sizeMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},alphaCutoff:{type:"number",value:.05,min:0,max:1},getPosition:{type:"accessor",value:o=>o.position},getIcon:{type:"accessor",value:o=>o.icon},getColor:{type:"accessor",value:Eo},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},onIconError:{type:"function",value:null,optional:!0},textureParameters:{type:"object",ignore:!0,value:null}},_t=class extends z.Layer{getShaders(){return super.getShaders({vs:Co,fs:Lo,modules:[z.project32,z.picking,_o]})}initializeState(){this.state={iconManager:new Pt(this.context.device,{onUpdate:this._onUpdate.bind(this),onError:this._onError.bind(this)})},this.getAttributeManager().addInstanced({instancePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceOffsets:{size:2,accessor:"getIcon",transform:this.getInstanceOffset},instanceIconFrames:{size:4,accessor:"getIcon",transform:this.getInstanceIconFrame},instanceColorModes:{size:1,type:"uint8",accessor:"getIcon",transform:this.getInstanceColorMode},instanceColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getColor",defaultValue:Eo},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instancePixelOffset:{size:2,transition:!0,accessor:"getPixelOffset"}})}updateState(t){super.updateState(t);let{props:e,oldProps:i,changeFlags:n}=t,r=this.getAttributeManager(),{iconAtlas:s,iconMapping:a,data:l,getIcon:c,textureParameters:u}=e,{iconManager:f}=this.state;if(typeof s=="string")return;let d=s||this.internalState.isAsyncPropLoading("iconAtlas");f.setProps({loadOptions:e.loadOptions,autoPacking:!d,iconAtlas:s,iconMapping:d?a:null,textureParameters:u}),d?i.iconMapping!==e.iconMapping&&r.invalidate("getIcon"):(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getIcon))&&f.packIcons(l,c),n.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),r.invalidateAll())}get isLoaded(){return super.isLoaded&&this.state.iconManager.isLoaded}finalizeState(t){super.finalizeState(t),this.state.iconManager.finalize()}draw({uniforms:t}){let{sizeScale:e,sizeMinPixels:i,sizeMaxPixels:n,sizeUnits:r,billboard:s,alphaCutoff:a}=this.props,{iconManager:l}=this.state,c=l.getTexture();if(c){let u=this.state.model,f={iconsTexture:c,iconsTextureDim:[c.width,c.height],sizeUnits:z.UNIT[r],sizeScale:e,sizeMinPixels:i,sizeMaxPixels:n,billboard:s,alphaCutoff:a};u.shaderInputs.setProps({icon:f}),u.draw(this.context.renderPass)}}_getModel(){let t=[-1,-1,1,-1,-1,1,1,1];return new ie.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new ie.Geometry({topology:"triangle-strip",attributes:{positions:{size:2,value:new Float32Array(t)}}}),isInstanced:!0})}_onUpdate(){this.setNeedsRedraw()}_onError(t){let e=this.getCurrentLayer()?.props.onIconError;e?e(t):z.log.error(t.error.message)()}getInstanceOffset(t){let{width:e,height:i,anchorX:n=e/2,anchorY:r=i/2}=this.state.iconManager.getIconMapping(t);return[e/2-n,i/2-r]}getInstanceColorMode(t){return this.state.iconManager.getIconMapping(t).mask?1:0}getInstanceIconFrame(t){let{x:e,y:i,width:n,height:r}=this.state.iconManager.getIconMapping(t);return[e,i,n,r]}};_t.defaultProps=Pr;_t.layerName="IconLayer";var it=_t;var W=P(L(),1),ne=P(I(),1);var _r=`struct LineUniforms {
  widthScale: f32,
  widthMinPixels: f32,
  widthMaxPixels: f32,
  useShortestPath: f32,
  widthUnits: i32,
};

@group(0) @binding(1)
var<uniform> line: LineUniforms;
`,Ro=`uniform lineUniforms {
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  float useShortestPath;
  highp int widthUnits;
} line;
`,zo={name:"line",source:_r,vs:Ro,fs:Ro,uniformTypes:{widthScale:"f32",widthMinPixels:"f32",widthMaxPixels:"f32",useShortestPath:"f32",widthUnits:"i32"}};var Oo=`// TODO(ibgreen): Hack for Layer uniforms (move to new "color" module?)
struct LayerUniforms {
  opacity: f32,
};
var<private> layer: LayerUniforms = LayerUniforms(1.0);
// @group(0) @binding(1) var<uniform> layer: LayerUniforms;

// ---------- Helper Structures & Functions ----------

// Placeholder filter functions.
fn deckgl_filter_size(offset: vec3<f32>, geometry: Geometry) -> vec3<f32> {
  return offset;
}
fn deckgl_filter_gl_position(p: vec4<f32>, geometry: Geometry) -> vec4<f32> {
  return p;
}
fn deckgl_filter_color(color: vec4<f32>, geometry: Geometry) -> vec4<f32> {
  return color;
}

// Compute an extrusion offset given a line direction (in clipspace),
// an offset direction (-1 or 1), and a width in pixels.
// Assumes a uniform "project" with a viewportSize field is available.
fn getExtrusionOffset(line_clipspace: vec2<f32>, offset_direction: f32, width: f32) -> vec2<f32> {
  // project.viewportSize should be provided as a uniform (not shown here)
  let dir_screenspace = normalize(line_clipspace * project.viewportSize);
  // Rotate by 90\xB0: (x,y) becomes (-y,x)
  let rotated = vec2<f32>(-dir_screenspace.y, dir_screenspace.x);
  return rotated * offset_direction * width / 2.0;
}

// Splits the line between two points at a given x coordinate.
// Interpolates the y and z components.
fn splitLine(a: vec3<f32>, b: vec3<f32>, x: f32) -> vec3<f32> {
  let t: f32 = (x - a.x) / (b.x - a.x);
  return vec3<f32>(x, a.yz + t * (b.yz - a.yz));
}

// ---------- Uniforms & Global Structures ----------

// Uniforms for line, layer, and project are assumed to be defined elsewhere.
// For example:
//
// @group(0) @binding(0)
// var<uniform> line: LineUniform;
//
// struct LayerUniform {
//   opacity: f32,
// };
// @group(0) @binding(1)
// var<uniform> layer: LayerUniform;
//
// struct ProjectUniform {
//   viewportSize: vec2<f32>,
// };
// @group(0) @binding(2)
// var<uniform> project: ProjectUniform;



// ---------- Vertex Output Structure ----------

struct Varyings {
  @builtin(position) gl_Position: vec4<f32>,
  @location(0) vColor: vec4<f32>,
  @location(1) uv: vec2<f32>,
};

// ---------- Vertex Shader Entry Point ----------

@vertex
fn vertexMain(
  @location(0) positions: vec3<f32>,
  @location(1) instanceSourcePositions: vec3<f32>,
  @location(2) instanceTargetPositions: vec3<f32>,
  @location(3) instanceSourcePositions64Low: vec3<f32>,
  @location(4) instanceTargetPositions64Low: vec3<f32>,
  @location(5) instanceColors: vec4<f32>,
  @location(6) instancePickingColors: vec3<f32>,
  @location(7) instanceWidths: f32
) -> Varyings {
  var geometry: Geometry;
  geometry.worldPosition = instanceSourcePositions;
  geometry.worldPositionAlt = instanceTargetPositions;

  var source_world: vec3<f32> = instanceSourcePositions;
  var target_world: vec3<f32> = instanceTargetPositions;
  var source_world_64low: vec3<f32> = instanceSourcePositions64Low;
  var target_world_64low: vec3<f32> = instanceTargetPositions64Low;

  // Apply shortest-path adjustments if needed.
  if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {
    source_world.x = (source_world.x + 180.0 % 360.0) - 180.0;
    target_world.x = (target_world.x + 180.0 % 360.0) - 180.0;
    let deltaLng: f32 = target_world.x - source_world.x;

    if (deltaLng * line.useShortestPath > 180.0) {
      source_world.x = source_world.x + 360.0 * line.useShortestPath;
      source_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);
      source_world_64low = vec3<f32>(0.0, 0.0, 0.0);
    } else if (deltaLng * line.useShortestPath < -180.0) {
      target_world.x = target_world.x + 360.0 * line.useShortestPath;
      target_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);
      target_world_64low = vec3<f32>(0.0, 0.0, 0.0);
    } else if (line.useShortestPath < 0.0) {
      var abortOut: Varyings;
      abortOut.gl_Position = vec4<f32>(0.0);
      abortOut.vColor = vec4<f32>(0.0);
      abortOut.uv = vec2<f32>(0.0);
      return abortOut;
    }
  }

  // Project Pos and target positions to clip space.
  let sourceResult = project_position_to_clipspace_and_commonspace(source_world, source_world_64low, vec3<f32>(0.0));
  let targetResult = project_position_to_clipspace_and_commonspace(target_world, target_world_64low, vec3<f32>(0.0));
  let sourcePos: vec4<f32> = sourceResult.clipPosition;
  let targetPos: vec4<f32> = targetResult.clipPosition;
  let source_commonspace: vec4<f32> = sourceResult.commonPosition;
  let target_commonspace: vec4<f32> = targetResult.commonPosition;

  // Interpolate along the line segment.
  let segmentIndex: f32 = positions.x;
  let p: vec4<f32> = sourcePos + segmentIndex * (targetPos - sourcePos);
  geometry.position = source_commonspace + segmentIndex * (target_commonspace - source_commonspace);
  let uv: vec2<f32> = positions.xy;
  geometry.uv = uv;
  geometry.pickingColor = instancePickingColors;

  // Determine width in pixels.
  let widthPixels: f32 = clamp(
    project_unit_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),
    line.widthMinPixels, line.widthMaxPixels
  );

  // Compute extrusion offset.
  let extrusion: vec2<f32> = getExtrusionOffset(targetPos.xy - sourcePos.xy, positions.y, widthPixels);
  let offset: vec3<f32> = vec3<f32>(extrusion, 0.0);

  // Apply deck.gl filter functions.
  let filteredOffset = deckgl_filter_size(offset, geometry);
  let filteredP = deckgl_filter_gl_position(p, geometry);

  let clipOffset: vec2<f32> = project_pixel_size_to_clipspace(filteredOffset.xy);
  let finalPosition: vec4<f32> = filteredP + vec4<f32>(clipOffset, 0.0, 0.0);

  // Compute color.
  var vColor: vec4<f32> = vec4<f32>(instanceColors.rgb, instanceColors.a * layer.opacity);
  // vColor = deckgl_filter_color(vColor, geometry);

  var output: Varyings;
  output.gl_Position = finalPosition;
  output.vColor = vColor;
  output.uv = uv;
  return output;
}

@fragment
fn fragmentMain(
  @location(0) vColor: vec4<f32>,
  @location(1) uv: vec2<f32>
) -> @location(0) vec4<f32> {
  // Create and initialize geometry with the provided uv.
  var geometry: Geometry;
  geometry.uv = uv;

  // Start with the input color.
  var fragColor: vec4<f32> = vColor;

  // Apply the deck.gl filter to the color.
  fragColor = deckgl_filter_color(fragColor, geometry);

  return fragColor;
}
`;var Fo=`#version 300 es
#define SHADER_NAME line-layer-vertex-shader
in vec3 positions;
in vec3 instanceSourcePositions;
in vec3 instanceTargetPositions;
in vec3 instanceSourcePositions64Low;
in vec3 instanceTargetPositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in float instanceWidths;
out vec4 vColor;
out vec2 uv;
vec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {
vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);
dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);
return dir_screenspace * offset_direction * width / 2.0;
}
vec3 splitLine(vec3 a, vec3 b, float x) {
float t = (x - a.x) / (b.x - a.x);
return vec3(x, mix(a.yz, b.yz, t));
}
void main(void) {
geometry.worldPosition = instanceSourcePositions;
geometry.worldPositionAlt = instanceTargetPositions;
vec3 source_world = instanceSourcePositions;
vec3 target_world = instanceTargetPositions;
vec3 source_world_64low = instanceSourcePositions64Low;
vec3 target_world_64low = instanceTargetPositions64Low;
if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {
source_world.x = mod(source_world.x + 180., 360.0) - 180.;
target_world.x = mod(target_world.x + 180., 360.0) - 180.;
float deltaLng = target_world.x - source_world.x;
if (deltaLng * line.useShortestPath > 180.) {
source_world.x += 360. * line.useShortestPath;
source_world = splitLine(source_world, target_world, 180. * line.useShortestPath);
source_world_64low = vec3(0.0);
} else if (deltaLng * line.useShortestPath < -180.) {
target_world.x += 360. * line.useShortestPath;
target_world = splitLine(source_world, target_world, 180. * line.useShortestPath);
target_world_64low = vec3(0.0);
} else if (line.useShortestPath < 0.) {
gl_Position = vec4(0.);
return;
}
}
vec4 source_commonspace;
vec4 target_commonspace;
vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);
vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);
float segmentIndex = positions.x;
vec4 p = mix(source, target, segmentIndex);
geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);
uv = positions.xy;
geometry.uv = uv;
geometry.pickingColor = instancePickingColors;
float widthPixels = clamp(
project_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),
line.widthMinPixels, line.widthMaxPixels
);
vec3 offset = vec3(
getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),
0.0);
DECKGL_FILTER_SIZE(offset, geometry);
DECKGL_FILTER_GL_POSITION(p, geometry);
gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);
vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var Do=`#version 300 es
#define SHADER_NAME line-layer-fragment-shader
precision highp float;
in vec4 vColor;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
fragColor = vColor;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var Cr=[0,0,0,255],Lr={getSourcePosition:{type:"accessor",value:o=>o.sourcePosition},getTargetPosition:{type:"accessor",value:o=>o.targetPosition},getColor:{type:"accessor",value:Cr},getWidth:{type:"accessor",value:1},widthUnits:"pixels",widthScale:{type:"number",value:1,min:0},widthMinPixels:{type:"number",value:0,min:0},widthMaxPixels:{type:"number",value:Number.MAX_SAFE_INTEGER,min:0}},Ct=class extends W.Layer{getBounds(){return this.getAttributeManager()?.getBounds(["instanceSourcePositions","instanceTargetPositions"])}getShaders(){return super.getShaders({vs:Fo,fs:Do,source:Oo,modules:[W.project32,W.picking,zo]})}get wrapLongitude(){return!1}initializeState(){this.getAttributeManager().addInstanced({instanceSourcePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getSourcePosition"},instanceTargetPositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getTargetPosition"},instanceColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getColor",defaultValue:[0,0,0,255]},instanceWidths:{size:1,transition:!0,accessor:"getWidth",defaultValue:1}})}updateState(t){super.updateState(t),t.changeFlags.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),this.getAttributeManager().invalidateAll())}draw({uniforms:t}){let{widthUnits:e,widthScale:i,widthMinPixels:n,widthMaxPixels:r,wrapLongitude:s}=this.props,a=this.state.model,l={widthUnits:W.UNIT[e],widthScale:i,widthMinPixels:n,widthMaxPixels:r,useShortestPath:s?1:0};a.shaderInputs.setProps({line:l}),a.draw(this.context.renderPass),s&&(a.shaderInputs.setProps({line:{...l,useShortestPath:-1}}),a.draw(this.context.renderPass))}_getModel(){let t=[0,-1,0,0,1,0,1,-1,0,1,1,0];return new ne.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new ne.Geometry({topology:"triangle-strip",attributes:{positions:{size:3,value:new Float32Array(t)}}}),isInstanced:!0})}};Ct.layerName="LineLayer";Ct.defaultProps=Lr;var ko=Ct;var j=P(L(),1),ce=P(I(),1);var Wo=P(Uo(),1);var De=`precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int lightType;

  int directionalLightCount;
  int pointLightCount;

  vec3 ambientColor;

  vec3 lightColor0;
  vec3 lightPosition0;
  vec3 lightDirection0;
  vec3 lightAttenuation0;

  vec3 lightColor1;
  vec3 lightPosition1;
  vec3 lightDirection1;
  vec3 lightAttenuation1;

  vec3 lightColor2;
  vec3 lightPosition2;
  vec3 lightDirection2;
  vec3 lightAttenuation2;
} lighting;

PointLight lighting_getPointLight(int index) {
  switch (index) {
    case 0:
      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);
    case 1:
      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);
    case 2:
    default:  
      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);
  }
}

DirectionalLight lighting_getDirectionalLight(int index) {
  switch (index) {
    case 0:
      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);
    case 1:
      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);
    case 2:
    default:   
      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);
  }
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`;var Go=`// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  color: vec3<f32>,
};

struct PointLight {
  color: vec3<f32>,
  position: vec3<f32>,
  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  color: vec3<f32>,
  direction: vec3<f32>,
};

struct lightingUniforms {
  enabled: i32,
  pointLightCount: i32,
  directionalLightCount: i32,

  ambientColor: vec3<f32>,

  // TODO - support multiple lights by uncommenting arrays below
  lightType: i32,
  lightColor: vec3<f32>,
  lightDirection: vec3<f32>,
  lightPosition: vec3<f32>,
  lightAttenuation: vec3<f32>,

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
};

// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)
@binding(1) @group(0) var<uniform> lighting : lightingUniforms;

fn lighting_getPointLight(index: i32) -> PointLight {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

fn lighting_getDirectionalLight(index: i32) -> DirectionalLight {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

fn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}
`;var Bo=3,Sr=255,Lt;(function(o){o[o.POINT=0]="POINT",o[o.DIRECTIONAL=1]="DIRECTIONAL"})(Lt||(Lt={}));var Y={props:{},uniforms:{},name:"lighting",defines:{MAX_LIGHTS:Bo},uniformTypes:{enabled:"i32",lightType:"i32",directionalLightCount:"i32",pointLightCount:"i32",ambientLightColor:"vec3<f32>",lightColor0:"vec3<f32>",lightPosition0:"vec3<f32>",lightDirection0:"vec3<f32>",lightAttenuation0:"vec3<f32>",lightColor1:"vec3<f32>",lightPosition1:"vec3<f32>",lightDirection1:"vec3<f32>",lightAttenuation1:"vec3<f32>",lightColor2:"vec3<f32>",lightPosition2:"vec3<f32>",lightDirection2:"vec3<f32>",lightAttenuation2:"vec3<f32>"},defaultUniforms:{enabled:1,lightType:Lt.POINT,directionalLightCount:0,pointLightCount:0,ambientLightColor:[.1,.1,.1],lightColor0:[1,1,1],lightPosition0:[1,1,2],lightDirection0:[1,1,1],lightAttenuation0:[1,0,0],lightColor1:[1,1,1],lightPosition1:[1,1,2],lightDirection1:[1,1,1],lightAttenuation1:[1,0,0],lightColor2:[1,1,1],lightPosition2:[1,1,2],lightDirection2:[1,1,1],lightAttenuation2:[1,0,0]},source:Go,vs:De,fs:De,getUniforms:wr};function wr(o,t={}){if(o=o&&{...o},!o)return{...Y.defaultUniforms};o.lights&&(o={...o,...br(o.lights),lights:void 0});let{ambientLight:e,pointLights:i,directionalLights:n}=o||{};if(!(e||i&&i.length>0||n&&n.length>0))return{...Y.defaultUniforms,enabled:0};let s={...Y.defaultUniforms,...t,...Mr({ambientLight:e,pointLights:i,directionalLights:n})};return o.enabled!==void 0&&(s.enabled=o.enabled?1:0),s}function Mr({ambientLight:o,pointLights:t=[],directionalLights:e=[]}){let i={};i.ambientLightColor=ke(o);let n=0;for(let r of t){i.lightType=Lt.POINT;let s=n;i[`lightColor${s}`]=ke(r),i[`lightPosition${s}`]=r.position,i[`lightAttenuation${s}`]=r.attenuation||[1,0,0],n++}for(let r of e){i.lightType=Lt.DIRECTIONAL;let s=n;i[`lightColor${s}`]=ke(r),i[`lightDirection${s}`]=r.direction,n++}return n>Bo&&Wo.log.warn("MAX_LIGHTS exceeded")(),i.directionalLightCount=e.length,i.pointLightCount=t.length,i}function br(o){let t={pointLights:[],directionalLights:[]};for(let e of o||[])switch(e.type){case"ambient":t.ambientLight=e;break;case"directional":t.directionalLights?.push(e);break;case"point":t.pointLights?.push(e);break;default:}return t}function ke(o={}){let{color:t=[0,0,0],intensity:e=1}=o;return t.map(i=>i*e/Sr)}var re=`uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`,se=`uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  for (int i = 0; i < lighting.pointLightCount; i++) {
    PointLight pointLight = lighting_getPointLight(i);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);
  }

  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);
  for (int i = lighting.pointLightCount; i < totalLights; i++) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(i);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
}
`;var ae=`struct phongMaterialUniforms {
  ambient: f32,
  diffuse: f32,
  shininess: f32,
  specularColor: vec3<f32>,
};

@binding(2) @group(0) var<uniform> phongMaterial : phongMaterialUniforms;

fn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {
  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);
  var lambertian: f32 = dot(light_direction, normal_worldspace);
  var specular: f32 = 0.0;
  if (lambertian > 0.0) {
    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, phongMaterial.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * phongMaterial.diffuse * surfaceColor + specular * phongMaterial.specularColor) * color;
}

fn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {
  var lightColor: vec3<f32> = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);
  lightColor = phongMaterial.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    let pointLight: PointLight  = lighting_getPointLight(0);
    let light_position_worldspace: vec3<f32> = pointLight.position;
    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
}

fn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{
  var lightColor = vec3<f32>(0, 0, 0);
  let surfaceColor = vec3<f32>(0, 0, 0);

  if (lighting.enabled == 0) {
    let view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0, default: {
        let pointLight: PointLight = lighting_getPointLight(0);
        let light_position_worldspace: vec3<f32> = pointLight.position;
        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
      }
      case 1: {
        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
      }
    }
  }
  return lightColor;
}
`;var B={props:{},name:"gouraudMaterial",vs:se.replace("phongMaterial","gouraudMaterial"),fs:re.replace("phongMaterial","gouraudMaterial"),source:ae.replaceAll("phongMaterial","gouraudMaterial"),defines:{LIGHTING_VERTEX:1},dependencies:[Y],uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms(o){let t={...o};return t.specularColor&&(t.specularColor=t.specularColor.map(e=>e/255)),{...B.defaultUniforms,...t}}};var le={name:"phongMaterial",dependencies:[Y],source:ae,vs:re,fs:se,defines:{LIGHTING_FRAGMENT:1},uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms(o){let t={...o};return t.specularColor&&(t.specularColor=t.specularColor.map(e=>e/255)),{...le.defaultUniforms,...t}}};var jo=`uniform pointCloudUniforms {
  float radiusPixels;
  highp int sizeUnits;
} pointCloud;
`,Vo={name:"pointCloud",vs:jo,fs:jo,uniformTypes:{radiusPixels:"f32",sizeUnits:"i32"}};var Ho=`#version 300 es
#define SHADER_NAME point-cloud-layer-vertex-shader
in vec3 positions;
in vec3 instanceNormals;
in vec4 instanceColors;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec3 instancePickingColors;
out vec4 vColor;
out vec2 unitPosition;
void main(void) {
geometry.worldPosition = instancePositions;
geometry.normal = project_normal(instanceNormals);
unitPosition = positions.xy;
geometry.uv = unitPosition;
geometry.pickingColor = instancePickingColors;
vec3 offset = vec3(positions.xy * project_size_to_pixel(pointCloud.radiusPixels, pointCloud.sizeUnits), 0.0);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, instanceColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var Zo=`#version 300 es
#define SHADER_NAME point-cloud-layer-fragment-shader
precision highp float;
in vec4 vColor;
in vec2 unitPosition;
out vec4 fragColor;
void main(void) {
geometry.uv = unitPosition.xy;
float distToCenter = length(unitPosition);
if (distToCenter > 1.0) {
discard;
}
fragColor = vColor;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var Ko=[0,0,0,255],Xo=[0,0,1],Tr={sizeUnits:"pixels",pointSize:{type:"number",min:0,value:10},getPosition:{type:"accessor",value:o=>o.position},getNormal:{type:"accessor",value:Xo},getColor:{type:"accessor",value:Ko},material:!0,radiusPixels:{deprecatedFor:"pointSize"}};function Ir(o){let{header:t,attributes:e}=o;if(!(!t||!e)&&(o.length=t.vertexCount,e.POSITION&&(e.instancePositions=e.POSITION),e.NORMAL&&(e.instanceNormals=e.NORMAL),e.COLOR_0)){let{size:i,value:n}=e.COLOR_0;e.instanceColors={size:i,type:"unorm8",value:n}}}var St=class extends j.Layer{getShaders(){return super.getShaders({vs:Ho,fs:Zo,modules:[j.project32,B,j.picking,Vo]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceNormals:{size:3,transition:!0,accessor:"getNormal",defaultValue:Xo},instanceColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getColor",defaultValue:Ko}})}updateState(t){let{changeFlags:e,props:i}=t;super.updateState(t),e.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),this.getAttributeManager().invalidateAll()),e.dataChanged&&Ir(i.data)}draw({uniforms:t}){let{pointSize:e,sizeUnits:i}=this.props,n=this.state.model,r={sizeUnits:j.UNIT[i],radiusPixels:e};n.shaderInputs.setProps({pointCloud:r}),n.draw(this.context.renderPass)}_getModel(){let t=[];for(let e=0;e<3;e++){let i=e/3*Math.PI*2;t.push(Math.cos(i)*2,Math.sin(i)*2,0)}return new ce.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new ce.Geometry({topology:"triangle-list",attributes:{positions:new Float32Array(t)}}),isInstanced:!0})}};St.layerName="PointCloudLayer";St.defaultProps=Tr;var $o=St;var D=P(L(),1),ue=P(I(),1);var Yo=`uniform scatterplotUniforms {
  float radiusScale;
  float radiusMinPixels;
  float radiusMaxPixels;
  float lineWidthScale;
  float lineWidthMinPixels;
  float lineWidthMaxPixels;
  float stroked;
  float filled;
  bool antialiasing;
  bool billboard;
  highp int radiusUnits;
  highp int lineWidthUnits;
} scatterplot;
`,Jo={name:"scatterplot",vs:Yo,fs:Yo,source:"",uniformTypes:{radiusScale:"f32",radiusMinPixels:"f32",radiusMaxPixels:"f32",lineWidthScale:"f32",lineWidthMinPixels:"f32",lineWidthMaxPixels:"f32",stroked:"f32",filled:"f32",antialiasing:"f32",billboard:"f32",radiusUnits:"i32",lineWidthUnits:"i32"}};var qo=`#version 300 es
#define SHADER_NAME scatterplot-layer-vertex-shader
in vec3 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceRadius;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;
out vec4 vFillColor;
out vec4 vLineColor;
out vec2 unitPosition;
out float innerUnitRadius;
out float outerRadiusPixels;
void main(void) {
geometry.worldPosition = instancePositions;
outerRadiusPixels = clamp(
project_size_to_pixel(scatterplot.radiusScale * instanceRadius, scatterplot.radiusUnits),
scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels
);
float lineWidthPixels = clamp(
project_size_to_pixel(scatterplot.lineWidthScale * instanceLineWidths, scatterplot.lineWidthUnits),
scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels
);
outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;
float edgePadding = scatterplot.antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;
unitPosition = edgePadding * positions.xy;
geometry.uv = unitPosition;
geometry.pickingColor = instancePickingColors;
innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / outerRadiusPixels;
if (scatterplot.billboard) {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = edgePadding * positions * outerRadiusPixels;
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vFillColor, geometry);
vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`;var Qo=`#version 300 es
#define SHADER_NAME scatterplot-layer-fragment-shader
precision highp float;
in vec4 vFillColor;
in vec4 vLineColor;
in vec2 unitPosition;
in float innerUnitRadius;
in float outerRadiusPixels;
out vec4 fragColor;
void main(void) {
geometry.uv = unitPosition;
float distToCenter = length(unitPosition) * outerRadiusPixels;
float inCircle = scatterplot.antialiasing ?
smoothedge(distToCenter, outerRadiusPixels) :
step(distToCenter, outerRadiusPixels);
if (inCircle == 0.0) {
discard;
}
if (scatterplot.stroked > 0.5) {
float isLine = scatterplot.antialiasing ?
smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :
step(innerUnitRadius * outerRadiusPixels, distToCenter);
if (scatterplot.filled > 0.5) {
fragColor = mix(vFillColor, vLineColor, isLine);
} else {
if (isLine == 0.0) {
discard;
}
fragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);
}
} else if (scatterplot.filled < 0.5) {
discard;
} else {
fragColor = vFillColor;
}
fragColor.a *= inCircle;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var ti=`// TODO(ibgreen): Hack for Layer uniforms (move to new "color" module?)

struct LayerUniforms {
  opacity: f32,
};

var<private> layer: LayerUniforms = LayerUniforms(1.0);
// @group(0) @binding(1) var<uniform> layer: LayerUniforms;

// Main shaders

struct ScatterplotUniforms {
  radiusScale: f32,
  radiusMinPixels: f32,
  radiusMaxPixels: f32,
  lineWidthScale: f32,
  lineWidthMinPixels: f32,
  lineWidthMaxPixels: f32,
  stroked: f32,
  filled: i32,
  antialiasing: i32,
  billboard: i32,
  radiusUnits: i32,
  lineWidthUnits: i32,
};

struct ConstantAttributeUniforms {
 instancePositions: vec3<f32>,
 instancePositions64Low: vec3<f32>,
 instanceRadius: f32,
 instanceLineWidths: f32,
 instanceFillColors: vec4<f32>,
 instanceLineColors: vec4<f32>,
 instancePickingColors: vec3<f32>,

 instancePositionsConstant: i32,
 instancePositions64LowConstant: i32,
 instanceRadiusConstant: i32,
 instanceLineWidthsConstant: i32,
 instanceFillColorsConstant: i32,
 instanceLineColorsConstant: i32,
 instancePickingColorsConstant: i32
};

@group(0) @binding(2) var<uniform> scatterplot: ScatterplotUniforms;

struct ConstantAttributes {
  instancePositions: vec3<f32>,
  instancePositions64Low: vec3<f32>,
  instanceRadius: f32,
  instanceLineWidths: f32,
  instanceFillColors: vec4<f32>,
  instanceLineColors: vec4<f32>,
  instancePickingColors: vec3<f32>
};

const constants = ConstantAttributes(
  vec3<f32>(0.0),
  vec3<f32>(0.0),
  0.0,
  0.0,
  vec4<f32>(0.0, 0.0, 0.0, 1.0),
  vec4<f32>(0.0, 0.0, 0.0, 1.0),
  vec3<f32>(0.0)
);

struct Attributes {
  @builtin(instance_index) instanceIndex : u32,
  @builtin(vertex_index) vertexIndex : u32,
  @location(0) positions: vec3<f32>,
  @location(1) instancePositions: vec3<f32>,
  @location(2) instancePositions64Low: vec3<f32>,
  @location(3) instanceRadius: f32,
  @location(4) instanceLineWidths: f32,
  @location(5) instanceFillColors: vec4<f32>,
  @location(6) instanceLineColors: vec4<f32>,
  @location(7) instancePickingColors: vec3<f32>
};

struct Varyings {
  @builtin(position) position: vec4<f32>,
  @location(0) vFillColor: vec4<f32>,
  @location(1) vLineColor: vec4<f32>,
  @location(2) unitPosition: vec2<f32>,
  @location(3) innerUnitRadius: f32,
  @location(4) outerRadiusPixels: f32,
};

@vertex
fn vertexMain(attributes: Attributes) -> Varyings {
  var varyings: Varyings;

  // Draw an inline geometry constant array clip space triangle to verify that rendering works.
  // var positions = array<vec2<f32>, 3>(vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));
  // if (attributes.instanceIndex == 0) {
  //   varyings.position = vec4<f32>(positions[attributes.vertexIndex], 0.0, 1.0);
  //   return varyings;
  // }

  // var geometry: Geometry;
  // geometry.worldPosition = instancePositions;

  // Multiply out radius and clamp to limits
  varyings.outerRadiusPixels = clamp(
    project_unit_size_to_pixel(scatterplot.radiusScale * attributes.instanceRadius, scatterplot.radiusUnits),
    scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels
  );

  // Multiply out line width and clamp to limits
  let lineWidthPixels = clamp(
    project_unit_size_to_pixel(scatterplot.lineWidthScale * attributes.instanceLineWidths, scatterplot.lineWidthUnits),
    scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels
  );

  // outer radius needs to offset by half stroke width
  varyings.outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;
  // Expand geometry to accommodate edge smoothing
  let edgePadding = select(
    (varyings.outerRadiusPixels + SMOOTH_EDGE_RADIUS) / varyings.outerRadiusPixels,
    1.0,
    scatterplot.antialiasing != 0
  );

  // position on the containing square in [-1, 1] space
  varyings.unitPosition = edgePadding * attributes.positions.xy;
  geometry.uv = varyings.unitPosition;
  geometry.pickingColor = attributes.instancePickingColors;

  varyings.innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / varyings.outerRadiusPixels;

  if (scatterplot.billboard != 0) {
    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, vec3<f32>(0.0)); // TODO , geometry.position);
    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);
    let offset = attributes.positions; // * edgePadding * varyings.outerRadiusPixels;
    // DECKGL_FILTER_SIZE(offset, geometry);
    let clipPixels = project_pixel_size_to_clipspace(offset.xy);
    varyings.position.x = clipPixels.x;
    varyings.position.y = clipPixels.y;
  } else {
    let offset = edgePadding * attributes.positions * project_pixel_size_float(varyings.outerRadiusPixels);
    // DECKGL_FILTER_SIZE(offset, geometry);
    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, offset); // TODO , geometry.position);
    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);
  }

  // Apply opacity to instance color, or return instance picking color
  varyings.vFillColor = vec4<f32>(attributes.instanceFillColors.rgb, attributes.instanceFillColors.a * layer.opacity);
  // DECKGL_FILTER_COLOR(varyings.vFillColor, geometry);
  varyings.vLineColor = vec4<f32>(attributes.instanceLineColors.rgb, attributes.instanceLineColors.a * layer.opacity);
  // DECKGL_FILTER_COLOR(varyings.vLineColor, geometry);

  return varyings;
}

@fragment
fn fragmentMain(varyings: Varyings) -> @location(0) vec4<f32> {
  // var geometry: Geometry;
  // geometry.uv = unitPosition;

  let distToCenter = length(varyings.unitPosition) * varyings.outerRadiusPixels;
  let inCircle = select(
    smoothedge(distToCenter, varyings.outerRadiusPixels),
    step(distToCenter, varyings.outerRadiusPixels),
    scatterplot.antialiasing != 0
  );

  if (inCircle == 0.0) {
    // discard;
  }

  var fragColor: vec4<f32>;

  if (scatterplot.stroked != 0) {
    let isLine = select(
      smoothedge(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),
      step(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),
      scatterplot.antialiasing != 0
    );

    if (scatterplot.filled != 0) {
      fragColor = mix(varyings.vFillColor, varyings.vLineColor, isLine);
    } else {
      if (isLine == 0.0) {
        // discard;
      }
      fragColor = vec4<f32>(varyings.vLineColor.rgb, varyings.vLineColor.a * isLine);
    }
  } else if (scatterplot.filled == 0) {
    // discard;
  } else {
    fragColor = varyings.vFillColor;
  }

  fragColor.a *= inCircle;
  // DECKGL_FILTER_COLOR(fragColor, geometry);

  return fragColor;
  // return vec4<f32>(0, 0, 1, 1);
}
`;var ei=[0,0,0,255],Ar={radiusUnits:"meters",radiusScale:{type:"number",min:0,value:1},radiusMinPixels:{type:"number",min:0,value:0},radiusMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},lineWidthUnits:"meters",lineWidthScale:{type:"number",min:0,value:1},lineWidthMinPixels:{type:"number",min:0,value:0},lineWidthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},stroked:!1,filled:!0,billboard:!1,antialiasing:!0,getPosition:{type:"accessor",value:o=>o.position},getRadius:{type:"accessor",value:1},getFillColor:{type:"accessor",value:ei},getLineColor:{type:"accessor",value:ei},getLineWidth:{type:"accessor",value:1},strokeWidth:{deprecatedFor:"getLineWidth"},outline:{deprecatedFor:"stroked"},getColor:{deprecatedFor:["getFillColor","getLineColor"]}},wt=class extends D.Layer{getShaders(){return super.getShaders({vs:qo,fs:Qo,source:ti,modules:[D.project32,D.picking,Jo]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceRadius:{size:1,transition:!0,accessor:"getRadius",defaultValue:1},instanceFillColors:{size:this.props.colorFormat.length,transition:!0,type:"unorm8",accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:this.props.colorFormat.length,transition:!0,type:"unorm8",accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(t){super.updateState(t),t.changeFlags.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),this.getAttributeManager().invalidateAll())}draw({uniforms:t}){let{radiusUnits:e,radiusScale:i,radiusMinPixels:n,radiusMaxPixels:r,stroked:s,filled:a,billboard:l,antialiasing:c,lineWidthUnits:u,lineWidthScale:f,lineWidthMinPixels:d,lineWidthMaxPixels:g}=this.props,p={stroked:s,filled:a,billboard:l,antialiasing:c,radiusUnits:D.UNIT[e],radiusScale:i,radiusMinPixels:n,radiusMaxPixels:r,lineWidthUnits:D.UNIT[u],lineWidthScale:f,lineWidthMinPixels:d,lineWidthMaxPixels:g},h=this.state.model;h.shaderInputs.setProps({scatterplot:p}),h.draw(this.context.renderPass)}_getModel(){let t=[-1,-1,0,1,-1,0,-1,1,0,1,1,0];return new ue.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new ue.Geometry({topology:"triangle-strip",attributes:{positions:{size:3,value:new Float32Array(t)}}}),isInstanced:!0})}};wt.defaultProps=Ar;wt.layerName="ScatterplotLayer";var fe=wt;var k=P(L(),1);var We=P(I(),1);var li=P(L(),1),ci=P(I(),1);var nt={CLOCKWISE:1,COUNTER_CLOCKWISE:-1};function J(o,t,e={}){return oi(o,e)!==t?(Er(o,e),!0):!1}function oi(o,t={}){return Math.sign(de(o,t))}var Ne={x:0,y:1,z:2};function de(o,t={}){let{start:e=0,end:i=o.length,plane:n="xy"}=t,r=t.size||2,s=0,a=Ne[n[0]],l=Ne[n[1]];for(let c=e,u=i-r;c<i;c+=r)s+=(o[c+a]-o[u+a])*(o[c+l]+o[u+l]),u=c;return s/2}function Er(o,t){let{start:e=0,end:i=o.length,size:n=2}=t,r=(i-e)/n,s=Math.floor(r/2);for(let a=0;a<s;++a){let l=e+a*n,c=e+(r-1-a)*n;for(let u=0;u<n;++u){let f=o[l+u];o[l+u]=o[c+u],o[c+u]=f}}}function A(o,t){let e=t.length,i=o.length;if(i>0){let n=!0;for(let r=0;r<e;r++)if(o[i-e+r]!==t[r]){n=!1;break}if(n)return!1}for(let n=0;n<e;n++)o[i+n]=t[n];return!0}function Mt(o,t){let e=t.length;for(let i=0;i<e;i++)o[i]=t[i]}function V(o,t,e,i,n=[]){let r=i+t*e;for(let s=0;s<e;s++)n[s]=o[r+s];return n}function ge(o,t,e,i,n=[]){let r,s;if(e&8)r=(i[3]-o[1])/(t[1]-o[1]),s=3;else if(e&4)r=(i[1]-o[1])/(t[1]-o[1]),s=1;else if(e&2)r=(i[2]-o[0])/(t[0]-o[0]),s=2;else if(e&1)r=(i[0]-o[0])/(t[0]-o[0]),s=0;else return null;for(let a=0;a<o.length;a++)n[a]=(s&1)===a?i[s]:r*(t[a]-o[a])+o[a];return n}function bt(o,t){let e=0;return o[0]<t[0]?e|=1:o[0]>t[2]&&(e|=2),o[1]<t[1]?e|=4:o[1]>t[3]&&(e|=8),e}function Tt(o,t){let{size:e=2,broken:i=!1,gridResolution:n=10,gridOffset:r=[0,0],startIndex:s=0,endIndex:a=o.length}=t||{},l=(a-s)/e,c=[],u=[c],f=V(o,0,e,s),d,g,p=ri(f,n,r,[]),h=[];A(c,f);for(let m=1;m<l;m++){for(d=V(o,m,e,s,d),g=bt(d,p);g;){ge(f,d,g,p,h);let v=bt(h,p);v&&(ge(f,h,v,p,h),g=v),A(c,h),Mt(f,h),Or(p,n,g),i&&c.length>e&&(c=[],u.push(c),A(c,f)),g=bt(d,p)}A(c,d),Mt(f,d)}return i?u:u[0]}var ii=0,zr=1;function It(o,t=null,e){if(!o.length)return[];let{size:i=2,gridResolution:n=10,gridOffset:r=[0,0],edgeTypes:s=!1}=e||{},a=[],l=[{pos:o,types:s?new Array(o.length/i).fill(zr):null,holes:t||[]}],c=[[],[]],u=[];for(;l.length;){let{pos:f,types:d,holes:g}=l.shift();Fr(f,i,g[0]||f.length,c),u=ri(c[0],n,r,u);let p=bt(c[1],u);if(p){let h=ni(f,d,i,0,g[0]||f.length,u,p),m={pos:h[0].pos,types:h[0].types,holes:[]},v={pos:h[1].pos,types:h[1].types,holes:[]};l.push(m,v);for(let _=0;_<g.length;_++)h=ni(f,d,i,g[_],g[_+1]||f.length,u,p),h[0]&&(m.holes.push(m.pos.length),m.pos=pe(m.pos,h[0].pos),s&&(m.types=pe(m.types,h[0].types))),h[1]&&(v.holes.push(v.pos.length),v.pos=pe(v.pos,h[1].pos),s&&(v.types=pe(v.types,h[1].types)))}else{let h={positions:f};s&&(h.edgeTypes=d),g.length&&(h.holeIndices=g),a.push(h)}}return a}function ni(o,t,e,i,n,r,s){let a=(n-i)/e,l=[],c=[],u=[],f=[],d=[],g,p,h,m=V(o,a-1,e,i),v=Math.sign(s&8?m[1]-r[3]:m[0]-r[2]),_=t&&t[a-1],x=0,y=0;for(let C=0;C<a;C++)g=V(o,C,e,i,g),p=Math.sign(s&8?g[1]-r[3]:g[0]-r[2]),h=t&&t[i/e+C],p&&v&&v!==p&&(ge(m,g,s,r,d),A(l,d)&&u.push(_),A(c,d)&&f.push(_)),p<=0?(A(l,g)&&u.push(h),x-=p):u.length&&(u[u.length-1]=ii),p>=0?(A(c,g)&&f.push(h),y+=p):f.length&&(f[f.length-1]=ii),Mt(m,g),v=p,_=h;return[x?{pos:l,types:t&&u}:null,y?{pos:c,types:t&&f}:null]}function ri(o,t,e,i){let n=Math.floor((o[0]-e[0])/t)*t+e[0],r=Math.floor((o[1]-e[1])/t)*t+e[1];return i[0]=n,i[1]=r,i[2]=n+t,i[3]=r+t,i}function Or(o,t,e){e&8?(o[1]+=t,o[3]+=t):e&4?(o[1]-=t,o[3]-=t):e&2?(o[0]+=t,o[2]+=t):e&1&&(o[0]-=t,o[2]-=t)}function Fr(o,t,e,i){let n=1/0,r=-1/0,s=1/0,a=-1/0;for(let l=0;l<e;l+=t){let c=o[l],u=o[l+1];n=c<n?c:n,r=c>r?c:r,s=u<s?u:s,a=u>a?u:a}return i[0][0]=n,i[0][1]=s,i[1][0]=r,i[1][1]=a,i}function pe(o,t){for(let e=0;e<t.length;e++)o.push(t[e]);return o}var Dr=85.051129;function Ue(o,t){let{size:e=2,startIndex:i=0,endIndex:n=o.length,normalize:r=!0}=t||{},s=o.slice(i,n);si(s,e,0,n-i);let a=Tt(s,{size:e,broken:!0,gridResolution:360,gridOffset:[-180,-180]});if(r)for(let l of a)ai(l,e);return a}function Ge(o,t=null,e){let{size:i=2,normalize:n=!0,edgeTypes:r=!1}=e||{};t=t||[];let s=[],a=[],l=0,c=0;for(let f=0;f<=t.length;f++){let d=t[f]||o.length,g=c,p=kr(o,i,l,d);for(let h=p;h<d;h++)s[c++]=o[h];for(let h=l;h<p;h++)s[c++]=o[h];si(s,i,g,c),Nr(s,i,g,c,e?.maxLatitude),l=d,a[f]=c}a.pop();let u=It(s,a,{size:i,gridResolution:360,gridOffset:[-180,-180],edgeTypes:r});if(n)for(let f of u)ai(f.positions,i);return u}function kr(o,t,e,i){let n=-1,r=-1;for(let s=e+1;s<i;s+=t){let a=Math.abs(o[s]);a>n&&(n=a,r=s-1)}return r}function Nr(o,t,e,i,n=Dr){let r=o[e],s=o[i-t];if(Math.abs(r-s)>180){let a=V(o,0,t,e);a[0]+=Math.round((s-r)/360)*360,A(o,a),a[1]=Math.sign(a[1])*n,A(o,a),a[0]=r,A(o,a)}}function si(o,t,e,i){let n=o[0],r;for(let s=e;s<i;s+=t){r=o[s];let a=r-n;(a>180||a<-180)&&(r-=Math.round(a/360)*360),o[s]=n=r}}function ai(o,t){let e,i=o.length/t;for(let r=0;r<i&&(e=o[r*t],(e+180)%360===0);r++);let n=-Math.round(e/360)*360;if(n!==0)for(let r=0;r<i;r++)o[r*t]+=n}var At=class extends ci.Geometry{constructor(t){let{indices:e,attributes:i}=Gr(t);super({...t,indices:e,attributes:i})}};function Gr(o){let{radius:t,height:e=1,nradial:i=10}=o,{vertices:n}=o;n&&(li.log.assert(n.length>=i),n=n.flatMap(g=>[g[0],g[1]]),J(n,nt.COUNTER_CLOCKWISE));let r=e>0,s=i+1,a=r?s*3+1:i,l=Math.PI*2/i,c=new Uint16Array(r?i*3*2:0),u=new Float32Array(a*3),f=new Float32Array(a*3),d=0;if(r){for(let g=0;g<s;g++){let p=g*l,h=g%i,m=Math.sin(p),v=Math.cos(p);for(let _=0;_<2;_++)u[d+0]=n?n[h*2]:v*t,u[d+1]=n?n[h*2+1]:m*t,u[d+2]=(1/2-_)*e,f[d+0]=n?n[h*2]:v,f[d+1]=n?n[h*2+1]:m,d+=3}u[d+0]=u[d-3],u[d+1]=u[d-2],u[d+2]=u[d-1],d+=3}for(let g=r?0:1;g<s;g++){let p=Math.floor(g/2)*Math.sign(.5-g%2),h=p*l,m=(p+i)%i,v=Math.sin(h),_=Math.cos(h);u[d+0]=n?n[m*2]:_*t,u[d+1]=n?n[m*2+1]:v*t,u[d+2]=e/2,f[d+2]=1,d+=3}if(r){let g=0;for(let p=0;p<i;p++)c[g++]=p*2+0,c[g++]=p*2+2,c[g++]=p*2+0,c[g++]=p*2+1,c[g++]=p*2+1,c[g++]=p*2+3}return{indices:c,attributes:{POSITION:{size:3,value:u},NORMAL:{size:3,value:f}}}}var ui=`uniform columnUniforms {
  float radius;
  float angle;
  vec2 offset;
  bool extruded;
  bool stroked;
  bool isStroke;
  float coverage;
  float elevationScale;
  float edgeDistance;
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  highp int radiusUnits;
  highp int widthUnits;
} column;
`,fi={name:"column",vs:ui,fs:ui,uniformTypes:{radius:"f32",angle:"f32",offset:"vec2<f32>",extruded:"f32",stroked:"f32",isStroke:"f32",coverage:"f32",elevationScale:"f32",edgeDistance:"f32",widthScale:"f32",widthMinPixels:"f32",widthMaxPixels:"f32",radiusUnits:"i32",widthUnits:"i32"}};var di=`#version 300 es
#define SHADER_NAME column-layer-vertex-shader
in vec3 positions;
in vec3 normals;
in vec3 instancePositions;
in float instanceElevations;
in vec3 instancePositions64Low;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in float instanceStrokeWidths;
in vec3 instancePickingColors;
out vec4 vColor;
#ifdef FLAT_SHADING
out vec3 cameraPosition;
out vec4 position_commonspace;
#endif
void main(void) {
geometry.worldPosition = instancePositions;
vec4 color = column.isStroke ? instanceLineColors : instanceFillColors;
mat2 rotationMatrix = mat2(cos(column.angle), sin(column.angle), -sin(column.angle), cos(column.angle));
float elevation = 0.0;
float strokeOffsetRatio = 1.0;
if (column.extruded) {
elevation = instanceElevations * (positions.z + 1.0) / 2.0 * column.elevationScale;
} else if (column.stroked) {
float widthPixels = clamp(
project_size_to_pixel(instanceStrokeWidths * column.widthScale, column.widthUnits),
column.widthMinPixels, column.widthMaxPixels) / 2.0;
float halfOffset = project_pixel_size(widthPixels) / project_size(column.edgeDistance * column.coverage * column.radius);
if (column.isStroke) {
strokeOffsetRatio -= sign(positions.z) * halfOffset;
} else {
strokeOffsetRatio -= halfOffset;
}
}
float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);
float dotRadius = column.radius * column.coverage * shouldRender;
geometry.pickingColor = instancePickingColors;
vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);
vec3 centroidPosition64Low = instancePositions64Low;
vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + column.offset) * dotRadius;
if (column.radiusUnits == UNIT_METERS) {
offset = project_size(offset);
}
vec3 pos = vec3(offset, 0.);
DECKGL_FILTER_SIZE(pos, geometry);
gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);
geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
if (column.extruded && !column.isStroke) {
#ifdef FLAT_SHADING
cameraPosition = project.cameraPosition;
position_commonspace = geometry.position;
vColor = vec4(color.rgb, color.a * layer.opacity);
#else
vec3 lightColor = lighting_getLightColor(color.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, color.a * layer.opacity);
#endif
} else {
vColor = vec4(color.rgb, color.a * layer.opacity);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var gi=`#version 300 es
#define SHADER_NAME column-layer-fragment-shader
precision highp float;
out vec4 fragColor;
in vec4 vColor;
#ifdef FLAT_SHADING
in vec3 cameraPosition;
in vec4 position_commonspace;
#endif
void main(void) {
fragColor = vColor;
geometry.uv = vec2(0.);
#ifdef FLAT_SHADING
if (column.extruded && !column.isStroke && !bool(picking.isActive)) {
vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
fragColor.rgb = lighting_getLightColor(vColor.rgb, cameraPosition, position_commonspace.xyz, normal);
}
#endif
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var he=[0,0,0,255],Wr={diskResolution:{type:"number",min:4,value:20},vertices:null,radius:{type:"number",min:0,value:1e3},angle:{type:"number",value:0},offset:{type:"array",value:[0,0]},coverage:{type:"number",min:0,max:1,value:1},elevationScale:{type:"number",min:0,value:1},radiusUnits:"meters",lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,extruded:!0,wireframe:!1,filled:!0,stroked:!1,flatShading:!1,getPosition:{type:"accessor",value:o=>o.position},getFillColor:{type:"accessor",value:he},getLineColor:{type:"accessor",value:he},getLineWidth:{type:"accessor",value:1},getElevation:{type:"accessor",value:1e3},material:!0,getColor:{deprecatedFor:["getFillColor","getLineColor"]}},Et=class extends k.Layer{getShaders(){let t={},{flatShading:e}=this.props;return e&&(t.FLAT_SHADING=1),super.getShaders({vs:di,fs:gi,defines:t,modules:[k.project32,e?le:B,k.picking,fi]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceElevations:{size:1,transition:!0,accessor:"getElevation"},instanceFillColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getFillColor",defaultValue:he},instanceLineColors:{size:this.props.colorFormat.length,type:"unorm8",transition:!0,accessor:"getLineColor",defaultValue:he},instanceStrokeWidths:{size:1,accessor:"getLineWidth",transition:!0}})}updateState(t){super.updateState(t);let{props:e,oldProps:i,changeFlags:n}=t,r=n.extensionsChanged||e.flatShading!==i.flatShading;r&&(this.state.models?.forEach(a=>a.destroy()),this.setState(this._getModels()),this.getAttributeManager().invalidateAll());let s=this.getNumInstances();this.state.fillModel.setInstanceCount(s),this.state.wireframeModel.setInstanceCount(s),(r||e.diskResolution!==i.diskResolution||e.vertices!==i.vertices||(e.extruded||e.stroked)!==(i.extruded||i.stroked))&&this._updateGeometry(e)}getGeometry(t,e,i){let n=new At({radius:1,height:i?2:0,vertices:e,nradial:t}),r=0;if(e)for(let s=0;s<t;s++){let a=e[s],l=Math.sqrt(a[0]*a[0]+a[1]*a[1]);r+=l/t}else r=1;return this.setState({edgeDistance:Math.cos(Math.PI/t)*r}),n}_getModels(){let t=this.getShaders(),e=this.getAttributeManager().getBufferLayouts(),i=new We.Model(this.context.device,{...t,id:`${this.props.id}-fill`,bufferLayout:e,isInstanced:!0}),n=new We.Model(this.context.device,{...t,id:`${this.props.id}-wireframe`,bufferLayout:e,isInstanced:!0});return{fillModel:i,wireframeModel:n,models:[n,i]}}_updateGeometry({diskResolution:t,vertices:e,extruded:i,stroked:n}){let r=this.getGeometry(t,e,i||n);this.setState({fillVertexCount:r.attributes.POSITION.value.length/3});let s=this.state.fillModel,a=this.state.wireframeModel;s.setGeometry(r),s.setTopology("triangle-strip"),s.setIndexBuffer(null),a.setGeometry(r),a.setTopology("line-list")}draw({uniforms:t}){let{lineWidthUnits:e,lineWidthScale:i,lineWidthMinPixels:n,lineWidthMaxPixels:r,radiusUnits:s,elevationScale:a,extruded:l,filled:c,stroked:u,wireframe:f,offset:d,coverage:g,radius:p,angle:h}=this.props,m=this.state.fillModel,v=this.state.wireframeModel,{fillVertexCount:_,edgeDistance:x}=this.state,y={radius:p,angle:h/180*Math.PI,offset:d,extruded:l,stroked:u,coverage:g,elevationScale:a,edgeDistance:x,radiusUnits:k.UNIT[s],widthUnits:k.UNIT[e],widthScale:i,widthMinPixels:n,widthMaxPixels:r};l&&f&&(v.shaderInputs.setProps({column:{...y,isStroke:!0}}),v.draw(this.context.renderPass)),c&&(m.setVertexCount(_),m.shaderInputs.setProps({column:{...y,isStroke:!1}}),m.draw(this.context.renderPass)),!l&&u&&(m.setVertexCount(_*2/3),m.shaderInputs.setProps({column:{...y,isStroke:!0}}),m.draw(this.context.renderPass))}};Et.layerName="ColumnLayer";Et.defaultProps=Wr;var me=Et;var pi=P(L(),1),hi=P(I(),1);var Br={cellSize:{type:"number",min:0,value:1e3},offset:{type:"array",value:[1,1]}},Rt=class extends me{_updateGeometry(){let t=new hi.CubeGeometry;this.state.fillModel.setGeometry(t)}draw({uniforms:t}){let{elevationScale:e,extruded:i,offset:n,coverage:r,cellSize:s,angle:a,radiusUnits:l}=this.props,c=this.state.fillModel,u={radius:s/2,radiusUnits:pi.UNIT[l],angle:a,offset:n,extruded:i,stroked:!1,coverage:r,elevationScale:e,edgeDistance:1,isStroke:!1,widthUnits:0,widthScale:0,widthMinPixels:0,widthMaxPixels:0};c.shaderInputs.setProps({column:u}),c.draw(this.context.renderPass)}};Rt.layerName="GridCellLayer";Rt.defaultProps=Br;var mi=Rt;var H=P(L(),1),Si=P(I(),1),wi=P(I(),1);var yi=P(L(),1);function xi(o,t,e,i){let n;if(Array.isArray(o[0])){let r=o.length*t;n=new Array(r);for(let s=0;s<o.length;s++)for(let a=0;a<t;a++)n[s*t+a]=o[s][a]||0}else n=o;return e?Tt(n,{size:t,gridResolution:e}):i?Ue(n,{size:t}):n}var jr=1,Vr=2,Be=4,zt=class extends yi.Tesselator{constructor(t){super({...t,attributes:{positions:{size:3,padding:18,initialize:!0,type:t.fp64?Float64Array:Float32Array},segmentTypes:{size:1,type:Uint8ClampedArray}}})}get(t){return this.attributes[t]}getGeometryFromBuffer(t){return this.normalize?super.getGeometryFromBuffer(t):null}normalizeGeometry(t){return this.normalize?xi(t,this.positionSize,this.opts.resolution,this.opts.wrapLongitude):t}getGeometrySize(t){if(vi(t)){let i=0;for(let n of t)i+=this.getGeometrySize(n);return i}let e=this.getPathLength(t);return e<2?0:this.isClosed(t)?e<3?0:e+2:e}updateGeometryAttributes(t,e){if(e.geometrySize!==0)if(t&&vi(t))for(let i of t){let n=this.getGeometrySize(i);e.geometrySize=n,this.updateGeometryAttributes(i,e),e.vertexStart+=n}else this._updateSegmentTypes(t,e),this._updatePositions(t,e)}_updateSegmentTypes(t,e){let i=this.attributes.segmentTypes,n=t?this.isClosed(t):!1,{vertexStart:r,geometrySize:s}=e;i.fill(0,r,r+s),n?(i[r]=Be,i[r+s-2]=Be):(i[r]+=jr,i[r+s-2]+=Vr),i[r+s-1]=Be}_updatePositions(t,e){let{positions:i}=this.attributes;if(!i||!t)return;let{vertexStart:n,geometrySize:r}=e,s=new Array(3);for(let a=n,l=0;l<r;a++,l++)this.getPointOnPath(t,l,s),i[a*3]=s[0],i[a*3+1]=s[1],i[a*3+2]=s[2]}getPathLength(t){return t.length/this.positionSize}getPointOnPath(t,e,i=[]){let{positionSize:n}=this;e*n>=t.length&&(e+=1-t.length/n);let r=e*n;return i[0]=t[r],i[1]=t[r+1],i[2]=n===3&&t[r+2]||0,i}isClosed(t){if(!this.normalize)return Boolean(this.opts.loop);let{positionSize:e}=this,i=t.length-e;return t[0]===t[i]&&t[1]===t[i+1]&&(e===2||t[2]===t[i+2])}};function vi(o){return Array.isArray(o[0])}var Pi=`uniform pathUniforms {
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  float jointType;
  float capType;
  float miterLimit;
  bool billboard;
  highp int widthUnits;
} path;
`,_i={name:"path",vs:Pi,fs:Pi,uniformTypes:{widthScale:"f32",widthMinPixels:"f32",widthMaxPixels:"f32",jointType:"f32",capType:"f32",miterLimit:"f32",billboard:"f32",widthUnits:"i32"}};var Ci=`#version 300 es
#define SHADER_NAME path-layer-vertex-shader
in vec2 positions;
in float instanceTypes;
in vec3 instanceStartPositions;
in vec3 instanceEndPositions;
in vec3 instanceLeftPositions;
in vec3 instanceRightPositions;
in vec3 instanceLeftPositions64Low;
in vec3 instanceStartPositions64Low;
in vec3 instanceEndPositions64Low;
in vec3 instanceRightPositions64Low;
in float instanceStrokeWidths;
in vec4 instanceColors;
in vec3 instancePickingColors;
uniform float opacity;
out vec4 vColor;
out vec2 vCornerOffset;
out float vMiterLength;
out vec2 vPathPosition;
out float vPathLength;
out float vJointType;
const float EPSILON = 0.001;
const vec3 ZERO_OFFSET = vec3(0.0);
float flipIfTrue(bool flag) {
return -(float(flag) * 2. - 1.);
}
vec3 getLineJoinOffset(
vec3 prevPoint, vec3 currPoint, vec3 nextPoint,
vec2 width
) {
bool isEnd = positions.x > 0.0;
float sideOfPath = positions.y;
float isJoint = float(sideOfPath == 0.0);
vec3 deltaA3 = (currPoint - prevPoint);
vec3 deltaB3 = (nextPoint - currPoint);
mat3 rotationMatrix;
bool needsRotation = !path.billboard && project_needs_rotation(currPoint, rotationMatrix);
if (needsRotation) {
deltaA3 = deltaA3 * rotationMatrix;
deltaB3 = deltaB3 * rotationMatrix;
}
vec2 deltaA = deltaA3.xy / width;
vec2 deltaB = deltaB3.xy / width;
float lenA = length(deltaA);
float lenB = length(deltaB);
vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);
vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);
vec2 perpA = vec2(-dirA.y, dirA.x);
vec2 perpB = vec2(-dirB.y, dirB.x);
vec2 tangent = dirA + dirB;
tangent = length(tangent) > 0. ? normalize(tangent) : perpA;
vec2 miterVec = vec2(-tangent.y, tangent.x);
vec2 dir = isEnd ? dirA : dirB;
vec2 perp = isEnd ? perpA : perpB;
float L = isEnd ? lenA : lenB;
float sinHalfA = abs(dot(miterVec, perp));
float cosHalfA = abs(dot(dirA, miterVec));
float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);
float cornerPosition = sideOfPath * turnDirection;
float miterSize = 1.0 / max(sinHalfA, EPSILON);
miterSize = mix(
min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),
miterSize,
step(0.0, cornerPosition)
);
vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))
* (sideOfPath + isJoint * turnDirection);
bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));
bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));
bool isCap = isStartCap || isEndCap;
if (isCap) {
offsetVec = mix(perp * sideOfPath, dir * path.capType * 4.0 * flipIfTrue(isStartCap), isJoint);
vJointType = path.capType;
} else {
vJointType = path.jointType;
}
vPathLength = L;
vCornerOffset = offsetVec;
vMiterLength = dot(vCornerOffset, miterVec * turnDirection);
vMiterLength = isCap ? isJoint : vMiterLength;
vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);
vPathPosition = vec2(
dot(offsetFromStartOfPath, perp),
dot(offsetFromStartOfPath, dir)
);
geometry.uv = vPathPosition;
float isValid = step(instanceTypes, 3.5);
vec3 offset = vec3(offsetVec * width * isValid, 0.0);
if (needsRotation) {
offset = rotationMatrix * offset;
}
return offset;
}
void clipLine(inout vec4 position, vec4 refPosition) {
if (position.w < EPSILON) {
float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);
position = refPosition + (position - refPosition) * r;
}
}
void main() {
geometry.pickingColor = instancePickingColors;
vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);
float isEnd = positions.x;
vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);
vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);
vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);
vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);
vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);
vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);
geometry.worldPosition = currPosition;
vec2 widthPixels = vec2(clamp(
project_size_to_pixel(instanceStrokeWidths * path.widthScale, path.widthUnits),
path.widthMinPixels, path.widthMaxPixels) / 2.0);
vec3 width;
if (path.billboard) {
vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);
vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);
vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);
clipLine(prevPositionScreen, currPositionScreen);
clipLine(nextPositionScreen, currPositionScreen);
clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));
width = vec3(widthPixels, 0.0);
DECKGL_FILTER_SIZE(width, geometry);
vec3 offset = getLineJoinOffset(
prevPositionScreen.xyz / prevPositionScreen.w,
currPositionScreen.xyz / currPositionScreen.w,
nextPositionScreen.xyz / nextPositionScreen.w,
project_pixel_size_to_clipspace(width.xy)
);
DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);
gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);
} else {
prevPosition = project_position(prevPosition, prevPosition64Low);
currPosition = project_position(currPosition, currPosition64Low);
nextPosition = project_position(nextPosition, nextPosition64Low);
width = vec3(project_pixel_size(widthPixels), 0.0);
DECKGL_FILTER_SIZE(width, geometry);
vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);
geometry.position = vec4(currPosition + offset, 1.0);
gl_Position = project_common_position_to_clipspace(geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var Li=`#version 300 es
#define SHADER_NAME path-layer-fragment-shader
precision highp float;
in vec4 vColor;
in vec2 vCornerOffset;
in float vMiterLength;
in vec2 vPathPosition;
in float vPathLength;
in float vJointType;
out vec4 fragColor;
void main(void) {
geometry.uv = vPathPosition;
if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {
if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {
discard;
}
if (vJointType < 0.5 && vMiterLength > path.miterLimit + 1.0) {
discard;
}
}
fragColor = vColor;
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var Mi=[0,0,0,255],Hr={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},jointRounded:!1,capRounded:!1,miterLimit:{type:"number",min:0,value:4},billboard:!1,_pathType:null,getPath:{type:"accessor",value:o=>o.path},getColor:{type:"accessor",value:Mi},getWidth:{type:"accessor",value:1},rounded:{deprecatedFor:["jointRounded","capRounded"]}},je={enter:(o,t)=>t.length?t.subarray(t.length-o.length):o},Ot=class extends H.Layer{getShaders(){return super.getShaders({vs:Ci,fs:Li,modules:[H.project32,H.picking,_i]})}get wrapLongitude(){return!1}getBounds(){return this.getAttributeManager()?.getBounds(["vertexPositions"])}initializeState(){this.getAttributeManager().addInstanced({vertexPositions:{size:3,vertexOffset:1,type:"float64",fp64:this.use64bitPositions(),transition:je,accessor:"getPath",update:this.calculatePositions,noAlloc:!0,shaderAttributes:{instanceLeftPositions:{vertexOffset:0},instanceStartPositions:{vertexOffset:1},instanceEndPositions:{vertexOffset:2},instanceRightPositions:{vertexOffset:3}}},instanceTypes:{size:1,type:"uint8",update:this.calculateSegmentTypes,noAlloc:!0},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:je,defaultValue:1},instanceColors:{size:this.props.colorFormat.length,type:"unorm8",accessor:"getColor",transition:je,defaultValue:Mi},instancePickingColors:{size:4,type:"uint8",accessor:(i,{index:n,target:r})=>this.encodePickingColor(i&&i.__source?i.__source.index:n,r)}}),this.setState({pathTesselator:new zt({fp64:this.use64bitPositions()})})}updateState(t){super.updateState(t);let{props:e,changeFlags:i}=t,n=this.getAttributeManager();if(i.dataChanged||i.updateTriggersChanged&&(i.updateTriggersChanged.all||i.updateTriggersChanged.getPath)){let{pathTesselator:s}=this.state,a=e.data.attributes||{};s.updateGeometry({data:e.data,geometryBuffer:a.getPath,buffers:a,normalize:!e._pathType,loop:e._pathType==="loop",getGeometry:e.getPath,positionFormat:e.positionFormat,wrapLongitude:e.wrapLongitude,resolution:this.context.viewport.resolution,dataChanged:i.dataChanged}),this.setState({numInstances:s.instanceCount,startIndices:s.vertexStarts}),i.dataChanged||n.invalidateAll()}i.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),n.invalidateAll())}getPickingInfo(t){let e=super.getPickingInfo(t),{index:i}=e,n=this.props.data;return n[0]&&n[0].__source&&(e.object=n.find(r=>r.__source.index===i)),e}disablePickingIndex(t){let e=this.props.data;if(e[0]&&e[0].__source)for(let i=0;i<e.length;i++)e[i].__source.index===t&&this._disablePickingIndex(i);else super.disablePickingIndex(t)}draw({uniforms:t}){let{jointRounded:e,capRounded:i,billboard:n,miterLimit:r,widthUnits:s,widthScale:a,widthMinPixels:l,widthMaxPixels:c}=this.props,u=this.state.model,f={jointType:Number(e),capType:Number(i),billboard:n,widthUnits:H.UNIT[s],widthScale:a,miterLimit:r,widthMinPixels:l,widthMaxPixels:c};u.shaderInputs.setProps({path:f}),u.draw(this.context.renderPass)}_getModel(){let t=[0,1,2,1,4,2,1,3,4,3,5,4],e=[0,0,0,-1,0,1,1,-1,1,1,1,0];return new wi.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new Si.Geometry({topology:"triangle-list",attributes:{indices:new Uint16Array(t),positions:{value:new Float32Array(e),size:2}}}),isInstanced:!0})}calculatePositions(t){let{pathTesselator:e}=this.state;t.startIndices=e.vertexStarts,t.value=e.get("positions")}calculateSegmentTypes(t){let{pathTesselator:e}=this.state;t.startIndices=e.vertexStarts,t.value=e.get("segmentTypes")}};Ot.defaultProps=Hr;Ot.layerName="PathLayer";var rt=Ot;var ct=P(L(),1);var O=P(L(),1),Q=P(I(),1);var Di=P(Ei(),1);var _e=nt.CLOCKWISE,Ri=nt.COUNTER_CLOCKWISE,Z={isClosed:!0};function as(o){if(o=o&&o.positions||o,!Array.isArray(o)&&!ArrayBuffer.isView(o))throw new Error("invalid polygon")}function at(o){return"positions"in o?o.positions:o}function Nt(o){return"holeIndices"in o?o.holeIndices:null}function ls(o){return Array.isArray(o[0])}function cs(o){return o.length>=1&&o[0].length>=2&&Number.isFinite(o[0][0])}function us(o){let t=o[0],e=o[o.length-1];return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function fs(o,t,e,i){for(let n=0;n<t;n++)if(o[e+n]!==o[i-t+n])return!1;return!0}function zi(o,t,e,i,n){let r=t,s=e.length;for(let a=0;a<s;a++)for(let l=0;l<i;l++)o[r++]=e[a][l]||0;if(!us(e))for(let a=0;a<i;a++)o[r++]=e[0][a]||0;return Z.start=t,Z.end=r,Z.size=i,J(o,n,Z),r}function Oi(o,t,e,i,n=0,r,s){r=r||e.length;let a=r-n;if(a<=0)return t;let l=t;for(let c=0;c<a;c++)o[l++]=e[n+c];if(!fs(e,i,n,r))for(let c=0;c<i;c++)o[l++]=e[n+c];return Z.start=t,Z.end=l,Z.size=i,J(o,s,Z),l}function Ce(o,t){as(o);let e=[],i=[];if("positions"in o){let{positions:n,holeIndices:r}=o;if(r){let s=0;for(let a=0;a<=r.length;a++)s=Oi(e,s,n,t,r[a-1],r[a],a===0?_e:Ri),i.push(s);return i.pop(),{positions:e,holeIndices:i}}o=n}if(!ls(o))return Oi(e,0,o,t,0,e.length,_e),e;if(!cs(o)){let n=0;for(let[r,s]of o.entries())n=zi(e,n,s,t,r===0?_e:Ri),i.push(n);return i.pop(),{positions:e,holeIndices:i}}return zi(e,0,o,t,_e),e}function Xe(o,t,e){let i=o.length/3,n=0;for(let r=0;r<i;r++){let s=(r+1)%i;n+=o[r*3+t]*o[s*3+e],n-=o[s*3+t]*o[r*3+e]}return Math.abs(n/2)}function Fi(o,t,e,i){let n=o.length/3;for(let r=0;r<n;r++){let s=r*3,a=o[s+0],l=o[s+1],c=o[s+2];o[s+t]=a,o[s+e]=l,o[s+i]=c}}function ki(o,t,e,i){let n=Nt(o);n&&(n=n.map(a=>a/t));let r=at(o),s=i&&t===3;if(e){let a=r.length;r=r.slice();let l=[];for(let c=0;c<a;c+=t){l[0]=r[c],l[1]=r[c+1],s&&(l[2]=r[c+2]);let u=e(l);r[c]=u[0],r[c+1]=u[1],s&&(r[c+2]=u[2])}}if(s){let a=Xe(r,0,1),l=Xe(r,0,2),c=Xe(r,1,2);if(!a&&!l&&!c)return[];a>l&&a>c||(l>c?(e||(r=r.slice()),Fi(r,0,2,1)):(e||(r=r.slice()),Fi(r,2,0,1)))}return(0,Di.default)(r,n,t)}var Gi=P(L(),1);var Ut=class extends Gi.Tesselator{constructor(t){let{fp64:e,IndexType:i=Uint32Array}=t;super({...t,attributes:{positions:{size:3,type:e?Float64Array:Float32Array},vertexValid:{type:Uint16Array,size:1},indices:{type:i,size:1}}})}get(t){let{attributes:e}=this;return t==="indices"?e.indices&&e.indices.subarray(0,this.vertexCount):e[t]}updateGeometry(t){super.updateGeometry(t);let e=this.buffers.indices;if(e)this.vertexCount=(e.value||e).length;else if(this.data&&!this.getGeometry)throw new Error("missing indices buffer")}normalizeGeometry(t){if(this.normalize){let e=Ce(t,this.positionSize);return this.opts.resolution?It(at(e),Nt(e),{size:this.positionSize,gridResolution:this.opts.resolution,edgeTypes:!0}):this.opts.wrapLongitude?Ge(at(e),Nt(e),{size:this.positionSize,maxLatitude:86,edgeTypes:!0}):e}return t}getGeometrySize(t){if(Ui(t)){let e=0;for(let i of t)e+=this.getGeometrySize(i);return e}return at(t).length/this.positionSize}getGeometryFromBuffer(t){return this.normalize||!this.buffers.indices?super.getGeometryFromBuffer(t):null}updateGeometryAttributes(t,e){if(t&&Ui(t))for(let i of t){let n=this.getGeometrySize(i);e.geometrySize=n,this.updateGeometryAttributes(i,e),e.vertexStart+=n,e.indexStart=this.indexStarts[e.geometryIndex+1]}else{let i=t;this._updateIndices(i,e),this._updatePositions(i,e),this._updateVertexValid(i,e)}}_updateIndices(t,{geometryIndex:e,vertexStart:i,indexStart:n}){let{attributes:r,indexStarts:s,typedArrayManager:a}=this,l=r.indices;if(!l||!t)return;let c=n,u=ki(t,this.positionSize,this.opts.preproject,this.opts.full3d);l=a.allocate(l,n+u.length,{copy:!0});for(let f=0;f<u.length;f++)l[c++]=u[f]+i;s[e+1]=n+u.length,r.indices=l}_updatePositions(t,{vertexStart:e,geometrySize:i}){let{attributes:{positions:n},positionSize:r}=this;if(!n||!t)return;let s=at(t);for(let a=e,l=0;l<i;a++,l++){let c=s[l*r],u=s[l*r+1],f=r>2?s[l*r+2]:0;n[a*3]=c,n[a*3+1]=u,n[a*3+2]=f}}_updateVertexValid(t,{vertexStart:e,geometrySize:i}){let{positionSize:n}=this,r=this.attributes.vertexValid,s=t&&Nt(t);if(t&&t.edgeTypes?r.set(t.edgeTypes,e):r.fill(1,e,e+i),s)for(let a=0;a<s.length;a++)r[e+s[a]/n-1]=0;r[e+i-1]=0}};function Ui(o){return Array.isArray(o)&&o.length>0&&!Number.isFinite(o[0])}var Wi=`uniform solidPolygonUniforms {
  bool extruded;
  bool isWireframe;
  float elevationScale;
} solidPolygon;
`,Bi={name:"solidPolygon",vs:Wi,fs:Wi,uniformTypes:{extruded:"f32",isWireframe:"f32",elevationScale:"f32"}};var Le=`in vec4 fillColors;
in vec4 lineColors;
in vec3 pickingColors;
out vec4 vColor;
struct PolygonProps {
vec3 positions;
vec3 positions64Low;
vec3 normal;
float elevations;
};
vec3 project_offset_normal(vec3 vector) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {
return normalize(vector * project.commonUnitsPerWorldUnit);
}
return project_normal(vector);
}
void calculatePosition(PolygonProps props) {
vec3 pos = props.positions;
vec3 pos64Low = props.positions64Low;
vec3 normal = props.normal;
vec4 colors = solidPolygon.isWireframe ? lineColors : fillColors;
geometry.worldPosition = props.positions;
geometry.pickingColor = pickingColors;
if (solidPolygon.extruded) {
pos.z += props.elevations * solidPolygon.elevationScale;
}
gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
if (solidPolygon.extruded) {
#ifdef IS_SIDE_VERTEX
normal = project_offset_normal(normal);
#else
normal = project_normal(normal);
#endif
geometry.normal = normal;
vec3 lightColor = lighting_getLightColor(colors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, colors.a * layer.opacity);
} else {
vColor = vec4(colors.rgb, colors.a * layer.opacity);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;var ji=`#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader
in vec3 vertexPositions;
in vec3 vertexPositions64Low;
in float elevations;
${Le}
void main(void) {
PolygonProps props;
props.positions = vertexPositions;
props.positions64Low = vertexPositions64Low;
props.elevations = elevations;
props.normal = vec3(0.0, 0.0, 1.0);
calculatePosition(props);
}
`;var Vi=`#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader-side
#define IS_SIDE_VERTEX
in vec2 positions;
in vec3 vertexPositions;
in vec3 nextVertexPositions;
in vec3 vertexPositions64Low;
in vec3 nextVertexPositions64Low;
in float elevations;
in float instanceVertexValid;
${Le}
void main(void) {
if(instanceVertexValid < 0.5){
gl_Position = vec4(0.);
return;
}
PolygonProps props;
vec3 pos;
vec3 pos64Low;
vec3 nextPos;
vec3 nextPos64Low;
#if RING_WINDING_ORDER_CW == 1
pos = vertexPositions;
pos64Low = vertexPositions64Low;
nextPos = nextVertexPositions;
nextPos64Low = nextVertexPositions64Low;
#else
pos = nextVertexPositions;
pos64Low = nextVertexPositions64Low;
nextPos = vertexPositions;
nextPos64Low = vertexPositions64Low;
#endif
props.positions = mix(pos, nextPos, positions.x);
props.positions64Low = mix(pos64Low, nextPos64Low, positions.x);
props.normal = vec3(
pos.y - nextPos.y + (pos64Low.y - nextPos64Low.y),
nextPos.x - pos.x + (nextPos64Low.x - pos64Low.x),
0.0);
props.elevations = elevations * positions.y;
calculatePosition(props);
}
`;var Hi=`#version 300 es
#define SHADER_NAME solid-polygon-layer-fragment-shader
precision highp float;
in vec4 vColor;
out vec4 fragColor;
void main(void) {
fragColor = vColor;
geometry.uv = vec2(0.);
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var we=[0,0,0,255],ds={filled:!0,extruded:!1,wireframe:!1,_normalize:!0,_windingOrder:"CW",_full3d:!1,elevationScale:{type:"number",min:0,value:1},getPolygon:{type:"accessor",value:o=>o.polygon},getElevation:{type:"accessor",value:1e3},getFillColor:{type:"accessor",value:we},getLineColor:{type:"accessor",value:we},material:!0},Se={enter:(o,t)=>t.length?t.subarray(t.length-o.length):o},Gt=class extends O.Layer{getShaders(t){return super.getShaders({vs:t==="top"?ji:Vi,fs:Hi,defines:{RING_WINDING_ORDER_CW:!this.props._normalize&&this.props._windingOrder==="CCW"?0:1},modules:[O.project32,B,O.picking,Bi]})}get wrapLongitude(){return!1}getBounds(){return this.getAttributeManager()?.getBounds(["vertexPositions"])}initializeState(){let{viewport:t}=this.context,{coordinateSystem:e}=this.props,{_full3d:i}=this.props;t.isGeospatial&&e===O.COORDINATE_SYSTEM.DEFAULT&&(e=O.COORDINATE_SYSTEM.LNGLAT);let n;e===O.COORDINATE_SYSTEM.LNGLAT&&(i?n=t.projectPosition.bind(t):n=t.projectFlat.bind(t)),this.setState({numInstances:0,polygonTesselator:new Ut({preproject:n,fp64:this.use64bitPositions(),IndexType:Uint32Array})});let r=this.getAttributeManager(),s=!0;r.remove(["instancePickingColors"]),r.add({indices:{size:1,isIndexed:!0,update:this.calculateIndices,noAlloc:s},vertexPositions:{size:3,type:"float64",stepMode:"dynamic",fp64:this.use64bitPositions(),transition:Se,accessor:"getPolygon",update:this.calculatePositions,noAlloc:s,shaderAttributes:{nextVertexPositions:{vertexOffset:1}}},instanceVertexValid:{size:1,type:"uint16",stepMode:"instance",update:this.calculateVertexValid,noAlloc:s},elevations:{size:1,stepMode:"dynamic",transition:Se,accessor:"getElevation"},fillColors:{size:this.props.colorFormat.length,type:"unorm8",stepMode:"dynamic",transition:Se,accessor:"getFillColor",defaultValue:we},lineColors:{size:this.props.colorFormat.length,type:"unorm8",stepMode:"dynamic",transition:Se,accessor:"getLineColor",defaultValue:we},pickingColors:{size:4,type:"uint8",stepMode:"dynamic",accessor:(a,{index:l,target:c})=>this.encodePickingColor(a&&a.__source?a.__source.index:l,c)}})}getPickingInfo(t){let e=super.getPickingInfo(t),{index:i}=e,n=this.props.data;return n[0]&&n[0].__source&&(e.object=n.find(r=>r.__source.index===i)),e}disablePickingIndex(t){let e=this.props.data;if(e[0]&&e[0].__source)for(let i=0;i<e.length;i++)e[i].__source.index===t&&this._disablePickingIndex(i);else super.disablePickingIndex(t)}draw({uniforms:t}){let{extruded:e,filled:i,wireframe:n,elevationScale:r}=this.props,{topModel:s,sideModel:a,wireframeModel:l,polygonTesselator:c}=this.state,u={extruded:Boolean(e),elevationScale:r,isWireframe:!1};l&&n&&(l.setInstanceCount(c.instanceCount-1),l.shaderInputs.setProps({solidPolygon:{...u,isWireframe:!0}}),l.draw(this.context.renderPass)),a&&i&&(a.setInstanceCount(c.instanceCount-1),a.shaderInputs.setProps({solidPolygon:u}),a.draw(this.context.renderPass)),s&&i&&(s.setVertexCount(c.vertexCount),s.shaderInputs.setProps({solidPolygon:u}),s.draw(this.context.renderPass))}updateState(t){super.updateState(t),this.updateGeometry(t);let{props:e,oldProps:i,changeFlags:n}=t,r=this.getAttributeManager();(n.extensionsChanged||e.filled!==i.filled||e.extruded!==i.extruded)&&(this.state.models?.forEach(a=>a.destroy()),this.setState(this._getModels()),r.invalidateAll())}updateGeometry({props:t,oldProps:e,changeFlags:i}){if(i.dataChanged||i.updateTriggersChanged&&(i.updateTriggersChanged.all||i.updateTriggersChanged.getPolygon)){let{polygonTesselator:r}=this.state,s=t.data.attributes||{};r.updateGeometry({data:t.data,normalize:t._normalize,geometryBuffer:s.getPolygon,buffers:s,getGeometry:t.getPolygon,positionFormat:t.positionFormat,wrapLongitude:t.wrapLongitude,resolution:this.context.viewport.resolution,fp64:this.use64bitPositions(),dataChanged:i.dataChanged,full3d:t._full3d}),this.setState({numInstances:r.instanceCount,startIndices:r.vertexStarts}),i.dataChanged||this.getAttributeManager().invalidateAll()}}_getModels(){let{id:t,filled:e,extruded:i}=this.props,n,r,s;if(e){let a=this.getShaders("top");a.defines.NON_INSTANCED_MODEL=1;let l=this.getAttributeManager().getBufferLayouts({isInstanced:!1});n=new Q.Model(this.context.device,{...a,id:`${t}-top`,topology:"triangle-list",bufferLayout:l,isIndexed:!0,userData:{excludeAttributes:{instanceVertexValid:!0}}})}if(i){let a=this.getAttributeManager().getBufferLayouts({isInstanced:!0});r=new Q.Model(this.context.device,{...this.getShaders("side"),id:`${t}-side`,bufferLayout:a,geometry:new Q.Geometry({topology:"triangle-strip",attributes:{positions:{size:2,value:new Float32Array([1,0,0,0,1,1,0,1])}}}),isInstanced:!0,userData:{excludeAttributes:{indices:!0}}}),s=new Q.Model(this.context.device,{...this.getShaders("side"),id:`${t}-wireframe`,bufferLayout:a,geometry:new Q.Geometry({topology:"line-strip",attributes:{positions:{size:2,value:new Float32Array([1,0,0,0,0,1,1,1])}}}),isInstanced:!0,userData:{excludeAttributes:{indices:!0}}})}return{models:[r,s,n].filter(Boolean),topModel:n,sideModel:r,wireframeModel:s}}calculateIndices(t){let{polygonTesselator:e}=this.state;t.startIndices=e.indexStarts,t.value=e.get("indices")}calculatePositions(t){let{polygonTesselator:e}=this.state;t.startIndices=e.vertexStarts,t.value=e.get("positions")}calculateVertexValid(t){t.value=this.state.polygonTesselator.get("vertexValid")}};Gt.defaultProps=ds;Gt.layerName="SolidPolygonLayer";var lt=Gt;function Me({data:o,getIndex:t,dataRange:e,replace:i}){let{startRow:n=0,endRow:r=1/0}=e,s=o.length,a=s,l=s;for(let d=0;d<s;d++){let g=t(o[d]);if(a>d&&g>=n&&(a=d),g>=r){l=d;break}}let c=a,f=l-a!==i.length?o.slice(l):void 0;for(let d=0;d<i.length;d++)o[c++]=i[d];if(f){for(let d=0;d<f.length;d++)o[c++]=f[d];o.length=c}return{startRow:a,endRow:a+i.length}}var Zi=[0,0,0,255],gs=[0,0,0,255],ps={stroked:!0,filled:!0,extruded:!1,elevationScale:1,wireframe:!1,_normalize:!0,_windingOrder:"CW",lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,lineJointRounded:!1,lineMiterLimit:4,getPolygon:{type:"accessor",value:o=>o.polygon},getFillColor:{type:"accessor",value:gs},getLineColor:{type:"accessor",value:Zi},getLineWidth:{type:"accessor",value:1},getElevation:{type:"accessor",value:1e3},material:!0},Wt=class extends ct.CompositeLayer{initializeState(){this.state={paths:[],pathsDiff:null},this.props.getLineDashArray&&ct.log.removed("getLineDashArray","PathStyleExtension")()}updateState({changeFlags:t}){let e=t.dataChanged||t.updateTriggersChanged&&(t.updateTriggersChanged.all||t.updateTriggersChanged.getPolygon);if(e&&Array.isArray(t.dataChanged)){let i=this.state.paths.slice(),n=t.dataChanged.map(r=>Me({data:i,getIndex:s=>s.__source.index,dataRange:r,replace:this._getPaths(r)}));this.setState({paths:i,pathsDiff:n})}else e&&this.setState({paths:this._getPaths(),pathsDiff:null})}_getPaths(t={}){let{data:e,getPolygon:i,positionFormat:n,_normalize:r}=this.props,s=[],a=n==="XY"?2:3,{startRow:l,endRow:c}=t,{iterable:u,objectInfo:f}=(0,ct.createIterable)(e,l,c);for(let d of u){f.index++;let g=i(d,f);r&&(g=Ce(g,a));let{holeIndices:p}=g,h=g.positions||g;if(p)for(let m=0;m<=p.length;m++){let v=h.slice(p[m-1]||0,p[m]||h.length);s.push(this.getSubLayerRow({path:v},d,f.index))}else s.push(this.getSubLayerRow({path:h},d,f.index))}return s}renderLayers(){let{data:t,_dataDiff:e,stroked:i,filled:n,extruded:r,wireframe:s,_normalize:a,_windingOrder:l,elevationScale:c,transitions:u,positionFormat:f}=this.props,{lineWidthUnits:d,lineWidthScale:g,lineWidthMinPixels:p,lineWidthMaxPixels:h,lineJointRounded:m,lineMiterLimit:v,lineDashJustified:_}=this.props,{getFillColor:x,getLineColor:y,getLineWidth:C,getLineDashArray:S,getElevation:N,getPolygon:E,updateTriggers:M,material:Jt}=this.props,{paths:et,pathsDiff:pt}=this.state,T=this.getSubLayerClass("fill",lt),b=this.getSubLayerClass("stroke",rt),qt=this.shouldRenderSubLayer("fill",et)&&new T({_dataDiff:e,extruded:r,elevationScale:c,filled:n,wireframe:s,_normalize:a,_windingOrder:l,getElevation:N,getFillColor:x,getLineColor:r&&s?y:Zi,material:Jt,transitions:u},this.getSubLayerProps({id:"fill",updateTriggers:M&&{getPolygon:M.getPolygon,getElevation:M.getElevation,getFillColor:M.getFillColor,lineColors:r&&s,getLineColor:M.getLineColor}}),{data:t,positionFormat:f,getPolygon:E}),Oe=!r&&i&&this.shouldRenderSubLayer("stroke",et)&&new b({_dataDiff:pt&&(()=>pt),widthUnits:d,widthScale:g,widthMinPixels:p,widthMaxPixels:h,jointRounded:m,miterLimit:v,dashJustified:_,_pathType:"loop",transitions:u&&{getWidth:u.getLineWidth,getColor:u.getLineColor,getPath:u.getPolygon},getColor:this.getSubLayerAccessor(y),getWidth:this.getSubLayerAccessor(C),getDashArray:this.getSubLayerAccessor(S)},this.getSubLayerProps({id:"stroke",updateTriggers:M&&{getWidth:M.getLineWidth,getColor:M.getLineColor,getDashArray:M.getLineDashArray}}),{data:et,positionFormat:f,getPath:Rn=>Rn.path});return[!r&&qt,Oe,r&&qt]}};Wt.layerName="PolygonLayer";Wt.defaultProps=ps;var Ki=Wt;var An=P(L(),1);function Xi(o,t){if(!o)return null;let e="startIndices"in o?o.startIndices[t]:t,i=o.featureIds.value[e];return e!==-1?hs(o,i,e):null}function hs(o,t,e){let i={properties:{...o.properties[t]}};for(let n in o.numericProps)i.properties[n]=o.numericProps[n].value[e];return i}function $i(o,t){let e={points:null,lines:null,polygons:null};for(let i in e){let n=o[i].globalFeatureIds.value;e[i]=new Uint8ClampedArray(n.length*4);let r=[];for(let s=0;s<n.length;s++)t(n[s],r),e[i][s*4+0]=r[0],e[i][s*4+1]=r[1],e[i][s*4+2]=r[2],e[i][s*4+3]=255}return e}var ft=P(L(),1);var tn=P(L(),1);var Yi=`uniform sdfUniforms {
  float gamma;
  bool enabled;
  float buffer;
  float outlineBuffer;
  vec4 outlineColor;
} sdf;
`,Ji={name:"sdf",vs:Yi,fs:Yi,uniformTypes:{gamma:"f32",enabled:"f32",buffer:"f32",outlineBuffer:"f32",outlineColor:"vec4<f32>"}};var qi=`#version 300 es
#define SHADER_NAME multi-icon-layer-fragment-shader
precision highp float;
uniform sampler2D iconsTexture;
in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;
out vec4 fragColor;
void main(void) {
geometry.uv = uv;
if (!bool(picking.isActive)) {
float alpha = texture(iconsTexture, vTextureCoords).a;
vec4 color = vColor;
if (sdf.enabled) {
float distance = alpha;
alpha = smoothstep(sdf.buffer - sdf.gamma, sdf.buffer + sdf.gamma, distance);
if (sdf.outlineBuffer > 0.0) {
float inFill = alpha;
float inBorder = smoothstep(sdf.outlineBuffer - sdf.gamma, sdf.outlineBuffer + sdf.gamma, distance);
color = mix(sdf.outlineColor, vColor, inFill);
alpha = inBorder;
}
}
float a = alpha * color.a;
if (a < icon.alphaCutoff) {
discard;
}
fragColor = vec4(color.rgb, a * layer.opacity);
}
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var $e=192/256,Qi=[],ms={getIconOffsets:{type:"accessor",value:o=>o.offsets},alphaCutoff:.001,smoothing:.1,outlineWidth:0,outlineColor:{type:"color",value:[0,0,0,255]}},Bt=class extends it{getShaders(){let t=super.getShaders();return{...t,modules:[...t.modules,Ji],fs:qi}}initializeState(){super.initializeState(),this.getAttributeManager().addInstanced({instanceOffsets:{size:2,accessor:"getIconOffsets"},instancePickingColors:{type:"uint8",size:3,accessor:(e,{index:i,target:n})=>this.encodePickingColor(i,n)}})}updateState(t){super.updateState(t);let{props:e,oldProps:i}=t,{outlineColor:n}=e;n!==i.outlineColor&&(n=n.map(r=>r/255),n[3]=Number.isFinite(n[3])?n[3]:1,this.setState({outlineColor:n})),!e.sdf&&e.outlineWidth&&tn.log.warn(`${this.id}: fontSettings.sdf is required to render outline`)()}draw(t){let{sdf:e,smoothing:i,outlineWidth:n}=this.props,{outlineColor:r}=this.state,s=n?Math.max(i,$e*(1-n)):-1,a=this.state.model,l={buffer:$e,outlineBuffer:s,gamma:i,enabled:Boolean(e),outlineColor:r};if(a.shaderInputs.setProps({sdf:l}),super.draw(t),e&&n){let{iconManager:c}=this.state;c.getTexture()&&(a.shaderInputs.setProps({sdf:{...l,outlineBuffer:$e}}),a.draw(this.context.renderPass))}}getInstanceOffset(t){return t?Array.from(t).flatMap(e=>super.getInstanceOffset(e)):Qi}getInstanceColorMode(t){return 1}getInstanceIconFrame(t){return t?Array.from(t).flatMap(e=>super.getInstanceIconFrame(e)):Qi}};Bt.defaultProps=ms;Bt.layerName="MultiIconLayer";var be=Bt;var jt=class{constructor({fontSize:t=24,buffer:e=3,radius:i=8,cutoff:n=.25,fontFamily:r="sans-serif",fontWeight:s="normal",fontStyle:a="normal"}={}){this.buffer=e,this.cutoff=n,this.radius=i;let l=this.size=t+e*4,c=this._createCanvas(l),u=this.ctx=c.getContext("2d",{willReadFrequently:!0});u.font=`${a} ${s} ${t}px ${r}`,u.textBaseline="alphabetic",u.textAlign="left",u.fillStyle="black",this.gridOuter=new Float64Array(l*l),this.gridInner=new Float64Array(l*l),this.f=new Float64Array(l),this.z=new Float64Array(l+1),this.v=new Uint16Array(l)}_createCanvas(t){let e=document.createElement("canvas");return e.width=e.height=t,e}draw(t){let{width:e,actualBoundingBoxAscent:i,actualBoundingBoxDescent:n,actualBoundingBoxLeft:r,actualBoundingBoxRight:s}=this.ctx.measureText(t),a=Math.ceil(i),l=0,c=Math.max(0,Math.min(this.size-this.buffer,Math.ceil(s-r))),u=Math.min(this.size-this.buffer,a+Math.ceil(n)),f=c+2*this.buffer,d=u+2*this.buffer,g=Math.max(f*d,0),p=new Uint8ClampedArray(g),h={data:p,width:f,height:d,glyphWidth:c,glyphHeight:u,glyphTop:a,glyphLeft:l,glyphAdvance:e};if(c===0||u===0)return h;let{ctx:m,buffer:v,gridInner:_,gridOuter:x}=this;m.clearRect(v,v,c,u),m.fillText(t,v,v+a);let y=m.getImageData(v,v,c,u);x.fill(1e20,0,g),_.fill(0,0,g);for(let C=0;C<u;C++)for(let S=0;S<c;S++){let N=y.data[4*(C*c+S)+3]/255;if(N===0)continue;let E=(C+v)*f+S+v;if(N===1)x[E]=0,_[E]=1e20;else{let M=.5-N;x[E]=M>0?M*M:0,_[E]=M<0?M*M:0}}en(x,0,0,f,d,f,this.f,this.v,this.z),en(_,v,v,c,u,f,this.f,this.v,this.z);for(let C=0;C<g;C++){let S=Math.sqrt(x[C])-Math.sqrt(_[C]);p[C]=Math.round(255-255*(S/this.radius+this.cutoff))}return h}};function en(o,t,e,i,n,r,s,a,l){for(let c=t;c<t+i;c++)on(o,e*r+c,r,n,s,a,l);for(let c=e;c<e+n;c++)on(o,c*r+t,1,i,s,a,l)}function on(o,t,e,i,n,r,s){r[0]=0,s[0]=-1e20,s[1]=1e20,n[0]=o[t];for(let a=1,l=0,c=0;a<i;a++){n[a]=o[t+a*e];let u=a*a;do{let f=r[l];c=(n[a]-n[f]+u-f*f)/(a-f)/2}while(c<=s[l]&&--l>-1);l++,r[l]=a,s[l]=c,s[l+1]=1e20}for(let a=0,l=0;a<i;a++){for(;s[l+1]<a;)l++;let c=r[l],u=a-c;o[t+a*e]=n[c]+u*u}}var pn=P(L(),1);var nn=P(L(),1),xs=32,vs=[];function ys(o){return Math.pow(2,Math.ceil(Math.log2(o)))}function rn({characterSet:o,getFontWidth:t,fontHeight:e,buffer:i,maxCanvasWidth:n,mapping:r={},xOffset:s=0,yOffset:a=0}){let l=0,c=s,u=e+i*2;for(let f of o)if(!r[f]){let d=t(f);c+d+i*2>n&&(c=0,l++),r[f]={x:c+i,y:a+l*u+i,width:d,height:u,layoutWidth:d,layoutHeight:e},c+=d+i*2}return{mapping:r,xOffset:c,yOffset:a+l*u,canvasHeight:ys(a+(l+1)*u)}}function sn(o,t,e,i){let n=0;for(let r=t;r<e;r++){let s=o[r];n+=i[s]?.layoutWidth||0}return n}function an(o,t,e,i,n,r){let s=t,a=0;for(let l=t;l<e;l++){let c=sn(o,l,l+1,n);a+c>i&&(s<l&&r.push(l),s=l,a=0),a+=c}return a}function Ps(o,t,e,i,n,r){let s=t,a=t,l=t,c=0;for(let u=t;u<e;u++)if((o[u]===" "||o[u+1]===" "||u+1===e)&&(l=u+1),l>a){let f=sn(o,a,l,n);c+f>i&&(s<a&&(r.push(a),s=a,c=0),f>i&&(f=an(o,a,l,i,n,r),s=r[r.length-1])),a=l,c+=f}return c}function _s(o,t,e,i,n=0,r){r===void 0&&(r=o.length);let s=[];return t==="break-all"?an(o,n,r,e,i,s):Ps(o,n,r,e,i,s),s}function Cs(o,t,e,i,n,r){let s=0,a=0;for(let l=t;l<e;l++){let c=o[l],u=i[c];u?(a||(a=u.layoutHeight),n[l]=s+u.layoutWidth/2,s+=u.layoutWidth):(nn.log.warn(`Missing character: ${c} (${c.codePointAt(0)})`)(),n[l]=s,s+=xs)}r[0]=s,r[1]=a}function ln(o,t,e,i,n){let r=Array.from(o),s=r.length,a=new Array(s),l=new Array(s),c=new Array(s),u=(e==="break-word"||e==="break-all")&&isFinite(i)&&i>0,f=[0,0],d=[0,0],g=0,p=0,h=0;for(let m=0;m<=s;m++){let v=r[m];if((v===`
`||m===s)&&(h=m),h>p){let _=u?_s(r,e,i,n,p,h):vs;for(let x=0;x<=_.length;x++){let y=x===0?p:_[x-1],C=x<_.length?_[x]:h;Cs(r,y,C,n,a,d);for(let S=y;S<C;S++){let N=a[S]-d[0]/2,E=r[S],M=n[E]?.layoutOffsetY||0;l[S]=g+d[1]/2+M,c[S]=d[0]}g=g+d[1]*t,f[0]=Math.max(f[0],d[0])}p=h}v===`
`&&(a[p]=0,l[p]=0,c[p]=0,p++)}return f[1]=g,{x:a,y:l,rowWidth:c,size:f}}function cn({value:o,length:t,stride:e,offset:i,startIndices:n,characterSet:r}){let s=o.BYTES_PER_ELEMENT,a=e?e/s:1,l=i?i/s:0,c=n[t]||Math.ceil((o.length-l)/a),u=r&&new Set,f=new Array(t),d=o;if(a>1||l>0){let g=o.constructor;d=new g(c);for(let p=0;p<c;p++)d[p]=o[p*a+l]}for(let g=0;g<t;g++){let p=n[g],h=n[g+1]||c,m=d.subarray(p,h);f[g]=String.fromCodePoint.apply(null,m),u&&m.forEach(u.add,u)}if(u)for(let g of u)r.add(String.fromCodePoint(g));return{texts:f,characterCount:c}}var ut=class{constructor(t=5){this._cache={},this._order=[],this.limit=t}get(t){let e=this._cache[t];return e&&(this._deleteOrder(t),this._appendOrder(t)),e}set(t,e){this._cache[t]?(this.delete(t),this._cache[t]=e,this._appendOrder(t)):(Object.keys(this._cache).length===this.limit&&this.delete(this._order[0]),this._cache[t]=e,this._appendOrder(t))}delete(t){this._cache[t]&&(delete this._cache[t],this._deleteOrder(t))}_deleteOrder(t){let e=this._order.indexOf(t);e>=0&&this._order.splice(e,1)}_appendOrder(t){this._order.push(t)}};function Ls(){let o=[];for(let t=32;t<128;t++)o.push(String.fromCharCode(t));return o}var tt={fontFamily:"Monaco, monospace",fontWeight:"normal",characterSet:Ls(),fontSize:64,buffer:4,sdf:!1,cutoff:.25,radius:12,smoothing:.1},un=1024,fn=.9,dn=1.2,hn=3,Te=new ut(hn);function Ss(o,t){let e;typeof t=="string"?e=new Set(Array.from(t)):e=new Set(t);let i=Te.get(o);if(!i)return e;for(let n in i.mapping)e.has(n)&&e.delete(n);return e}function ws(o,t){for(let e=0;e<o.length;e++)t.data[4*e+3]=o[e]}function gn(o,t,e,i){o.font=`${i} ${e}px ${t}`,o.fillStyle="#000",o.textBaseline="alphabetic",o.textAlign="left"}function mn(o){pn.log.assert(Number.isFinite(o)&&o>=hn,"Invalid cache limit"),Te=new ut(o)}var Vt=class{constructor(){this.props={...tt}}get atlas(){return this._atlas}get mapping(){return this._atlas&&this._atlas.mapping}get scale(){let{fontSize:t,buffer:e}=this.props;return(t*dn+e*2)/t}setProps(t={}){Object.assign(this.props,t),this._key=this._getKey();let e=Ss(this._key,this.props.characterSet),i=Te.get(this._key);if(i&&e.size===0){this._atlas!==i&&(this._atlas=i);return}let n=this._generateFontAtlas(e,i);this._atlas=n,Te.set(this._key,n)}_generateFontAtlas(t,e){let{fontFamily:i,fontWeight:n,fontSize:r,buffer:s,sdf:a,radius:l,cutoff:c}=this.props,u=e&&e.data;u||(u=document.createElement("canvas"),u.width=un);let f=u.getContext("2d",{willReadFrequently:!0});gn(f,i,r,n);let{mapping:d,canvasHeight:g,xOffset:p,yOffset:h}=rn({getFontWidth:m=>f.measureText(m).width,fontHeight:r*dn,buffer:s,characterSet:t,maxCanvasWidth:un,...e&&{mapping:e.mapping,xOffset:e.xOffset,yOffset:e.yOffset}});if(u.height!==g){let m=f.getImageData(0,0,u.width,u.height);u.height=g,f.putImageData(m,0,0)}if(gn(f,i,r,n),a){let m=new jt({fontSize:r,buffer:s,radius:l,cutoff:c,fontFamily:i,fontWeight:`${n}`});for(let v of t){let{data:_,width:x,height:y,glyphTop:C}=m.draw(v);d[v].width=x,d[v].layoutOffsetY=r*fn-C;let S=f.createImageData(x,y);ws(_,S),f.putImageData(S,d[v].x,d[v].y)}}else for(let m of t)f.fillText(m,d[m].x,d[m].y+s+r*fn);return{xOffset:p,yOffset:h,mapping:d,data:u,width:u.width,height:u.height}}_getKey(){let{fontFamily:t,fontWeight:e,fontSize:i,buffer:n,sdf:r,radius:s,cutoff:a}=this.props;return r?`${t} ${e} ${i} ${n} ${s} ${a}`:`${t} ${e} ${i} ${n}`}};var K=P(L(),1),_n=P(I(),1),Cn=P(I(),1);var xn=`uniform textBackgroundUniforms {
  bool billboard;
  float sizeScale;
  float sizeMinPixels;
  float sizeMaxPixels;
  vec4 borderRadius;
  vec4 padding;
  highp int sizeUnits;
  bool stroked;
} textBackground;
`,vn={name:"textBackground",vs:xn,fs:xn,uniformTypes:{billboard:"f32",sizeScale:"f32",sizeMinPixels:"f32",sizeMaxPixels:"f32",borderRadius:"vec4<f32>",padding:"vec4<f32>",sizeUnits:"i32",stroked:"f32"}};var yn=`#version 300 es
#define SHADER_NAME text-background-layer-vertex-shader
in vec2 positions;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceRects;
in float instanceSizes;
in float instanceAngles;
in vec2 instancePixelOffsets;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;
out vec4 vFillColor;
out vec4 vLineColor;
out float vLineWidth;
out vec2 uv;
out vec2 dimensions;
vec2 rotate_by_angle(vec2 vertex, float angle) {
float angle_radian = radians(angle);
float cos_angle = cos(angle_radian);
float sin_angle = sin(angle_radian);
mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
return rotationMatrix * vertex;
}
void main(void) {
geometry.worldPosition = instancePositions;
geometry.uv = positions;
geometry.pickingColor = instancePickingColors;
uv = positions;
vLineWidth = instanceLineWidths;
float sizePixels = clamp(
project_size_to_pixel(instanceSizes * textBackground.sizeScale, textBackground.sizeUnits),
textBackground.sizeMinPixels, textBackground.sizeMaxPixels
);
dimensions = instanceRects.zw * sizePixels + textBackground.padding.xy + textBackground.padding.zw;
vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-textBackground.padding.xy, textBackground.padding.zw, positions);
pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);
pixelOffset += instancePixelOffsets;
pixelOffset.y *= -1.0;
if (textBackground.billboard)  {
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
vec3 offset = vec3(pixelOffset, 0.0);
DECKGL_FILTER_SIZE(offset, geometry);
gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
} else {
vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
DECKGL_FILTER_SIZE(offset_common, geometry);
gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
}
vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vFillColor, geometry);
vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);
DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`;var Pn=`#version 300 es
#define SHADER_NAME text-background-layer-fragment-shader
precision highp float;
in vec4 vFillColor;
in vec4 vLineColor;
in float vLineWidth;
in vec2 uv;
in vec2 dimensions;
out vec4 fragColor;
float round_rect(vec2 p, vec2 size, vec4 radii) {
vec2 pixelPositionCB = (p - 0.5) * size;
vec2 sizeCB = size * 0.5;
float maxBorderRadius = min(size.x, size.y) * 0.5;
vec4 borderRadius = vec4(min(radii, maxBorderRadius));
borderRadius.xy =
(pixelPositionCB.x > 0.0) ? borderRadius.xy : borderRadius.zw;
borderRadius.x = (pixelPositionCB.y > 0.0) ? borderRadius.x : borderRadius.y;
vec2 q = abs(pixelPositionCB) - sizeCB + borderRadius.x;
return -(min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - borderRadius.x);
}
float rect(vec2 p, vec2 size) {
vec2 pixelPosition = p * size;
return min(min(pixelPosition.x, size.x - pixelPosition.x),
min(pixelPosition.y, size.y - pixelPosition.y));
}
vec4 get_stroked_fragColor(float dist) {
float isBorder = smoothedge(dist, vLineWidth);
return mix(vFillColor, vLineColor, isBorder);
}
void main(void) {
geometry.uv = uv;
if (textBackground.borderRadius != vec4(0.0)) {
float distToEdge = round_rect(uv, dimensions, textBackground.borderRadius);
if (textBackground.stroked) {
fragColor = get_stroked_fragColor(distToEdge);
} else {
fragColor = vFillColor;
}
float shapeAlpha = smoothedge(-distToEdge, 0.0);
fragColor.a *= shapeAlpha;
} else {
if (textBackground.stroked) {
float distToEdge = rect(uv, dimensions);
fragColor = get_stroked_fragColor(distToEdge);
} else {
fragColor = vFillColor;
}
}
DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;var Ms={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,borderRadius:{type:"object",value:0},padding:{type:"array",value:[0,0,0,0]},getPosition:{type:"accessor",value:o=>o.position},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},getBoundingRect:{type:"accessor",value:[0,0,0,0]},getFillColor:{type:"accessor",value:[0,0,0,255]},getLineColor:{type:"accessor",value:[0,0,0,255]},getLineWidth:{type:"accessor",value:1}},Ht=class extends K.Layer{getShaders(){return super.getShaders({vs:yn,fs:Pn,modules:[K.project32,K.picking,vn]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:"float64",fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instanceRects:{size:4,accessor:"getBoundingRect"},instancePixelOffsets:{size:2,transition:!0,accessor:"getPixelOffset"},instanceFillColors:{size:4,transition:!0,type:"unorm8",accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:4,transition:!0,type:"unorm8",accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(t){super.updateState(t);let{changeFlags:e}=t;e.extensionsChanged&&(this.state.model?.destroy(),this.state.model=this._getModel(),this.getAttributeManager().invalidateAll())}draw({uniforms:t}){let{billboard:e,sizeScale:i,sizeUnits:n,sizeMinPixels:r,sizeMaxPixels:s,getLineWidth:a}=this.props,{padding:l,borderRadius:c}=this.props;l.length<4&&(l=[l[0],l[1],l[0],l[1]]),Array.isArray(c)||(c=[c,c,c,c]);let u=this.state.model,f={billboard:e,stroked:Boolean(a),borderRadius:c,padding:l,sizeUnits:K.UNIT[n],sizeScale:i,sizeMinPixels:r,sizeMaxPixels:s};u.shaderInputs.setProps({textBackground:f}),u.draw(this.context.renderPass)}_getModel(){let t=[0,0,1,0,0,1,1,1];return new Cn.Model(this.context.device,{...this.getShaders(),id:this.props.id,bufferLayout:this.getAttributeManager().getBufferLayouts(),geometry:new _n.Geometry({topology:"triangle-strip",vertexCount:4,attributes:{positions:{size:2,value:new Float32Array(t)}}}),isInstanced:!0})}};Ht.defaultProps=Ms;Ht.layerName="TextBackgroundLayer";var Ie=Ht;var Ln={start:1,middle:0,end:-1},Sn={top:1,center:0,bottom:-1},Ye=[0,0,0,255],bs=1,Ts={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,background:!1,getBackgroundColor:{type:"accessor",value:[255,255,255,255]},getBorderColor:{type:"accessor",value:Ye},getBorderWidth:{type:"accessor",value:0},backgroundBorderRadius:{type:"object",value:0},backgroundPadding:{type:"array",value:[0,0,0,0]},characterSet:{type:"object",value:tt.characterSet},fontFamily:tt.fontFamily,fontWeight:tt.fontWeight,lineHeight:bs,outlineWidth:{type:"number",value:0,min:0},outlineColor:{type:"color",value:Ye},fontSettings:{type:"object",value:{},compare:1},wordBreak:"break-word",maxWidth:{type:"number",value:-1},getText:{type:"accessor",value:o=>o.text},getPosition:{type:"accessor",value:o=>o.position},getColor:{type:"accessor",value:Ye},getSize:{type:"accessor",value:32},getAngle:{type:"accessor",value:0},getTextAnchor:{type:"accessor",value:"middle"},getAlignmentBaseline:{type:"accessor",value:"center"},getPixelOffset:{type:"accessor",value:[0,0]},backgroundColor:{deprecatedFor:["background","getBackgroundColor"]}},Zt=class extends ft.CompositeLayer{constructor(){super(...arguments),this.getBoundingRect=(t,e)=>{let{size:[i,n]}=this.transformParagraph(t,e),{fontSize:r}=this.state.fontAtlasManager.props;i/=r,n/=r;let{getTextAnchor:s,getAlignmentBaseline:a}=this.props,l=Ln[typeof s=="function"?s(t,e):s],c=Sn[typeof a=="function"?a(t,e):a];return[(l-1)*i/2,(c-1)*n/2,i,n]},this.getIconOffsets=(t,e)=>{let{getTextAnchor:i,getAlignmentBaseline:n}=this.props,{x:r,y:s,rowWidth:a,size:[l,c]}=this.transformParagraph(t,e),u=Ln[typeof i=="function"?i(t,e):i],f=Sn[typeof n=="function"?n(t,e):n],d=r.length,g=new Array(d*2),p=0;for(let h=0;h<d;h++){let m=(1-u)*(l-a[h])/2;g[p++]=(u-1)*l/2+m+r[h],g[p++]=(f-1)*c/2+s[h]}return g}}initializeState(){this.state={styleVersion:0,fontAtlasManager:new Vt},this.props.maxWidth>0&&ft.log.once(1,"v8.9 breaking change: TextLayer maxWidth is now relative to text size")()}updateState(t){let{props:e,oldProps:i,changeFlags:n}=t;(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getText))&&this._updateText(),(this._updateFontAtlas()||e.lineHeight!==i.lineHeight||e.wordBreak!==i.wordBreak||e.maxWidth!==i.maxWidth)&&this.setState({styleVersion:this.state.styleVersion+1})}getPickingInfo({info:t}){return t.object=t.index>=0?this.props.data[t.index]:null,t}_updateFontAtlas(){let{fontSettings:t,fontFamily:e,fontWeight:i}=this.props,{fontAtlasManager:n,characterSet:r}=this.state,s={...t,characterSet:r,fontFamily:e,fontWeight:i};if(!n.mapping)return n.setProps(s),!0;for(let a in s)if(s[a]!==n.props[a])return n.setProps(s),!0;return!1}_updateText(){let{data:t,characterSet:e}=this.props,i=t.attributes?.getText,{getText:n}=this.props,r=t.startIndices,s,a=e==="auto"&&new Set;if(i&&r){let{texts:l,characterCount:c}=cn({...ArrayBuffer.isView(i)?{value:i}:i,length:t.length,startIndices:r,characterSet:a});s=c,n=(u,{index:f})=>l[f]}else{let{iterable:l,objectInfo:c}=(0,ft.createIterable)(t);r=[0],s=0;for(let u of l){c.index++;let f=Array.from(n(u,c)||"");a&&f.forEach(a.add,a),s+=f.length,r.push(s)}}this.setState({getText:n,startIndices:r,numInstances:s,characterSet:a||e})}transformParagraph(t,e){let{fontAtlasManager:i}=this.state,n=i.mapping,r=this.state.getText,{wordBreak:s,lineHeight:a,maxWidth:l}=this.props,c=r(t,e)||"";return ln(c,a,s,l*i.props.fontSize,n)}renderLayers(){let{startIndices:t,numInstances:e,getText:i,fontAtlasManager:{scale:n,atlas:r,mapping:s},styleVersion:a}=this.state,{data:l,_dataDiff:c,getPosition:u,getColor:f,getSize:d,getAngle:g,getPixelOffset:p,getBackgroundColor:h,getBorderColor:m,getBorderWidth:v,backgroundBorderRadius:_,backgroundPadding:x,background:y,billboard:C,fontSettings:S,outlineWidth:N,outlineColor:E,sizeScale:M,sizeUnits:Jt,sizeMinPixels:et,sizeMaxPixels:pt,transitions:T,updateTriggers:b}=this.props,qt=this.getSubLayerClass("characters",be),Oe=this.getSubLayerClass("background",Ie);return[y&&new Oe({getFillColor:h,getLineColor:m,getLineWidth:v,borderRadius:_,padding:x,getPosition:u,getSize:d,getAngle:g,getPixelOffset:p,billboard:C,sizeScale:M,sizeUnits:Jt,sizeMinPixels:et,sizeMaxPixels:pt,transitions:T&&{getPosition:T.getPosition,getAngle:T.getAngle,getSize:T.getSize,getFillColor:T.getBackgroundColor,getLineColor:T.getBorderColor,getLineWidth:T.getBorderWidth,getPixelOffset:T.getPixelOffset}},this.getSubLayerProps({id:"background",updateTriggers:{getPosition:b.getPosition,getAngle:b.getAngle,getSize:b.getSize,getFillColor:b.getBackgroundColor,getLineColor:b.getBorderColor,getLineWidth:b.getBorderWidth,getPixelOffset:b.getPixelOffset,getBoundingRect:{getText:b.getText,getTextAnchor:b.getTextAnchor,getAlignmentBaseline:b.getAlignmentBaseline,styleVersion:a}}}),{data:l.attributes&&l.attributes.background?{length:l.length,attributes:l.attributes.background}:l,_dataDiff:c,autoHighlight:!1,getBoundingRect:this.getBoundingRect}),new qt({sdf:S.sdf,smoothing:Number.isFinite(S.smoothing)?S.smoothing:tt.smoothing,outlineWidth:N/(S.radius||tt.radius),outlineColor:E,iconAtlas:r,iconMapping:s,getPosition:u,getColor:f,getSize:d,getAngle:g,getPixelOffset:p,billboard:C,sizeScale:M*n,sizeUnits:Jt,sizeMinPixels:et*n,sizeMaxPixels:pt*n,transitions:T&&{getPosition:T.getPosition,getAngle:T.getAngle,getColor:T.getColor,getSize:T.getSize,getPixelOffset:T.getPixelOffset}},this.getSubLayerProps({id:"characters",updateTriggers:{all:b.getText,getPosition:b.getPosition,getAngle:b.getAngle,getColor:b.getColor,getSize:b.getSize,getPixelOffset:b.getPixelOffset,getIconOffsets:{getTextAnchor:b.getTextAnchor,getAlignmentBaseline:b.getAlignmentBaseline,styleVersion:a}}}),{data:l,_dataDiff:c,startIndices:t,numInstances:e,getIconOffsets:this.getIconOffsets,getIcon:i})]}static set fontAtlasCacheLimit(t){mn(t)}};Zt.defaultProps=Ts;Zt.layerName="TextLayer";var Ae=Zt;var Kt={circle:{type:fe,props:{filled:"filled",stroked:"stroked",lineWidthMaxPixels:"lineWidthMaxPixels",lineWidthMinPixels:"lineWidthMinPixels",lineWidthScale:"lineWidthScale",lineWidthUnits:"lineWidthUnits",pointRadiusMaxPixels:"radiusMaxPixels",pointRadiusMinPixels:"radiusMinPixels",pointRadiusScale:"radiusScale",pointRadiusUnits:"radiusUnits",pointAntialiasing:"antialiasing",pointBillboard:"billboard",getFillColor:"getFillColor",getLineColor:"getLineColor",getLineWidth:"getLineWidth",getPointRadius:"getRadius"}},icon:{type:it,props:{iconAtlas:"iconAtlas",iconMapping:"iconMapping",iconSizeMaxPixels:"sizeMaxPixels",iconSizeMinPixels:"sizeMinPixels",iconSizeScale:"sizeScale",iconSizeUnits:"sizeUnits",iconAlphaCutoff:"alphaCutoff",iconBillboard:"billboard",getIcon:"getIcon",getIconAngle:"getAngle",getIconColor:"getColor",getIconPixelOffset:"getPixelOffset",getIconSize:"getSize"}},text:{type:Ae,props:{textSizeMaxPixels:"sizeMaxPixels",textSizeMinPixels:"sizeMinPixels",textSizeScale:"sizeScale",textSizeUnits:"sizeUnits",textBackground:"background",textBackgroundPadding:"backgroundPadding",textFontFamily:"fontFamily",textFontWeight:"fontWeight",textLineHeight:"lineHeight",textMaxWidth:"maxWidth",textOutlineColor:"outlineColor",textOutlineWidth:"outlineWidth",textWordBreak:"wordBreak",textCharacterSet:"characterSet",textBillboard:"billboard",textFontSettings:"fontSettings",getText:"getText",getTextAngle:"getAngle",getTextColor:"getColor",getTextPixelOffset:"getPixelOffset",getTextSize:"getSize",getTextAnchor:"getTextAnchor",getTextAlignmentBaseline:"getAlignmentBaseline",getTextBackgroundColor:"getBackgroundColor",getTextBorderColor:"getBorderColor",getTextBorderWidth:"getBorderWidth"}}},Xt={type:rt,props:{lineWidthUnits:"widthUnits",lineWidthScale:"widthScale",lineWidthMinPixels:"widthMinPixels",lineWidthMaxPixels:"widthMaxPixels",lineJointRounded:"jointRounded",lineCapRounded:"capRounded",lineMiterLimit:"miterLimit",lineBillboard:"billboard",getLineColor:"getColor",getLineWidth:"getWidth"}},Ee={type:lt,props:{extruded:"extruded",filled:"filled",wireframe:"wireframe",elevationScale:"elevationScale",material:"material",_full3d:"_full3d",getElevation:"getElevation",getFillColor:"getFillColor",getLineColor:"getLineColor"}};function dt({type:o,props:t}){let e={};for(let i in t)e[i]=o.defaultProps[t[i]];return e}function Re(o,t){let{transitions:e,updateTriggers:i}=o.props,n={updateTriggers:{},transitions:e&&{getPosition:e.geometry}};for(let r in t){let s=t[r],a=o.props[r];r.startsWith("get")&&(a=o.getSubLayerAccessor(a),n.updateTriggers[s]=i[r],e&&(n.transitions[s]=e[r])),n[s]=a}return n}var gt=P(L(),1);function Mn(o){if(Array.isArray(o))return o;switch(gt.log.assert(o.type,"GeoJSON does not have type"),o.type){case"Feature":return[o];case"FeatureCollection":return gt.log.assert(Array.isArray(o.features),"GeoJSON does not have features array"),o.features;default:return[{geometry:o}]}}function Je(o,t,e={}){let i={pointFeatures:[],lineFeatures:[],polygonFeatures:[],polygonOutlineFeatures:[]},{startRow:n=0,endRow:r=o.length}=e;for(let s=n;s<r;s++){let a=o[s],{geometry:l}=a;if(l)if(l.type==="GeometryCollection"){gt.log.assert(Array.isArray(l.geometries),"GeoJSON does not have geometries array");let{geometries:c}=l;for(let u=0;u<c.length;u++){let f=c[u];wn(f,i,t,a,s)}}else wn(l,i,t,a,s)}return i}function wn(o,t,e,i,n){let{type:r,coordinates:s}=o,{pointFeatures:a,lineFeatures:l,polygonFeatures:c,polygonOutlineFeatures:u}=t;if(!As(r,s)){gt.log.warn(`${r} coordinates are malformed`)();return}switch(r){case"Point":a.push(e({geometry:o},i,n));break;case"MultiPoint":s.forEach(f=>{a.push(e({geometry:{type:"Point",coordinates:f}},i,n))});break;case"LineString":l.push(e({geometry:o},i,n));break;case"MultiLineString":s.forEach(f=>{l.push(e({geometry:{type:"LineString",coordinates:f}},i,n))});break;case"Polygon":c.push(e({geometry:o},i,n)),s.forEach(f=>{u.push(e({geometry:{type:"LineString",coordinates:f}},i,n))});break;case"MultiPolygon":s.forEach(f=>{c.push(e({geometry:{type:"Polygon",coordinates:f}},i,n)),f.forEach(d=>{u.push(e({geometry:{type:"LineString",coordinates:d}},i,n))})});break;default:}}var Is={Point:1,MultiPoint:2,LineString:2,MultiLineString:3,Polygon:3,MultiPolygon:4};function As(o,t){let e=Is[o];for(gt.log.assert(e,`Unknown GeoJSON type ${o}`);t&&--e>0;)t=t[0];return t&&Number.isFinite(t[0])}function bn(){return{points:{},lines:{},polygons:{},polygonsOutline:{}}}function ze(o){return o.geometry.coordinates}function Tn(o,t){let e=bn(),{pointFeatures:i,lineFeatures:n,polygonFeatures:r,polygonOutlineFeatures:s}=o;return e.points.data=i,e.points._dataDiff=t.pointFeatures&&(()=>t.pointFeatures),e.points.getPosition=ze,e.lines.data=n,e.lines._dataDiff=t.lineFeatures&&(()=>t.lineFeatures),e.lines.getPath=ze,e.polygons.data=r,e.polygons._dataDiff=t.polygonFeatures&&(()=>t.polygonFeatures),e.polygons.getPolygon=ze,e.polygonsOutline.data=s,e.polygonsOutline._dataDiff=t.polygonOutlineFeatures&&(()=>t.polygonOutlineFeatures),e.polygonsOutline.getPath=ze,e}function In(o,t){let e=bn(),{points:i,lines:n,polygons:r}=o,s=$i(o,t);return e.points.data={length:i.positions.value.length/i.positions.size,attributes:{...i.attributes,getPosition:i.positions,instancePickingColors:{size:4,value:s.points}},properties:i.properties,numericProps:i.numericProps,featureIds:i.featureIds},e.lines.data={length:n.pathIndices.value.length-1,startIndices:n.pathIndices.value,attributes:{...n.attributes,getPath:n.positions,instancePickingColors:{size:4,value:s.lines}},properties:n.properties,numericProps:n.numericProps,featureIds:n.featureIds},e.lines._pathType="open",e.polygons.data={length:r.polygonIndices.value.length-1,startIndices:r.polygonIndices.value,attributes:{...r.attributes,getPolygon:r.positions,pickingColors:{size:4,value:s.polygons}},properties:r.properties,numericProps:r.numericProps,featureIds:r.featureIds},e.polygons._normalize=!1,r.triangles&&(e.polygons.data.attributes.indices=r.triangles.value),e.polygonsOutline.data={length:r.primitivePolygonIndices.value.length-1,startIndices:r.primitivePolygonIndices.value,attributes:{...r.attributes,getPath:r.positions,instancePickingColors:{size:4,value:s.polygons}},properties:r.properties,numericProps:r.numericProps,featureIds:r.featureIds},e.polygonsOutline._pathType="open",e}var Es=["points","linestrings","polygons"],Rs={...dt(Kt.circle),...dt(Kt.icon),...dt(Kt.text),...dt(Xt),...dt(Ee),stroked:!0,filled:!0,extruded:!1,wireframe:!1,_full3d:!1,iconAtlas:{type:"object",value:null},iconMapping:{type:"object",value:{}},getIcon:{type:"accessor",value:o=>o.properties.icon},getText:{type:"accessor",value:o=>o.properties.text},pointType:"circle",getRadius:{deprecatedFor:"getPointRadius"}},$t=class extends An.CompositeLayer{initializeState(){this.state={layerProps:{},features:{},featuresDiff:{}}}updateState({props:t,changeFlags:e}){if(!e.dataChanged)return;let{data:i}=this.props,n=i&&"points"in i&&"polygons"in i&&"lines"in i;this.setState({binary:n}),n?this._updateStateBinary({props:t,changeFlags:e}):this._updateStateJSON({props:t,changeFlags:e})}_updateStateBinary({props:t,changeFlags:e}){let i=In(t.data,this.encodePickingColor);this.setState({layerProps:i})}_updateStateJSON({props:t,changeFlags:e}){let i=Mn(t.data),n=this.getSubLayerRow.bind(this),r={},s={};if(Array.isArray(e.dataChanged)){let l=this.state.features;for(let c in l)r[c]=l[c].slice(),s[c]=[];for(let c of e.dataChanged){let u=Je(i,n,c);for(let f in l)s[f].push(Me({data:r[f],getIndex:d=>d.__source.index,dataRange:c,replace:u[f]}))}}else r=Je(i,n);let a=Tn(r,s);this.setState({features:r,featuresDiff:s,layerProps:a})}getPickingInfo(t){let e=super.getPickingInfo(t),{index:i,sourceLayer:n}=e;return e.featureType=Es.find(r=>n.id.startsWith(`${this.id}-${r}-`)),i>=0&&n.id.startsWith(`${this.id}-points-text`)&&this.state.binary&&(e.index=this.props.data.points.globalFeatureIds.value[i]),e}_updateAutoHighlight(t){let e=`${this.id}-points-`,i=t.featureType==="points";for(let n of this.getSubLayers())n.id.startsWith(e)===i&&n.updateAutoHighlight(t)}_renderPolygonLayer(){let{extruded:t,wireframe:e}=this.props,{layerProps:i}=this.state,n="polygons-fill",r=this.shouldRenderSubLayer(n,i.polygons?.data)&&this.getSubLayerClass(n,Ee.type);if(r){let s=Re(this,Ee.props),a=t&&e;return a||delete s.getLineColor,s.updateTriggers.lineColors=a,new r(s,this.getSubLayerProps({id:n,updateTriggers:s.updateTriggers}),i.polygons)}return null}_renderLineLayers(){let{extruded:t,stroked:e}=this.props,{layerProps:i}=this.state,n="polygons-stroke",r="linestrings",s=!t&&e&&this.shouldRenderSubLayer(n,i.polygonsOutline?.data)&&this.getSubLayerClass(n,Xt.type),a=this.shouldRenderSubLayer(r,i.lines?.data)&&this.getSubLayerClass(r,Xt.type);if(s||a){let l=Re(this,Xt.props);return[s&&new s(l,this.getSubLayerProps({id:n,updateTriggers:l.updateTriggers}),i.polygonsOutline),a&&new a(l,this.getSubLayerProps({id:r,updateTriggers:l.updateTriggers}),i.lines)]}return null}_renderPointLayers(){let{pointType:t}=this.props,{layerProps:e,binary:i}=this.state,{highlightedObjectIndex:n}=this.props;!i&&Number.isFinite(n)&&(n=e.points.data.findIndex(a=>a.__source.index===n));let r=new Set(t.split("+")),s=[];for(let a of r){let l=`points-${a}`,c=Kt[a],u=c&&this.shouldRenderSubLayer(l,e.points?.data)&&this.getSubLayerClass(l,c.type);if(u){let f=Re(this,c.props),d=e.points;if(a==="text"&&i){let{instancePickingColors:g,...p}=d.data.attributes;d={...d,data:{...d.data,attributes:p}}}s.push(new u(f,this.getSubLayerProps({id:l,updateTriggers:f.updateTriggers,highlightedObjectIndex:n}),d))}}return s}renderLayers(){let{extruded:t}=this.props,e=this._renderPolygonLayer(),i=this._renderLineLayers(),n=this._renderPointLayers();return[!t&&e,i,n,t&&e]}getSubLayerAccessor(t){let{binary:e}=this.state;return!e||typeof t!="function"?super.getSubLayerAccessor(t):(i,n)=>{let{data:r,index:s}=n,a=Xi(r,s);return t(a,n)}}};$t.layerName="GeoJsonLayer";$t.defaultProps=Rs;var En=$t;return Un(Yt);})();
      return __exports__;
      });
