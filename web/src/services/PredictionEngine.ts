import { gameStore } from '@/stores/gameStore';

export interface UserIntent {
  type: 'movement' | 'exploration' | 'information' | 'entertainment';
  confidence: number;
  suggestedActions: SuggestedAction[];
}

export interface SuggestedAction {
  id: string;
  type: 'quick_move' | 'explore_category' | 'time_based' | 'contextual';
  title: string;
  description: string;
  emoji: string;
  action: () => void;
  priority: number;
  relevanceScore: number;
}

export interface UserBehaviorPattern {
  timeOfDay: number;
  dayOfWeek: number;
  frequentLocations: string[];
  preferredCategories: string[];
  sessionDuration: number;
  interactionFrequency: number;
}

export class PredictionEngine {
  private behaviorHistory: UserBehaviorPattern[] = [];
  private currentSession: {
    startTime: number;
    interactions: number;
    locations: string[];
    categories: string[];
  } = {
    startTime: Date.now(),
    interactions: 0,
    locations: [],
    categories: []
  };

  constructor() {
    this.loadBehaviorHistory();
    this.startSessionTracking();
  }

  // ÂàÜÊûêÁî®Êà∂Ë°åÁÇ∫Ê®°Âºè
  analyzeUserBehavior(): UserIntent {
    const currentTime = new Date();
    const hour = currentTime.getHours();
    const dayOfWeek = currentTime.getDay();

    // Âü∫ÊñºÊôÇÈñìÁöÑÊÑèÂúñÊé®Ê∏¨
    let timeBasedIntent: UserIntent['type'] = 'exploration';
    let confidence = 0.6;

    if (hour >= 7 && hour < 10) {
      timeBasedIntent = 'movement';
      confidence = 0.8;
    } else if (hour >= 12 && hour < 14) {
      timeBasedIntent = 'entertainment';
      confidence = 0.7;
    } else if (hour >= 18 && hour < 22) {
      timeBasedIntent = 'entertainment';
      confidence = 0.9;
    } else if (hour >= 22 || hour < 6) {
      timeBasedIntent = 'information';
      confidence = 0.6;
    }

    const suggestedActions = this.generateSuggestedActions(timeBasedIntent, hour, dayOfWeek);

    return {
      type: timeBasedIntent,
      confidence,
      suggestedActions: suggestedActions.sort((a, b) => b.relevanceScore - a.relevanceScore)
    };
  }

  // ÁîüÊàêÂª∫Ë≠∞Êìç‰Ωú
  private generateSuggestedActions(intent: UserIntent['type'], hour: number, dayOfWeek: number): SuggestedAction[] {
    const actions: SuggestedAction[] = [];
    const player = gameStore.currentPlayer;

    // ÊôÇÈñìÂü∫Á§éÂª∫Ë≠∞
    if (hour >= 7 && hour < 10) {
      actions.push({
        id: 'morning-nature',
        type: 'time_based',
        title: 'Êô®ÈñìËá™ÁÑ∂Êé¢Á¥¢',
        description: 'ÈÅ©ÂêàÊó©Êô®ÁöÑÊà∂Â§ñÊ¥ªÂãïÂú∞Èªû',
        emoji: 'üåÖ',
        action: () => this.handleQuickMove('ÈôΩÊòéÂ±±'),
        priority: 1,
        relevanceScore: 0.9
      });

      actions.push({
        id: 'morning-exercise',
        type: 'time_based',
        title: 'ÈÅãÂãïÂÅ•Ë∫´Â†¥ÊâÄ',
        description: 'Êô®Ë∑ëÊàñÈÅãÂãïÁöÑÂ•ΩÂéªËôï',
        emoji: 'üèÉ‚Äç‚ôÇÔ∏è',
        action: () => this.handleQuickMove('Â§ßÂÆâÊ£ÆÊûóÂÖ¨Âúí'),
        priority: 2,
        relevanceScore: 0.8
      });
    } else if (hour >= 12 && hour < 14) {
      actions.push({
        id: 'lunch-food',
        type: 'time_based',
        title: 'ÂçàÈ§êÁæéÈ£üÊé®Ëñ¶',
        description: 'ÈôÑËøëÁöÑÁæéÈ£üÈ§êÂª≥',
        emoji: 'üçΩÔ∏è',
        action: () => this.handleCategoryExplore('food'),
        priority: 1,
        relevanceScore: 0.9
      });
    } else if (hour >= 18 && hour < 22) {
      actions.push({
        id: 'evening-nightmarket',
        type: 'time_based',
        title: 'Â§úÂ∏ÇÁæéÈ£ü‰πãÊóÖ',
        description: 'È´îÈ©óÂè∞ÁÅ£Â§úÂ∏ÇÊñáÂåñ',
        emoji: 'üçú',
        action: () => this.handleQuickMove('Â£´ÊûóÂ§úÂ∏Ç'),
        priority: 1,
        relevanceScore: 0.95
      });

      actions.push({
        id: 'evening-entertainment',
        type: 'time_based',
        title: 'Â§úÈñìÂ®õÊ®Ç',
        description: 'ÈÅ©ÂêàÂ§úÊôöÁöÑ‰ºëÈñíÊ¥ªÂãï',
        emoji: 'üåÉ',
        action: () => this.handleQuickMove('‰ø°Áæ©ÂïÜÂúà'),
        priority: 2,
        relevanceScore: 0.8
      });
    }

    // ÈÄ±Êú´ÁâπÊÆäÂª∫Ë≠∞
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      actions.push({
        id: 'weekend-cultural',
        type: 'contextual',
        title: 'ÈÄ±Êú´ÊñáÂåñ‰πãÊóÖ',
        description: 'Êé¢Á¥¢Âè∞ÁÅ£ÊñáÂåñÂè§Ëπü',
        emoji: 'üèõÔ∏è',
        action: () => this.handleCategoryExplore('culture'),
        priority: 3,
        relevanceScore: 0.7
      });
    }

    // ‰ΩçÁΩÆÁõ∏ÈóúÂª∫Ë≠∞
    if (player) {
      const nearbyActions = this.generateNearbyActions(player.latitude, player.longitude);
      actions.push(...nearbyActions);
    }

    // ÂÄãÊÄßÂåñÂª∫Ë≠∞Âü∫ÊñºÊ≠∑Âè≤
    const personalizedActions = this.generatePersonalizedActions();
    actions.push(...personalizedActions);

    return actions;
  }

  // ÁîüÊàêÈôÑËøëÂú∞ÈªûÂª∫Ë≠∞
  private generateNearbyActions(lat: number, lng: number): SuggestedAction[] {
    const actions: SuggestedAction[] = [];

    // Âè∞ÂåóÂú∞ÂçÄÂª∫Ë≠∞
    if (lat > 25.0 && lat < 25.2 && lng > 121.4 && lng < 121.7) {
      actions.push({
        id: 'nearby-101',
        type: 'contextual',
        title: 'ÂâçÂæÄÂè∞Âåó101',
        description: 'Âè∞ÂåóËëóÂêçÂú∞Ê®ô',
        emoji: 'üèôÔ∏è',
        action: () => this.handleQuickMove('Âè∞Âåó101'),
        priority: 4,
        relevanceScore: 0.8
      });

      actions.push({
        id: 'nearby-presidential',
        type: 'contextual',
        title: 'ÂèÉËßÄÁ∏ΩÁµ±Â∫ú',
        description: 'Ê≠∑Âè≤ÊîøÊ≤ªÂª∫ÁØâ',
        emoji: 'üèõÔ∏è',
        action: () => this.handleQuickMove('Á∏ΩÁµ±Â∫ú'),
        priority: 5,
        relevanceScore: 0.7
      });
    }

    return actions;
  }

  // ÁîüÊàêÂÄãÊÄßÂåñÂª∫Ë≠∞
  private generatePersonalizedActions(): SuggestedAction[] {
    const actions: SuggestedAction[] = [];
    const recentPatterns = this.getRecentBehaviorPatterns();

    // Âü∫ÊñºÊúÄËøëË®™ÂïèÁöÑÈ°ûÂà•
    if (recentPatterns.preferredCategories.includes('food')) {
      actions.push({
        id: 'personalized-food',
        type: 'contextual',
        title: 'Êõ¥Â§öÁæéÈ£üÊé¢Á¥¢',
        description: 'Ê†πÊìöÊÇ®ÁöÑÂñúÂ•ΩÊé®Ëñ¶',
        emoji: 'üç¥',
        action: () => this.handleCategoryExplore('food'),
        priority: 6,
        relevanceScore: 0.6
      });
    }

    if (recentPatterns.preferredCategories.includes('culture')) {
      actions.push({
        id: 'personalized-culture',
        type: 'contextual',
        title: 'ÊñáÂåñÊ∑±Â∫¶ÈÅä',
        description: 'ÁπºÁ∫åÊÇ®ÁöÑÊñáÂåñÊé¢Á¥¢',
        emoji: 'üé≠',
        action: () => this.handleCategoryExplore('culture'),
        priority: 7,
        relevanceScore: 0.6
      });
    }

    return actions;
  }

  // È†êËºâÁõ∏ÈóúÊï∏Êìö
  preloadRelevantData(): void {
    const intent = this.analyzeUserBehavior();

    // È†êËºâÂª∫Ë≠∞Âú∞ÈªûÁöÑË©≥Á¥∞‰ø°ÊÅØ
    intent.suggestedActions.slice(0, 3).forEach(action => {
      // ÂèØ‰ª•Âú®ÈÄôË£°È†êËºâÂú∞ÈªûË©≥Á¥∞‰ø°ÊÅØ„ÄÅÂúñÁâáÁ≠â
      console.debug(`È†êËºâÊï∏Êìö: ${action.title}`);
    });
  }

  // ÈÅ©Êáâ‰∏ä‰∏ãÊñá
  adaptToContext(): any {
    const intent = this.analyzeUserBehavior();
    const currentTime = new Date();

    return {
      suggestedActions: intent.suggestedActions.slice(0, 4),
      timeContext: {
        hour: currentTime.getHours(),
        period: this.getTimePeriod(currentTime.getHours()),
        isWeekend: [0, 6].includes(currentTime.getDay())
      },
      userIntent: intent.type,
      confidence: intent.confidence
    };
  }

  // Ë®òÈåÑÁî®Êà∂‰∫§‰∫í
  recordInteraction(type: string, data: any): void {
    this.currentSession.interactions++;

    if (type === 'location_visit') {
      this.currentSession.locations.push(data.location);
    } else if (type === 'category_explore') {
      this.currentSession.categories.push(data.category);
    }

    // ÊØè10Ê¨°‰∫§‰∫í‰øùÂ≠ò‰∏ÄÊ¨°Ë°åÁÇ∫Ê®°Âºè
    if (this.currentSession.interactions % 10 === 0) {
      this.saveBehaviorPattern();
    }
  }

  // ÁßÅÊúâËºîÂä©ÊñπÊ≥ï
  private handleQuickMove(location: string): void {
    this.recordInteraction('location_visit', { location });
    // Ëß∏ÁôºÁßªÂãïÈÇèËºØ
    console.log(`Êô∫ËÉΩÂª∫Ë≠∞ÁßªÂãïÂà∞: ${location}`);
  }

  private handleCategoryExplore(category: string): void {
    this.recordInteraction('category_explore', { category });
    console.log(`Êô∫ËÉΩÂª∫Ë≠∞Êé¢Á¥¢ÂàÜÈ°û: ${category}`);
  }

  private getTimePeriod(hour: number): string {
    if (hour >= 6 && hour < 10) return 'morning';
    if (hour >= 10 && hour < 14) return 'noon';
    if (hour >= 14 && hour < 18) return 'afternoon';
    if (hour >= 18 && hour < 22) return 'evening';
    return 'night';
  }

  private getRecentBehaviorPatterns(): UserBehaviorPattern {
    const defaultPattern: UserBehaviorPattern = {
      timeOfDay: new Date().getHours(),
      dayOfWeek: new Date().getDay(),
      frequentLocations: [],
      preferredCategories: [],
      sessionDuration: 0,
      interactionFrequency: 0
    };

    if (this.behaviorHistory.length === 0) {
      return defaultPattern;
    }

    // ÂàÜÊûêÊúÄËøëÁöÑË°åÁÇ∫Ê®°Âºè
    const recent = this.behaviorHistory.slice(-5);
    const categories = recent.flatMap(p => p.preferredCategories);
    const locations = recent.flatMap(p => p.frequentLocations);

    return {
      ...defaultPattern,
      preferredCategories: [...new Set(categories)],
      frequentLocations: [...new Set(locations)]
    };
  }

  private loadBehaviorHistory(): void {
    try {
      const stored = localStorage.getItem('user_behavior_history');
      if (stored) {
        this.behaviorHistory = JSON.parse(stored);
      }
    } catch (error) {
      console.debug('ÁÑ°Ê≥ïËºâÂÖ•Ë°åÁÇ∫Ê≠∑Âè≤:', error);
    }
  }

  private saveBehaviorPattern(): void {
    const pattern: UserBehaviorPattern = {
      timeOfDay: new Date().getHours(),
      dayOfWeek: new Date().getDay(),
      frequentLocations: [...new Set(this.currentSession.locations)],
      preferredCategories: [...new Set(this.currentSession.categories)],
      sessionDuration: Date.now() - this.currentSession.startTime,
      interactionFrequency: this.currentSession.interactions
    };

    this.behaviorHistory.push(pattern);

    // Âè™‰øùÁïôÊúÄËøë50ÂÄãË°åÁÇ∫Ê®°Âºè
    if (this.behaviorHistory.length > 50) {
      this.behaviorHistory = this.behaviorHistory.slice(-50);
    }

    try {
      localStorage.setItem('user_behavior_history', JSON.stringify(this.behaviorHistory));
    } catch (error) {
      console.debug('ÁÑ°Ê≥ï‰øùÂ≠òË°åÁÇ∫Ê®°Âºè:', error);
    }
  }

  private startSessionTracking(): void {
    // ÊØèÂàÜÈêòÊõ¥Êñ∞‰∏ÄÊ¨°È†êÊ∏¨
    setInterval(() => {
      this.preloadRelevantData();
    }, 60000);

    // È†ÅÈù¢Âç∏ËºâÊôÇ‰øùÂ≠òÁï∂ÂâçÊúÉË©±
    window.addEventListener('beforeunload', () => {
      this.saveBehaviorPattern();
    });
  }
}

// ÂâµÂª∫ÂÖ®Â±ÄÈ†êÊ∏¨ÂºïÊìéÂØ¶‰æã
export const predictionEngine = new PredictionEngine();